{
  "openapi": "3.0.1",
  "info": {
    "title": "Cognite API",
    "description": "This is the reference documentation for the Cognite API. Here you can see an overview of all methods available through the API.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.cognitedata.com"
    }
  ],
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "extra": {
            "type": "object",
            "description": "Additional data"
          }
        }
      },
      "Cursor": {
        "description": "Cursor for paging through results",
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string"
          }
        }
      },
      "EpochTimestamp": {
        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
        "type": "integer",
        "minimum": 0,
        "format": "int64"
      },
      "EpochTimestampRange": {
        "description": "Range between two timestamps",
        "type": "object",
        "properties": {
          "max": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "min": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "CogniteInternalId": {
        "description": "Javascript friendly internal ID given to the object.",
        "type": "integer",
        "minimum": 1,
        "maximum": 9007199254740991,
        "format": "int64"
      },
      "CogniteExternalId": {
        "description": "External Id provided by client. Should be unique within the project.",
        "type": "string",
        "maxLength": 255
      },
      "CogniteRefId": {
        "description": "Reference ID used only in post request to disambiguate references to duplicate names.",
        "type": "string",
        "maxLength": 50
      },
      "CogniteParentRefId": {
        "description": "Reference ID of parent, to disambiguate if multiple nodes have the same name.",
        "type": "string",
        "maxLength": 50
      },
      "AssetName": {
        "type": "string",
        "description": "Name of asset. Often referred to as tag."
      },
      "AssetDescription": {
        "type": "string",
        "description": "Description of asset."
      },
      "AssetMetadata": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value",
        "additionalProperties": {
          "type": "string"
        }
      },
      "AssetSource": {
        "type": "string",
        "description": "The source of this asset"
      },
      "AssetInternalId": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "AssetExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "AssetIdEither": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "DataIds": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    }
                  }
                }
              ]
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "ExternalAsset": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "Name of asset. Often referred to as tag."
          },
          "parentId": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "Description of asset."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "description": "The source of this asset"
          }
        },
        "description": "Representation of a physical asset, e.g plant or piece of equipment"
      },
      "Asset": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "Name of asset. Often referred to as tag."
              },
              "parentId": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "description": {
                "type": "string",
                "description": "Description of asset."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "description": "The source of this asset"
              }
            },
            "description": "Representation of a physical asset, e.g plant or piece of equipment"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "lastUpdatedTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "path": {
                "type": "array",
                "description": "IDs of assets on the path to the asset.",
                "items": {
                  "type": "integer",
                  "description": "IDs of assets on the path to the asset.",
                  "format": "int64"
                }
              },
              "depth": {
                "type": "integer",
                "description": "Asset path depth (number of levels below root node).",
                "format": "int32",
                "minimum": 0
              }
            }
          }
        ]
      },
      "DataAsset": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of asset. Often referred to as tag."
                    },
                    "parentId": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of asset."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "The source of this asset"
                    }
                  },
                  "description": "Representation of a physical asset, e.g plant or piece of equipment"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "path": {
                      "type": "array",
                      "description": "IDs of assets on the path to the asset.",
                      "items": {
                        "type": "integer",
                        "description": "IDs of assets on the path to the asset.",
                        "format": "int64"
                      }
                    },
                    "depth": {
                      "type": "integer",
                      "description": "Asset path depth (number of levels below root node).",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DataAssetChange": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "name": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              },
                              "description": "Non removable string change.",
                              "required": [
                                "set"
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "properties": {
                                "add": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                },
                                "remove": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "description": "Array of keys of key-value pairs to remove.",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "set": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                }
                              }
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "name": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              },
                              "description": "Non removable string change.",
                              "required": [
                                "set"
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "properties": {
                                "add": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                },
                                "remove": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "description": "Array of keys of key-value pairs to remove.",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "set": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                }
                              }
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "ExternalAssetItem": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "Name of asset. Often referred to as tag."
              },
              "parentId": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "description": {
                "type": "string",
                "description": "Description of asset."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "description": "The source of this asset"
              }
            },
            "description": "Representation of a physical asset, e.g plant or piece of equipment"
          },
          {
            "type": "object",
            "properties": {
              "refId": {
                "description": "Reference ID used only in post request to disambiguate references to duplicate names.",
                "type": "string",
                "maxLength": 50
              },
              "parentRefId": {
                "description": "Reference ID of parent, to disambiguate if multiple nodes have the same name.",
                "type": "string",
                "maxLength": 50
              }
            }
          }
        ]
      },
      "DataExternalAsset": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of asset. Often referred to as tag."
                    },
                    "parentId": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of asset."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "The source of this asset"
                    }
                  },
                  "description": "Representation of a physical asset, e.g plant or piece of equipment"
                },
                {
                  "type": "object",
                  "properties": {
                    "refId": {
                      "description": "Reference ID used only in post request to disambiguate references to duplicate names.",
                      "type": "string",
                      "maxLength": 50
                    },
                    "parentRefId": {
                      "description": "Reference ID of parent, to disambiguate if multiple nodes have the same name.",
                      "type": "string",
                      "maxLength": 50
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DataWithCursorAsset": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of asset. Often referred to as tag."
                    },
                    "parentId": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of asset."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "The source of this asset"
                    }
                  },
                  "description": "Representation of a physical asset, e.g plant or piece of equipment"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "path": {
                      "type": "array",
                      "description": "IDs of assets on the path to the asset.",
                      "items": {
                        "type": "integer",
                        "description": "IDs of assets on the path to the asset.",
                        "format": "int64"
                      }
                    },
                    "depth": {
                      "type": "integer",
                      "description": "Asset path depth (number of levels below root node).",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "AssetFilter": {
        "description": "Filter on assets with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of asset. Often referred to as tag."
              },
              "parentIds": {
                "type": "array",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "description": "The source of this asset"
              },
              "createdTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "assetSubtrees": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "externalIdPrefix": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          },
          "limit": {
            "description": "<- TODO",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "AssetSearchFilter": {
        "description": "Filter on events fillter with exact match",
        "allOf": [
          {
            "description": "Filter on assets with exact match",
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of asset. Often referred to as tag."
                  },
                  "parentIds": {
                    "type": "array",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "source": {
                    "type": "string",
                    "description": "The source of this asset"
                  },
                  "createdTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "assetSubtrees": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "externalIdPrefix": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              },
              "limit": {
                "description": "<- TODO",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "search": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of asset. Often referred to as tag."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of asset."
                  }
                }
              }
            }
          }
        ]
      },
      "AssetChange": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "name": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        },
                        "description": "Non removable string change.",
                        "required": [
                          "set"
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Array of keys of key-value pairs to remove.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "name": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        },
                        "description": "Non removable string change.",
                        "required": [
                          "set"
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Array of keys of key-value pairs to remove.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "AssetChangeById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "description": "Non removable string change.",
                    "required": [
                      "set"
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Array of keys of key-value pairs to remove.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "AssetChangeByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "description": "Non removable string change.",
                    "required": [
                      "set"
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Array of keys of key-value pairs to remove.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "AssetPatch": {
        "type": "object",
        "description": "Changes will be applied to event.",
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "name": {
                "type": "object",
                "properties": {
                  "set": {
                    "type": "string"
                  }
                },
                "description": "Non removable string change.",
                "required": [
                  "set"
                ]
              },
              "description": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "metadata": {
                "type": "object",
                "description": "Object change",
                "properties": {
                  "add": {
                    "uniqueItems": true,
                    "type": "object",
                    "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "key1": "value1",
                      "key2": "value2"
                    }
                  },
                  "remove": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "Array of keys of key-value pairs to remove.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "set": {
                    "uniqueItems": true,
                    "type": "object",
                    "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "key1": "value1",
                      "key2": "value2"
                    }
                  }
                }
              },
              "source": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              }
            }
          }
        }
      },
      "SetObjectField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "object"
          }
        }
      },
      "SetLongField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SetStringField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string"
          }
        }
      },
      "RemoveField": {
        "type": "object",
        "properties": {
          "setNull": {
            "type": "boolean"
          }
        }
      },
      "SinglePatch": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "set": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "setNull": {
                "type": "boolean"
              }
            }
          }
        ],
        "description": "Object change"
      },
      "SinglePatchLong": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "set": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "setNull": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SinglePatchString": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "set": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "setNull": {
                "type": "boolean"
              }
            }
          }
        ],
        "description": "Removable string change."
      },
      "SinglePatchRequiredString": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string"
          }
        },
        "description": "Non removable string change.",
        "required": [
          "set"
        ]
      },
      "ArrayPatchLong": {
        "type": "object",
        "description": "array of objects change",
        "properties": {
          "add": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "remove": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "set": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ObjectPatch": {
        "type": "object",
        "description": "Object change",
        "properties": {
          "add": {
            "uniqueItems": true,
            "type": "object",
            "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          },
          "remove": {
            "uniqueItems": true,
            "type": "array",
            "description": "Array of keys of key-value pairs to remove.",
            "items": {
              "type": "string"
            }
          },
          "set": {
            "uniqueItems": true,
            "type": "object",
            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          }
        }
      },
      "EventInternalId": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "EventExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "DataEvent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "startTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Customizable extra data about the event. String key -> String value."
                    },
                    "assetIds": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 100,
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipments that this event relates to.",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DataExternalEvent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalId": {
                  "description": "External Id provided by client. Should be unique within the project.",
                  "type": "string",
                  "maxLength": 255
                },
                "startTime": {
                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "endTime": {
                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "description": {
                  "maxLength": 500,
                  "type": "string",
                  "description": "Textual description of the event."
                },
                "metadata": {
                  "type": "object",
                  "description": "Customizable extra data about the event. String key -> String value."
                },
                "assetIds": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 100,
                  "uniqueItems": true,
                  "description": "Asset IDs of related equipments that this event relates to.",
                  "items": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                },
                "source": {
                  "maxLength": 128,
                  "type": "string",
                  "description": "The source of this event."
                }
              },
              "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
            }
          }
        }
      },
      "DataEventChange": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "startTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "endTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "properties": {
                                "add": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                },
                                "remove": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "description": "Array of keys of key-value pairs to remove.",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "set": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                }
                              }
                            },
                            "assetIds": {
                              "type": "object",
                              "description": "array of objects change",
                              "properties": {
                                "add": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  }
                                },
                                "remove": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  }
                                },
                                "set": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "startTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "endTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "properties": {
                                "add": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                },
                                "remove": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "description": "Array of keys of key-value pairs to remove.",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "set": {
                                  "uniqueItems": true,
                                  "type": "object",
                                  "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  },
                                  "example": {
                                    "key1": "value1",
                                    "key2": "value2"
                                  }
                                }
                              }
                            },
                            "assetIds": {
                              "type": "object",
                              "description": "array of objects change",
                              "properties": {
                                "add": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  }
                                },
                                "remove": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  }
                                },
                                "set": {
                                  "uniqueItems": true,
                                  "type": "array",
                                  "items": {
                                    "type": "integer",
                                    "format": "int64"
                                  }
                                }
                              }
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "EventIdEither": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "DataWithCursorEvent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "startTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Customizable extra data about the event. String key -> String value."
                    },
                    "assetIds": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 100,
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipments that this event relates to.",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "Event": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "startTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "endTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "description": {
                "maxLength": 500,
                "type": "string",
                "description": "Textual description of the event."
              },
              "metadata": {
                "type": "object",
                "description": "Customizable extra data about the event. String key -> String value."
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Asset IDs of related equipments that this event relates to.",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              }
            },
            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "lastUpdatedTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        ]
      },
      "ExternalEvent": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          },
          "startTime": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "endTime": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "description": {
            "maxLength": 500,
            "type": "string",
            "description": "Textual description of the event."
          },
          "metadata": {
            "type": "object",
            "description": "Customizable extra data about the event. String key -> String value."
          },
          "assetIds": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true,
            "description": "Asset IDs of related equipments that this event relates to.",
            "items": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of this event."
          }
        },
        "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
      },
      "EventChange": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "startTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "endTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Array of keys of key-value pairs to remove.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      "assetIds": {
                        "type": "object",
                        "description": "array of objects change",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "startTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "endTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Array of keys of key-value pairs to remove.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      "assetIds": {
                        "type": "object",
                        "description": "array of objects change",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "EventChangeById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "startTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "endTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Array of keys of key-value pairs to remove.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  "assetIds": {
                    "type": "object",
                    "description": "array of objects change",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "EventChangeByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "startTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "endTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Array of keys of key-value pairs to remove.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  "assetIds": {
                    "type": "object",
                    "description": "array of objects change",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "EventPatch": {
        "type": "object",
        "description": "Changes will be applied to event.",
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "startTime": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              "endTime": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              "description": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "metadata": {
                "type": "object",
                "description": "Object change",
                "properties": {
                  "add": {
                    "uniqueItems": true,
                    "type": "object",
                    "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "key1": "value1",
                      "key2": "value2"
                    }
                  },
                  "remove": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "Array of keys of key-value pairs to remove.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "set": {
                    "uniqueItems": true,
                    "type": "object",
                    "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "example": {
                      "key1": "value1",
                      "key2": "value2"
                    }
                  }
                }
              },
              "assetIds": {
                "type": "object",
                "description": "array of objects change",
                "properties": {
                  "add": {
                    "uniqueItems": true,
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "remove": {
                    "uniqueItems": true,
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "set": {
                    "uniqueItems": true,
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              },
              "source": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              }
            }
          }
        }
      },
      "EventFilter": {
        "description": "Filter on events fillter with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "startTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "endTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "metadata": {
                "type": "object",
                "description": "Customizable extra data about the event. String key -> String value."
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Asset IDs of related equipments that this event relates to.",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "assetSubtrees": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              },
              "createdTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "externalIdPrefix": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          },
          "limit": {
            "description": "<- TODO",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "EventSearchFilter": {
        "description": "Filter on events fillter with exact match",
        "allOf": [
          {
            "description": "Filter on events fillter with exact match",
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "properties": {
                  "startTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "endTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Customizable extra data about the event. String key -> String value."
                  },
                  "assetIds": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Asset IDs of related equipments that this event relates to.",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "assetSubtrees": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "source": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "The source of this event."
                  },
                  "createdTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "externalIdPrefix": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              },
              "limit": {
                "description": "<- TODO",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "search": {
                "type": "object",
                "properties": {
                  "description": {
                    "maxLength": 500,
                    "type": "string",
                    "description": "Textual description of the event."
                  }
                }
              }
            }
          }
        ]
      },
      "FileInternalId": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "FileExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "FileIdEither": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "ExternalResumableFlag": {
        "type": "object",
        "properties": {
          "resumable": {
            "type": "boolean"
          }
        }
      },
      "ExternalFilesMetadata": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          },
          "name": {
            "maxLength": 256,
            "type": "string"
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of the file."
          },
          "mimeType": {
            "maxLength": 64,
            "type": "string",
            "description": "File type. E.g. pdf, css, spreadsheet, .."
          },
          "metadata": {
            "type": "object",
            "description": "Customizable extra data about the file. String key -> String value."
          },
          "assetIds": {
            "type": "array",
            "items": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "maxItems": 100,
            "minItems": 1
          }
        }
      },
      "FilesMetadata": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "name": {
                "maxLength": 256,
                "type": "string"
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of the file."
              },
              "mimeType": {
                "maxLength": 64,
                "type": "string",
                "description": "File type. E.g. pdf, css, spreadsheet, .."
              },
              "metadata": {
                "type": "object",
                "description": "Customizable extra data about the file. String key -> String value."
              },
              "assetIds": {
                "type": "array",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "maxItems": 100,
                "minItems": 1
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "uploaded": {
                "type": "boolean",
                "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
              },
              "uploadedAt": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "createdTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "lastUpdatedTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        ]
      },
      "FilesSearchFilter": {
        "description": "Filter on files  with exact match",
        "allOf": [
          {
            "description": "Filter on files with exact match",
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "object",
                    "description": "Customizable extra data about the event. String key -> String value."
                  },
                  "assetIds": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Asset IDs of related equipments that this event relates to.",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "source": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "The source of this event."
                  },
                  "createdTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "externalIdPrefix": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              },
              "limit": {
                "description": "<- TODO",
                "type": "integer",
                "format": "int32",
                "minimum": 100,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "search": {
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 256,
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "DataFileChange": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID given by the API to the file.",
                  "format": "int64"
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "string"
                    }
                  },
                  "description": "Non removable string change.",
                  "required": [
                    "set"
                  ]
                },
                "mimeType": {
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "set": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "setNull": {
                          "type": "boolean"
                        }
                      }
                    }
                  ],
                  "description": "Removable string change."
                },
                "source": {
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "set": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "setNull": {
                          "type": "boolean"
                        }
                      }
                    }
                  ],
                  "description": "Removable string change."
                },
                "metadata": {
                  "type": "object",
                  "description": "Object change",
                  "properties": {
                    "add": {
                      "uniqueItems": true,
                      "type": "object",
                      "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "example": {
                        "key1": "value1",
                        "key2": "value2"
                      }
                    },
                    "remove": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Array of keys of key-value pairs to remove.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "set": {
                      "uniqueItems": true,
                      "type": "object",
                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "example": {
                        "key1": "value1",
                        "key2": "value2"
                      }
                    }
                  }
                },
                "assetIds": {
                  "type": "object",
                  "description": "array of objects change",
                  "properties": {
                    "add": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64"
                      }
                    },
                    "remove": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64"
                      }
                    },
                    "set": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                },
                "externalId": {
                  "type": "object",
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "set": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "setNull": {
                          "type": "boolean"
                        }
                      }
                    }
                  ],
                  "description": "Removable string change."
                }
              },
              "description": "Changes will be applied to file."
            }
          }
        }
      },
      "DataFileMetadata": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "maxLength": 256,
                      "type": "string"
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "File type. E.g. pdf, css, spreadsheet, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Customizable extra data about the file. String key -> String value."
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                    },
                    "uploadedAt": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "FileLink": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string"
          }
        }
      },
      "DataExternalFileMetadata": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalId": {
                  "description": "External Id provided by client. Should be unique within the project.",
                  "type": "string",
                  "maxLength": 255
                },
                "name": {
                  "maxLength": 256,
                  "type": "string"
                },
                "source": {
                  "maxLength": 128,
                  "type": "string",
                  "description": "The source of the file."
                },
                "mimeType": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "File type. E.g. pdf, css, spreadsheet, .."
                },
                "metadata": {
                  "type": "object",
                  "description": "Customizable extra data about the file. String key -> String value."
                },
                "assetIds": {
                  "type": "array",
                  "items": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  },
                  "maxItems": 100,
                  "minItems": 1
                }
              }
            }
          }
        }
      },
      "FileChange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID given by the API to the file.",
            "format": "int64"
          },
          "name": {
            "type": "object",
            "properties": {
              "set": {
                "type": "string"
              }
            },
            "description": "Non removable string change.",
            "required": [
              "set"
            ]
          },
          "mimeType": {
            "type": "object",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "set": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "setNull": {
                    "type": "boolean"
                  }
                }
              }
            ],
            "description": "Removable string change."
          },
          "source": {
            "type": "object",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "set": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "setNull": {
                    "type": "boolean"
                  }
                }
              }
            ],
            "description": "Removable string change."
          },
          "metadata": {
            "type": "object",
            "description": "Object change",
            "properties": {
              "add": {
                "uniqueItems": true,
                "type": "object",
                "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                }
              },
              "remove": {
                "uniqueItems": true,
                "type": "array",
                "description": "Array of keys of key-value pairs to remove.",
                "items": {
                  "type": "string"
                }
              },
              "set": {
                "uniqueItems": true,
                "type": "object",
                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                }
              }
            }
          },
          "assetIds": {
            "type": "object",
            "description": "array of objects change",
            "properties": {
              "add": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "remove": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "set": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "externalId": {
            "type": "object",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "set": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "setNull": {
                    "type": "boolean"
                  }
                }
              }
            ],
            "description": "Removable string change."
          }
        },
        "description": "Changes will be applied to file."
      },
      "DataWithCursor": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "maxLength": 256,
                      "type": "string"
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "File type. E.g. pdf, css, spreadsheet, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Customizable extra data about the file. String key -> String value."
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                    },
                    "uploadedAt": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of results"
      },
      "FileFilter": {
        "description": "Filter on files with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "metadata": {
                "type": "object",
                "description": "Customizable extra data about the event. String key -> String value."
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Asset IDs of related equipments that this event relates to.",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              },
              "createdTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "externalIdPrefix": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          },
          "limit": {
            "description": "<- TODO",
            "type": "integer",
            "format": "int32",
            "minimum": 100,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "extra": {
                "type": "object",
                "description": "Additional data"
              }
            }
          }
        }
      },
      "TimeSeriesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Generated id of the time series",
                      "format": "int64"
                    },
                    "externalId": {
                      "type": "string",
                      "description": "Externaly supplied id of the time series"
                    },
                    "name": {
                      "type": "string",
                      "description": "Unique name of time series"
                    },
                    "isString": {
                      "type": "boolean",
                      "description": "Whether the time series is string valued or not."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Additional metadata. String key -> String value."
                    },
                    "unit": {
                      "type": "string",
                      "description": "The physical unit of the time series."
                    },
                    "assetId": {
                      "type": "integer",
                      "description": "Asset that this time series belongs to.",
                      "format": "int64"
                    },
                    "isStep": {
                      "type": "boolean",
                      "description": "Whether the time series is a step series or not."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the time series."
                    },
                    "securityCategories": {
                      "type": "array",
                      "description": "Security categories required in order to access this time series.",
                      "items": {
                        "type": "integer",
                        "description": "Security categories required in order to access this time series.",
                        "format": "int64"
                      }
                    },
                    "createdTime": {
                      "type": "integer",
                      "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "type": "integer",
                      "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DatapointsInsertQuery": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "datapoints"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Id of the timeseries to post the datapoints to",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "External id of the timeseries to post the datapoints to (Only if id is not set)"
                },
                "datapoints": {
                  "type": "array",
                  "description": "The list of datapoints",
                  "items": {
                    "required": [
                      "timestamp",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "integer",
                        "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                        "format": "int64"
                      },
                      "value": {
                        "description": "The data value. Can be String or numeric depending on the metric",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EmptyResponse": {
        "type": "object"
      },
      "DatapointsMultiQuery": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Id of the timeseries to query",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "External id of the timeseries to query (Only if id is not set)"
                },
                "start": {
                  "type": "string",
                  "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch."
                },
                "end": {
                  "type": "string",
                  "description": "Get datapoints up to this time. The format is the same as for start."
                },
                "limit": {
                  "type": "integer",
                  "description": "Return up to this number of datapoints.",
                  "format": "int32"
                },
                "aggregates": {
                  "type": "array",
                  "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                  "items": {
                    "type": "string",
                    "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates."
                  }
                },
                "granularity": {
                  "type": "string",
                  "description": "The granularity size and granularity of the aggregates."
                },
                "includeOutsidePoints": {
                  "type": "boolean",
                  "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                  "default": false
                },
                "aliases": {
                  "type": "array",
                  "items": {
                    "required": [
                      "id",
                      "alias"
                    ],
                    "type": "object",
                    "description": "Input alias for the function query",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The id of the timeseries that this alias references"
                      },
                      "alias": {
                        "type": "string",
                        "description": "The string value that is referenced in the function expression"
                      },
                      "aggregate": {
                        "type": "string",
                        "description": "The aggregate to fetch for this alias, empty means fetch non-aggregated data. Aggregate values will be interpolated for periods with no ground data. There are known inaccuracies in how the average value is interpolated."
                      },
                      "granularity": {
                        "type": "string",
                        "description": "The granularity of the aggregates, only relevant if property 'aggregate' is specified"
                      }
                    }
                  }
                }
              },
              "description": "Parameters describing a query for datapoints."
            }
          },
          "start": {
            "type": "string",
            "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Default '0'."
          },
          "end": {
            "type": "string",
            "description": "Get datapoints up to this time. Same format as for start. Default 'now'."
          },
          "limit": {
            "type": "integer",
            "description": "Return up to this number of datapoints. Default 100.",
            "format": "int32"
          },
          "aggregates": {
            "type": "array",
            "description": "The aggregates to be applied. If both this field and the a query item aggregate field is left blank, un-aggregated data will be returned for that query.",
            "items": {
              "type": "string",
              "description": "The aggregates to be applied. If both this field and the a query item aggregate field is left blank, un-aggregated data will be returned for that query."
            }
          },
          "granularity": {
            "type": "string",
            "description": "The time granularity size and unit to aggregate over. For example '1h' for one hour."
          },
          "includeOutsidePoints": {
            "type": "boolean",
            "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
            "default": false
          }
        },
        "description": "Parameters describing a query for multiple datapoints. If fields in individual datapoint query items are omitted, values from the multiquery are used instead. For example, you can provide a default limit for all items (that do not have a limit set) by setting the limit field in the multiquery."
      },
      "DatapointsPostDatapoint": {
        "required": [
          "datapoints"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the timeseries to post the datapoints to",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "External id of the timeseries to post the datapoints to (Only if id is not set)"
          },
          "datapoints": {
            "type": "array",
            "description": "The list of datapoints",
            "items": {
              "required": [
                "timestamp",
                "value"
              ],
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "integer",
                  "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                  "format": "int64"
                },
                "value": {
                  "description": "The data value. Can be String or numeric depending on the metric",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "DatapointsQuery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the timeseries to query",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "External id of the timeseries to query (Only if id is not set)"
          },
          "start": {
            "type": "string",
            "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch."
          },
          "end": {
            "type": "string",
            "description": "Get datapoints up to this time. The format is the same as for start."
          },
          "limit": {
            "type": "integer",
            "description": "Return up to this number of datapoints.",
            "format": "int32"
          },
          "aggregates": {
            "type": "array",
            "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
            "items": {
              "type": "string",
              "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates."
            }
          },
          "granularity": {
            "type": "string",
            "description": "The granularity size and granularity of the aggregates."
          },
          "includeOutsidePoints": {
            "type": "boolean",
            "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
            "default": false
          },
          "aliases": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "alias"
              ],
              "type": "object",
              "description": "Input alias for the function query",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The id of the timeseries that this alias references"
                },
                "alias": {
                  "type": "string",
                  "description": "The string value that is referenced in the function expression"
                },
                "aggregate": {
                  "type": "string",
                  "description": "The aggregate to fetch for this alias, empty means fetch non-aggregated data. Aggregate values will be interpolated for periods with no ground data. There are known inaccuracies in how the average value is interpolated."
                },
                "granularity": {
                  "type": "string",
                  "description": "The granularity of the aggregates, only relevant if property 'aggregate' is specified"
                }
              }
            }
          }
        },
        "description": "Parameters describing a query for datapoints."
      },
      "FunctionInputAlias": {
        "required": [
          "id",
          "alias"
        ],
        "type": "object",
        "description": "Input alias for the function query",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The id of the timeseries that this alias references"
          },
          "alias": {
            "type": "string",
            "description": "The string value that is referenced in the function expression"
          },
          "aggregate": {
            "type": "string",
            "description": "The aggregate to fetch for this alias, empty means fetch non-aggregated data. Aggregate values will be interpolated for periods with no ground data. There are known inaccuracies in how the average value is interpolated."
          },
          "granularity": {
            "type": "string",
            "description": "The granularity of the aggregates, only relevant if property 'aggregate' is specified"
          }
        }
      },
      "LatestDataBeforeRequest": {
        "type": "object",
        "description": "Describes the latest query. One and only one of id and externalId must be set.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the timeseries to get the latest value for",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "External id of the timeseries to get the latest value for (Only if id is not set)"
          },
          "before": {
            "type": "string",
            "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
            "default": "now"
          }
        }
      },
      "DatapointsLatestQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of latest queries",
            "items": {
              "type": "object",
              "description": "Describes the latest query. One and only one of id and externalId must be set.",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Id of the timeseries to get the latest value for",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "External id of the timeseries to get the latest value for (Only if id is not set)"
                },
                "before": {
                  "type": "string",
                  "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                  "default": "now"
                }
              }
            }
          }
        }
      },
      "DatapointsDeleteRequest": {
        "type": "object",
        "required": [
          "inclusiveBegin"
        ],
        "description": "Describes the latest query. One and only one of id and externalId must be set.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the timeseries to get the latest value for",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "External id of the timeseries to get the latest value for (Only if id is not set)"
          },
          "inclusiveBegin": {
            "type": "integer",
            "description": "The first datapoint to delete",
            "format": "int64"
          },
          "exclusiveEnd": {
            "type": "integer",
            "description": "If set, the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
            "format": "int64"
          }
        }
      },
      "DatapointsDeleteQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of deletes",
            "items": {
              "type": "object",
              "required": [
                "inclusiveBegin"
              ],
              "description": "Describes the latest query. One and only one of id and externalId must be set.",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Id of the timeseries to get the latest value for",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "External id of the timeseries to get the latest value for (Only if id is not set)"
                },
                "inclusiveBegin": {
                  "type": "integer",
                  "description": "The first datapoint to delete",
                  "format": "int64"
                },
                "exclusiveEnd": {
                  "type": "integer",
                  "description": "If set, the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "IdLookup": {
        "type": "object",
        "description": "Object is required to provide only one from two available attributes (one or another). Id field maps to server side ID while externalId to user set identifier.",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "externalId": {
            "type": "string"
          }
        }
      },
      "DataLookupByIdDTO": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of ID objects",
            "items": {
              "type": "object",
              "description": "Object is required to provide only one from two available attributes (one or another). Id field maps to server side ID while externalId to user set identifier.",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "TimeSeriesUpdateRequest": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string"
                },
                "externalIdChange": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "string"
                    },
                    "setNull": {
                      "type": "boolean"
                    }
                  },
                  "description": "Change that will be applied to description."
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "string"
                    },
                    "setNull": {
                      "type": "boolean"
                    }
                  },
                  "description": "Change that will be applied to description."
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "object"
                    },
                    "setNull": {
                      "type": "boolean"
                    }
                  },
                  "description": "Change that will be applied to metadata. String key -> String value."
                },
                "unit": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "string"
                    },
                    "setNull": {
                      "type": "boolean"
                    }
                  },
                  "description": "Change that will be applied to description."
                },
                "assetId": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "setNull": {
                      "type": "boolean"
                    }
                  },
                  "description": "Change that will be applied to assetId."
                },
                "description": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "string"
                    },
                    "setNull": {
                      "type": "boolean"
                    }
                  },
                  "description": "Change that will be applied to description."
                },
                "securityCategories": {
                  "type": "object",
                  "description": "array of objects change",
                  "properties": {
                    "add": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64"
                      }
                    },
                    "remove": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64"
                      }
                    },
                    "set": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  }
                }
              },
              "description": "Changes will be applied to time series."
            }
          }
        }
      },
      "TimeSeriesCursorResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "required": [
                    "name"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Generated id of the time series",
                      "format": "int64"
                    },
                    "externalId": {
                      "type": "string",
                      "description": "Externaly supplied id of the time series"
                    },
                    "name": {
                      "type": "string",
                      "description": "Unique name of time series"
                    },
                    "isString": {
                      "type": "boolean",
                      "description": "Whether the time series is string valued or not."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Additional metadata. String key -> String value."
                    },
                    "unit": {
                      "type": "string",
                      "description": "The physical unit of the time series."
                    },
                    "assetId": {
                      "type": "integer",
                      "description": "Asset that this time series belongs to.",
                      "format": "int64"
                    },
                    "isStep": {
                      "type": "boolean",
                      "description": "Whether the time series is a step series or not."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the time series."
                    },
                    "securityCategories": {
                      "type": "array",
                      "description": "Security categories required in order to access this time series.",
                      "items": {
                        "type": "integer",
                        "description": "Security categories required in order to access this time series.",
                        "format": "int64"
                      }
                    },
                    "createdTime": {
                      "type": "integer",
                      "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "type": "integer",
                      "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                      "format": "int64"
                    }
                  }
                }
              },
              "previousCursor": {
                "type": "string",
                "description": "Cursor to get the previous page of results (if available)."
              },
              "nextCursor": {
                "type": "string",
                "description": "Cursor to get the next page of results (if available)."
              }
            },
            "description": "A list of objects along with possible cursors to get the next, or previous, page of result"
          }
        }
      },
      "TimeSeriesCreateRequest": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "Externaly provided id for the time series (optional but recomended)"
                },
                "name": {
                  "type": "string",
                  "description": "Human readable name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "type": "integer",
                  "description": "Asset that this time series belongs to.",
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "MissingFieldError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "extra": {
            "type": "object",
            "description": "Additional data"
          },
          "missingFields": {
            "uniqueItems": true,
            "type": "array",
            "description": "Fields that are missing.",
            "items": {
              "type": "object",
              "description": "Fields that are missing"
            }
          }
        }
      },
      "StringOrLong": {
        "oneOf": [
          {
            "type": "integer",
            "format": "int64"
          },
          {
            "type": "string"
          }
        ]
      },
      "ResourceNotFoundResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "extra": {
            "type": "object",
            "description": "Additional data"
          },
          "notFound": {
            "uniqueItems": true,
            "type": "array",
            "description": "Items which are not  found",
            "items": {
              "description": "Ids or ExternalIds which are not found",
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        }
      },
      "DataGetTimeSeriesMetadataDTO": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Generated id of the time series",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "Externaly supplied id of the time series"
                },
                "name": {
                  "type": "string",
                  "description": "Unique name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "type": "integer",
                  "description": "Asset that this time series belongs to.",
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "type": "integer",
                  "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "type": "integer",
                  "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "PostDatapoint": {
        "required": [
          "timestamp",
          "value"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
            "format": "int64"
          },
          "value": {
            "description": "The data value. Can be String or numeric depending on the metric",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "DataDatapointsGetDatapoint": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "datapoints"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Id of the timeseries the datapoints belong to",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "External id of the timeseries the datapoints belong to (Only if id is not set)"
                },
                "datapoints": {
                  "type": "array",
                  "description": "The list of datapoints",
                  "items": {
                    "required": [
                      "timestamp",
                      "value"
                    ],
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "integer",
                        "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                        "format": "int64"
                      },
                      "value": {
                        "description": "The data value. Can be String or numeric depending on the metric",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "average": {
                        "type": "number",
                        "description": "The integral average value in the aggregate period",
                        "format": "double"
                      },
                      "max": {
                        "type": "number",
                        "description": "The maximum value in the aggregate period",
                        "format": "double"
                      },
                      "min": {
                        "type": "number",
                        "description": "The minimum value in the aggregate period",
                        "format": "double"
                      },
                      "count": {
                        "type": "integer",
                        "description": "The number of datapoints in the aggregate period",
                        "format": "int32"
                      },
                      "sum": {
                        "type": "number",
                        "description": "The sum of the datapoints in the aggregate period",
                        "format": "double"
                      },
                      "interpolation": {
                        "type": "number",
                        "description": "The interpolated value of the series in the beginning of the aggregate",
                        "format": "double"
                      },
                      "stepInterpolation": {
                        "type": "number",
                        "description": "The last value before or at the beginning of the aggregate.",
                        "format": "double"
                      },
                      "continuousVariance": {
                        "type": "number",
                        "description": "The variance of the interpolated underlying function.",
                        "format": "double"
                      },
                      "discreteVariance": {
                        "type": "number",
                        "description": "The variance of the datapoint values.",
                        "format": "double"
                      },
                      "totalVariation": {
                        "type": "number",
                        "description": "The total variation of the interpolated underlying function.",
                        "format": "double"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TimeSeriesChange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "externalId": {
            "type": "string"
          },
          "externalIdChange": {
            "type": "object",
            "properties": {
              "set": {
                "type": "string"
              },
              "setNull": {
                "type": "boolean"
              }
            },
            "description": "Change that will be applied to description."
          },
          "name": {
            "type": "object",
            "properties": {
              "set": {
                "type": "string"
              },
              "setNull": {
                "type": "boolean"
              }
            },
            "description": "Change that will be applied to description."
          },
          "metadata": {
            "type": "object",
            "properties": {
              "set": {
                "type": "object"
              },
              "setNull": {
                "type": "boolean"
              }
            },
            "description": "Change that will be applied to metadata. String key -> String value."
          },
          "unit": {
            "type": "object",
            "properties": {
              "set": {
                "type": "string"
              },
              "setNull": {
                "type": "boolean"
              }
            },
            "description": "Change that will be applied to description."
          },
          "assetId": {
            "type": "object",
            "properties": {
              "set": {
                "type": "integer",
                "format": "int64"
              },
              "setNull": {
                "type": "boolean"
              }
            },
            "description": "Change that will be applied to assetId."
          },
          "description": {
            "type": "object",
            "properties": {
              "set": {
                "type": "string"
              },
              "setNull": {
                "type": "boolean"
              }
            },
            "description": "Change that will be applied to description."
          },
          "securityCategories": {
            "type": "object",
            "description": "array of objects change",
            "properties": {
              "add": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "remove": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "set": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "description": "Changes will be applied to time series."
      },
      "DataWithCursorGetTimeSeriesMetadataDTO": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Generated id of the time series",
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "Externaly supplied id of the time series"
                },
                "name": {
                  "type": "string",
                  "description": "Unique name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "type": "integer",
                  "description": "Asset that this time series belongs to.",
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "type": "integer",
                  "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "type": "integer",
                  "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                  "format": "int64"
                }
              }
            }
          },
          "previousCursor": {
            "type": "string",
            "description": "Cursor to get the previous page of results (if available)."
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of result"
      },
      "PostTimeSeriesMetadataDTO": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "Externaly provided id for the time series (optional but recomended)"
          },
          "name": {
            "type": "string",
            "description": "Human readable name of time series"
          },
          "isString": {
            "type": "boolean",
            "description": "Whether the time series is string valued or not."
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata. String key -> String value."
          },
          "unit": {
            "type": "string",
            "description": "The physical unit of the time series."
          },
          "assetId": {
            "type": "integer",
            "description": "Asset that this time series belongs to.",
            "format": "int64"
          },
          "isStep": {
            "type": "boolean",
            "description": "Whether the time series is a step series or not."
          },
          "description": {
            "type": "string",
            "description": "Description of the time series."
          },
          "securityCategories": {
            "type": "array",
            "description": "Security categories required in order to access this time series.",
            "items": {
              "type": "integer",
              "description": "Security categories required in order to access this time series.",
              "format": "int64"
            }
          }
        }
      },
      "StringOrNumber": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "GetDatapoint": {
        "required": [
          "timestamp",
          "value"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
            "format": "int64"
          },
          "value": {
            "description": "The data value. Can be String or numeric depending on the metric",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          },
          "average": {
            "type": "number",
            "description": "The integral average value in the aggregate period",
            "format": "double"
          },
          "max": {
            "type": "number",
            "description": "The maximum value in the aggregate period",
            "format": "double"
          },
          "min": {
            "type": "number",
            "description": "The minimum value in the aggregate period",
            "format": "double"
          },
          "count": {
            "type": "integer",
            "description": "The number of datapoints in the aggregate period",
            "format": "int32"
          },
          "sum": {
            "type": "number",
            "description": "The sum of the datapoints in the aggregate period",
            "format": "double"
          },
          "interpolation": {
            "type": "number",
            "description": "The interpolated value of the series in the beginning of the aggregate",
            "format": "double"
          },
          "stepInterpolation": {
            "type": "number",
            "description": "The last value before or at the beginning of the aggregate.",
            "format": "double"
          },
          "continuousVariance": {
            "type": "number",
            "description": "The variance of the interpolated underlying function.",
            "format": "double"
          },
          "discreteVariance": {
            "type": "number",
            "description": "The variance of the datapoint values.",
            "format": "double"
          },
          "totalVariation": {
            "type": "number",
            "description": "The total variation of the interpolated underlying function.",
            "format": "double"
          }
        }
      },
      "GetTimeSeriesMetadataDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Generated id of the time series",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "Externaly supplied id of the time series"
          },
          "name": {
            "type": "string",
            "description": "Unique name of time series"
          },
          "isString": {
            "type": "boolean",
            "description": "Whether the time series is string valued or not."
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata. String key -> String value."
          },
          "unit": {
            "type": "string",
            "description": "The physical unit of the time series."
          },
          "assetId": {
            "type": "integer",
            "description": "Asset that this time series belongs to.",
            "format": "int64"
          },
          "isStep": {
            "type": "boolean",
            "description": "Whether the time series is a step series or not."
          },
          "description": {
            "type": "string",
            "description": "Description of the time series."
          },
          "securityCategories": {
            "type": "array",
            "description": "Security categories required in order to access this time series.",
            "items": {
              "type": "integer",
              "description": "Security categories required in order to access this time series.",
              "format": "int64"
            }
          },
          "createdTime": {
            "type": "integer",
            "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
            "format": "int64"
          },
          "lastUpdatedTime": {
            "type": "integer",
            "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
            "format": "int64"
          }
        }
      },
      "DatapointsGetDatapoint": {
        "required": [
          "datapoints"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the timeseries the datapoints belong to",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "External id of the timeseries the datapoints belong to (Only if id is not set)"
          },
          "datapoints": {
            "type": "array",
            "description": "The list of datapoints",
            "items": {
              "required": [
                "timestamp",
                "value"
              ],
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "integer",
                  "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                  "format": "int64"
                },
                "value": {
                  "description": "The data value. Can be String or numeric depending on the metric",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "average": {
                  "type": "number",
                  "description": "The integral average value in the aggregate period",
                  "format": "double"
                },
                "max": {
                  "type": "number",
                  "description": "The maximum value in the aggregate period",
                  "format": "double"
                },
                "min": {
                  "type": "number",
                  "description": "The minimum value in the aggregate period",
                  "format": "double"
                },
                "count": {
                  "type": "integer",
                  "description": "The number of datapoints in the aggregate period",
                  "format": "int32"
                },
                "sum": {
                  "type": "number",
                  "description": "The sum of the datapoints in the aggregate period",
                  "format": "double"
                },
                "interpolation": {
                  "type": "number",
                  "description": "The interpolated value of the series in the beginning of the aggregate",
                  "format": "double"
                },
                "stepInterpolation": {
                  "type": "number",
                  "description": "The last value before or at the beginning of the aggregate.",
                  "format": "double"
                },
                "continuousVariance": {
                  "type": "number",
                  "description": "The variance of the interpolated underlying function.",
                  "format": "double"
                },
                "discreteVariance": {
                  "type": "number",
                  "description": "The variance of the datapoint values.",
                  "format": "double"
                },
                "totalVariation": {
                  "type": "number",
                  "description": "The total variation of the interpolated underlying function.",
                  "format": "double"
                }
              }
            }
          }
        }
      },
      "DatapointsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "required": [
                    "datapoints"
                  ],
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Id of the timeseries the datapoints belong to",
                      "format": "int64"
                    },
                    "externalId": {
                      "type": "string",
                      "description": "External id of the timeseries the datapoints belong to (Only if id is not set)"
                    },
                    "datapoints": {
                      "type": "array",
                      "description": "The list of datapoints",
                      "items": {
                        "required": [
                          "timestamp",
                          "value"
                        ],
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "integer",
                            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                            "format": "int64"
                          },
                          "value": {
                            "description": "The data value. Can be String or numeric depending on the metric",
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "average": {
                            "type": "number",
                            "description": "The integral average value in the aggregate period",
                            "format": "double"
                          },
                          "max": {
                            "type": "number",
                            "description": "The maximum value in the aggregate period",
                            "format": "double"
                          },
                          "min": {
                            "type": "number",
                            "description": "The minimum value in the aggregate period",
                            "format": "double"
                          },
                          "count": {
                            "type": "integer",
                            "description": "The number of datapoints in the aggregate period",
                            "format": "int32"
                          },
                          "sum": {
                            "type": "number",
                            "description": "The sum of the datapoints in the aggregate period",
                            "format": "double"
                          },
                          "interpolation": {
                            "type": "number",
                            "description": "The interpolated value of the series in the beginning of the aggregate",
                            "format": "double"
                          },
                          "stepInterpolation": {
                            "type": "number",
                            "description": "The last value before or at the beginning of the aggregate.",
                            "format": "double"
                          },
                          "continuousVariance": {
                            "type": "number",
                            "description": "The variance of the interpolated underlying function.",
                            "format": "double"
                          },
                          "discreteVariance": {
                            "type": "number",
                            "description": "The variance of the datapoint values.",
                            "format": "double"
                          },
                          "totalVariation": {
                            "type": "number",
                            "description": "The total variation of the interpolated underlying function.",
                            "format": "double"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ValueRange": {
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "format": "int64"
          },
          "max": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "unit": {
            "description": "Filter on unit (case-sensitive).",
            "type": "string"
          },
          "isString": {
            "description": "Filter on isString.",
            "type": "boolean"
          },
          "isStep": {
            "description": "Filter on isStep.",
            "type": "boolean"
          },
          "metadata": {
            "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
            "type": "object"
          },
          "assetIds": {
            "type": "array",
            "description": "Filter out time series that are not linked to any of these assets.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "assetSubtrees": {
            "type": "array",
            "description": "Filter out time series that are not linked to assets in the subtree rooted at these assets. Format is [12,345,6,7890].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "createdTime": {
            "description": "Filter out time series with createdTime before this. Format is milliseconds since epoch.",
            "type": "object",
            "properties": {
              "min": {
                "type": "integer",
                "format": "int64"
              },
              "max": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "lastUpdatedTime": {
            "description": "Filter out time series with lastUpdatedTime before this. Format is milliseconds since epoch.",
            "type": "object",
            "properties": {
              "min": {
                "type": "integer",
                "format": "int64"
              },
              "max": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      },
      "Search": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Prefix and fuzzy search on name.",
            "type": "string"
          },
          "description": {
            "description": "Prefix and fuzzy search on description.",
            "type": "string"
          },
          "query": {
            "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
            "type": "string"
          }
        }
      },
      "TimeSeriesSearchDTO": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filtering parameters",
            "type": "object",
            "properties": {
              "unit": {
                "description": "Filter on unit (case-sensitive).",
                "type": "string"
              },
              "isString": {
                "description": "Filter on isString.",
                "type": "boolean"
              },
              "isStep": {
                "description": "Filter on isStep.",
                "type": "boolean"
              },
              "metadata": {
                "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                "type": "object"
              },
              "assetIds": {
                "type": "array",
                "description": "Filter out time series that are not linked to any of these assets.",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "assetSubtrees": {
                "type": "array",
                "description": "Filter out time series that are not linked to assets in the subtree rooted at these assets. Format is [12,345,6,7890].",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "createdTime": {
                "description": "Filter out time series with createdTime before this. Format is milliseconds since epoch.",
                "type": "object",
                "properties": {
                  "min": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "max": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Filter out time series with lastUpdatedTime before this. Format is milliseconds since epoch.",
                "type": "object",
                "properties": {
                  "min": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "max": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "search": {
            "description": "Search parameters",
            "type": "object",
            "properties": {
              "name": {
                "description": "Prefix and fuzzy search on name.",
                "type": "string"
              },
              "description": {
                "description": "Prefix and fuzzy search on description.",
                "type": "string"
              },
              "query": {
                "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
                "type": "string"
              }
            }
          },
          "sort": {
            "description": "Field to be sorted. If not specified, results are sorted by relevance score.",
            "type": "string",
            "enum": [
              "createdTime",
              "lastUpdatedTime"
            ]
          },
          "dir": {
            "description": "Sort direction: descending or ascending. Only applicable if sort is specified. Default 'desc'.",
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "desc"
          },
          "limit": {
            "description": "Return up to this many results. Maximum is 1000. Default is 25.",
            "maximum": 1000,
            "type": "integer",
            "format": "int32",
            "default": 25
          },
          "offset": {
            "description": "Offset from the first result. Sum of limit and offset must not exceed 1000. Default is 0.",
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "boostName": {
            "description": "Whether or not boosting name field. This option is experimental and can be changed.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "NullableSinglePatch": {
        "type": "object",
        "properties": {
          "set": {
            "type": "object"
          },
          "setNull": {
            "type": "boolean"
          }
        },
        "description": "Change that will be applied to metadata. String key -> String value."
      },
      "NullableSinglePatchLong": {
        "type": "object",
        "properties": {
          "set": {
            "type": "integer",
            "format": "int64"
          },
          "setNull": {
            "type": "boolean"
          }
        },
        "description": "Change that will be applied to assetId."
      },
      "NullableSinglePatchString": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string"
          },
          "setNull": {
            "type": "boolean"
          }
        },
        "description": "Change that will be applied to description."
      }
    },
    "parameters": {
      "ProjectName": {
        "name": "project",
        "description": "Project name.",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "Offset": {
        "name": "offset",
        "description": "Offset from the first result. Sum of limit and offset must not exceed 1000.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "maximum": 1000
        }
      },
      "Limit": {
        "name": "limit",
        "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 100,
          "minimum": 1,
          "maximum": 1000
        }
      }
    },
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "description": "An admin can create API keys in the Cognite console.",
        "name": "api-key",
        "in": "header"
      },
      "token": {
        "type": "http",
        "description": "Human users log in via an OpenId/OAuth flow. Use the /login/redirect flow to obtain a bearer access token. Use a header key of 'Authorization' with a value of 'Bearer: $accesstoken'",
        "scheme": "bearer"
      }
    },
    "responses": {
      "AssetDataWithCursorResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag."
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          }
        }
      },
      "AssetDataResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag."
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EmptyResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventDataResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "startTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "endTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "description": {
                                "maxLength": 500,
                                "type": "string",
                                "description": "Textual description of the event."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Customizable extra data about the event. String key -> String value."
                              },
                              "assetIds": {
                                "type": "array",
                                "minItems": 1,
                                "maxItems": 100,
                                "uniqueItems": true,
                                "description": "Asset IDs of related equipments that this event relates to.",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of this event."
                              }
                            },
                            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EventDataWithCursorResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "startTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "endTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "description": {
                                "maxLength": 500,
                                "type": "string",
                                "description": "Textual description of the event."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Customizable extra data about the event. String key -> String value."
                              },
                              "assetIds": {
                                "type": "array",
                                "minItems": 1,
                                "maxItems": 100,
                                "uniqueItems": true,
                                "description": "Asset IDs of related equipments that this event relates to.",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of this event."
                              }
                            },
                            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          }
        }
      },
      "FileMetadataResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        },
                        "name": {
                          "maxLength": 256,
                          "type": "string"
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of the file."
                        },
                        "mimeType": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "File type. E.g. pdf, css, spreadsheet, .."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Customizable extra data about the file. String key -> String value."
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "maxItems": 100,
                          "minItems": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "uploaded": {
                          "type": "boolean",
                          "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                        },
                        "uploadedAt": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "lastUpdatedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "UploadFileMetadataResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            },
                            "name": {
                              "maxLength": 256,
                              "type": "string"
                            },
                            "source": {
                              "maxLength": 128,
                              "type": "string",
                              "description": "The source of the file."
                            },
                            "mimeType": {
                              "maxLength": 64,
                              "type": "string",
                              "description": "File type. E.g. pdf, css, spreadsheet, .."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Customizable extra data about the file. String key -> String value."
                            },
                            "assetIds": {
                              "type": "array",
                              "items": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "maxItems": 100,
                              "minItems": 1
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "uploaded": {
                              "type": "boolean",
                              "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                            },
                            "uploadedAt": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "createdTime": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "lastUpdatedTime": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "uploadUrl": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "FileMetadataWithCursorResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "maxLength": 256,
                                "type": "string"
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "File type. E.g. pdf, css, spreadsheet, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Customizable extra data about the file. String key -> String value."
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                              },
                              "uploadedAt": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of results"
                }
              }
            }
          }
        }
      },
      "FileResponse": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "maxLength": 256,
                                "type": "string"
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "File type. E.g. pdf, css, spreadsheet, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Customizable extra data about the file. String key -> String value."
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                              },
                              "uploadedAt": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DataWithLinks": {
        "description": "TODO",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "link": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/projects/{project}/assets": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create new assets",
        "description": "Create new assets.\n\nIt is possible to post a maximum of 1000 assets per request.\nThe parentId is set to null if the asset is a root asset.",
        "operationId": "createAssets",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of assets to create. It is possible to post a maximum of 1000 assets per request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of asset. Often referred to as tag."
                            },
                            "parentId": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "description": {
                              "type": "string",
                              "description": "Description of asset."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Custom, application specific metadata. String key -> String value",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "source": {
                              "type": "string",
                              "description": "The source of this asset"
                            }
                          },
                          "description": "Representation of a physical asset, e.g plant or piece of equipment"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "refId": {
                              "description": "Reference ID used only in post request to disambiguate references to duplicate names.",
                              "type": "string",
                              "maxLength": 50
                            },
                            "parentRefId": {
                              "description": "Reference ID of parent, to disambiguate if multiple nodes have the same name.",
                              "type": "string",
                              "maxLength": 50
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of asset. Often referred to as tag."
                                  },
                                  "parentId": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "Description of asset."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "source": {
                                    "type": "string",
                                    "description": "The source of this asset"
                                  }
                                },
                                "description": "Representation of a physical asset, e.g plant or piece of equipment"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "path": {
                                    "type": "array",
                                    "description": "IDs of assets on the path to the asset.",
                                    "items": {
                                      "type": "integer",
                                      "description": "IDs of assets on the path to the asset.",
                                      "format": "int64"
                                    }
                                  },
                                  "depth": {
                                    "type": "integer",
                                    "description": "Asset path depth (number of levels below root node).",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "AssetsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/list": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Filter all assets",
        "description": "Retrieve a list of all assets in the same project. This operation supports pagination by cursor. Criteria can be applied to select a subset of events.",
        "operationId": "listAssets",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "TODO",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Filter on assets with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag."
                          },
                          "parentIds": {
                            "type": "array",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of this asset"
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "assetSubtrees": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- TODO",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of asset. Often referred to as tag."
                                  },
                                  "parentId": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "Description of asset."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "source": {
                                    "type": "string",
                                    "description": "The source of this asset"
                                  }
                                },
                                "description": "Representation of a physical asset, e.g plant or piece of equipment"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "path": {
                                    "type": "array",
                                    "description": "IDs of assets on the path to the asset.",
                                    "items": {
                                      "type": "integer",
                                      "description": "IDs of assets on the path to the asset.",
                                      "format": "int64"
                                    }
                                  },
                                  "depth": {
                                    "type": "integer",
                                    "description": "Asset path depth (number of levels below root node).",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "AssetsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/byids": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieve assets",
        "description": "Retrieves information about multiple assets in the same project.\nA maximum of 1000 assets IDs may be listed per request and all of them must be unique.",
        "operationId": "byIdsAssets",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of assets to retrieve. Must be up to a maximum of 1000 events and all of them must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of asset. Often referred to as tag."
                                  },
                                  "parentId": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "Description of asset."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "source": {
                                    "type": "string",
                                    "description": "The source of this asset"
                                  }
                                },
                                "description": "Representation of a physical asset, e.g plant or piece of equipment"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "path": {
                                    "type": "array",
                                    "description": "IDs of assets on the path to the asset.",
                                    "items": {
                                      "type": "integer",
                                      "description": "IDs of assets on the path to the asset.",
                                      "format": "int64"
                                    }
                                  },
                                  "depth": {
                                    "type": "integer",
                                    "description": "Asset path depth (number of levels below root node).",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "AssetsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/update": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Update multiple assets",
        "description": "Updates multiple assets within the same project. Updating assets does not replace the existing asset hierarchy. This operation supports partial updates, meaning that fields omitted from the requests are not changed.\n\nUnder DataAssetChange -> SinglePathString, you can use 'set': 'value' to update value; use 'setNull': true to set that field to null.\n\nIt is possible to post changes to a maximum of 1000 assets per request and all of their IDs must be unique.",
        "operationId": "updateAssets",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of changes. It is possible to post changes to a maximum of 1000 assets per request and all asset IDs must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "name": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "type": "string"
                                        }
                                      },
                                      "description": "Non removable string change.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "description": "Array of keys of key-value pairs to remove.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        }
                                      }
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "name": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "type": "string"
                                        }
                                      },
                                      "description": "Non removable string change.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "description": "Array of keys of key-value pairs to remove.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        }
                                      }
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Name of asset. Often referred to as tag."
                                  },
                                  "parentId": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "type": "string",
                                    "description": "Description of asset."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "source": {
                                    "type": "string",
                                    "description": "The source of this asset"
                                  }
                                },
                                "description": "Representation of a physical asset, e.g plant or piece of equipment"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "path": {
                                    "type": "array",
                                    "description": "IDs of assets on the path to the asset.",
                                    "items": {
                                      "type": "integer",
                                      "description": "IDs of assets on the path to the asset.",
                                      "format": "int64"
                                    }
                                  },
                                  "depth": {
                                    "type": "integer",
                                    "description": "Asset path depth (number of levels below root node).",
                                    "format": "int32",
                                    "minimum": 0
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "AssetsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/search": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Search for assets",
        "description": "Retrieves a list of assets matching the given criteria. This operation does not support pagination.",
        "operationId": "searchAssets",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Search query",
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter on events fillter with exact match",
                "allOf": [
                  {
                    "description": "Filter on assets with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag."
                          },
                          "parentIds": {
                            "type": "array",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of this asset"
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "assetSubtrees": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- TODO",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of asset."
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Experimental endpoint. Search on assets.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "TODO",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "data": {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "externalId": {
                                          "description": "External Id provided by client. Should be unique within the project.",
                                          "type": "string",
                                          "maxLength": 255
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Name of asset. Often referred to as tag."
                                        },
                                        "parentId": {
                                          "description": "Javascript friendly internal ID given to the object.",
                                          "type": "integer",
                                          "minimum": 1,
                                          "maximum": 9007199254740991,
                                          "format": "int64"
                                        },
                                        "description": {
                                          "type": "string",
                                          "description": "Description of asset."
                                        },
                                        "metadata": {
                                          "type": "object",
                                          "description": "Custom, application specific metadata. String key -> String value",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        },
                                        "source": {
                                          "type": "string",
                                          "description": "The source of this asset"
                                        }
                                      },
                                      "description": "Representation of a physical asset, e.g plant or piece of equipment"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "Javascript friendly internal ID given to the object.",
                                          "type": "integer",
                                          "minimum": 1,
                                          "maximum": 9007199254740991,
                                          "format": "int64"
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "lastUpdatedTime": {
                                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                          "type": "integer",
                                          "minimum": 0,
                                          "format": "int64"
                                        },
                                        "path": {
                                          "type": "array",
                                          "description": "IDs of assets on the path to the asset.",
                                          "items": {
                                            "type": "integer",
                                            "description": "IDs of assets on the path to the asset.",
                                            "format": "int64"
                                          }
                                        },
                                        "depth": {
                                          "type": "integer",
                                          "description": "Asset path depth (number of levels below root node).",
                                          "format": "int32",
                                          "minimum": 0
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "AssetsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/delete": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete assets",
        "description": "Deletes multiple assets in the same project, along with all their descendants in the asset hierarchy.\n\nA maximum of 1000 asset IDs can be listed per delete request (not including the descendants).",
        "operationId": "deleteAssets",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of assets to delete. A maximum of 1000 asset IDs can be listed per delete request (not including the descendants).",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "AssetsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/events": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create events",
        "description": "Creates multiple event objects in the same project.\n\nResponds with a 409 (CONFLICT) if the source & sourceId already exists. It will not proceed if there is a conflict, so no events will be created in that case.\nThe JSON body will contain a field called 'duplicates', which is a list of conflicting items, where each item has an id, source and sourceId.\n\nIt is possible to post a maximum of 1000 events per request.",
        "operationId": "createEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of events to be posted. It is possible to post a maximum of 1000 events per request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        },
                        "startTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Customizable extra data about the event. String key -> String value."
                        },
                        "assetIds": {
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 100,
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipments that this event relates to.",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the event. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipments that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "EventsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/events/list": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Filter all events",
        "description": "Retrieve a list of all events in the same project. This operation supports pagination by cursor. Criteria can be applied to select a subset of events.",
        "operationId": "listEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "TODO",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Filter on events fillter with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "startTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "endTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Customizable extra data about the event. String key -> String value."
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Asset IDs of related equipments that this event relates to.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "assetSubtrees": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- TODO",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the event. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipments that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/byids": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve events",
        "description": "Retrieves information about multiple events in the same project. Events are returned in the same order as the ids listed in the query.\n\nA maximum of 1000 event IDs may be listed per request and all of them must be unique.",
        "operationId": "byIdsEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of events to retrieve. Must be up to a maximum of 1000 events and all of them must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the event. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipments that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/update": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Update multiple events",
        "description": "Updates multiple events in the same project. This operation supports partial updates; Fields omitted from queries will remain unchanged on objects.\n\nFor primitive fields (String, Long, Int), use 'set': 'value' to update value; use 'setNull': true to set that field to null.\n\nFor the Json Array field (e.g. assetIds), use 'set': [value1, value2] to update value; use 'add': [v1, v2] to add values to current list of values; use 'remove': [v1, v2] to remove these values from current list of values if exists.\n\nA maximum of 1000 events can be updated per request, and all of the event IDs must be unique.",
        "operationId": "updateEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of changes. A maximum of 1000 events can be updated per request, and all of the event IDs must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "startTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "endTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "description": "Array of keys of key-value pairs to remove.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        }
                                      }
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "description": "array of objects change",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "format": "int64"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "format": "int64"
                                          }
                                        },
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "format": "int64"
                                          }
                                        }
                                      }
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "startTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "endTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "description": "Array of keys of key-value pairs to remove.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "object",
                                          "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                          "additionalProperties": {
                                            "type": "string"
                                          },
                                          "example": {
                                            "key1": "value1",
                                            "key2": "value2"
                                          }
                                        }
                                      }
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "description": "array of objects change",
                                      "properties": {
                                        "add": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "format": "int64"
                                          }
                                        },
                                        "remove": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "format": "int64"
                                          }
                                        },
                                        "set": {
                                          "uniqueItems": true,
                                          "type": "array",
                                          "items": {
                                            "type": "integer",
                                            "format": "int64"
                                          }
                                        }
                                      }
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the event. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipments that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "EventsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/events/search": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Search within events",
        "description": "TODO",
        "operationId": "searchEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "TODO",
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter on events fillter with exact match",
                "allOf": [
                  {
                    "description": "Filter on events fillter with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "startTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "endTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Customizable extra data about the event. String key -> String value."
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Asset IDs of related equipments that this event relates to.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "assetSubtrees": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Filter out events that are not linked to assets in the subtree rooted at these assets.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- TODO",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "maxLength": 500,
                            "type": "string",
                            "description": "Textual description of the event."
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the event. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipments that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/delete": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Delete multiple events",
        "description": "Deletes events with the given ids. A maximum of 1000 events can be deleted per request.",
        "operationId": "deleteEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "EventsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/files/list": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "List all files",
        "description": "Retrieves a list of all files in a project. Criteria can be supplied to select a subset of files. This operation supports pagination with cursors.",
        "operationId": "listFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "ToDo",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Filter on files with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "metadata": {
                            "type": "object",
                            "description": "Customizable extra data about the event. String key -> String value."
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Asset IDs of related equipments that this event relates to.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- TODO",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 100,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "name": {
                                    "maxLength": 256,
                                    "type": "string"
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of the file."
                                  },
                                  "mimeType": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "File type. E.g. pdf, css, spreadsheet, .."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the file. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    },
                                    "maxItems": 100,
                                    "minItems": 1
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "uploaded": {
                                    "type": "boolean",
                                    "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                                  },
                                  "uploadedAt": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next page of results"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "FilesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/initupload": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload a file",
        "description": "Updates information about multiple files. This operation does not support partial updates.\nIt is possible to  update a maximum of 1000 files per request and all file IDs must be unique.",
        "operationId": "initFileUpload",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of file IDs and corresponding metadata. It is possible to  update a maximum of 1000 files per request and all file IDs must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "description": "External Id provided by client. Should be unique within the project.",
                        "type": "string",
                        "maxLength": 255
                      },
                      "name": {
                        "maxLength": 256,
                        "type": "string"
                      },
                      "source": {
                        "maxLength": 128,
                        "type": "string",
                        "description": "The source of the file."
                      },
                      "mimeType": {
                        "maxLength": 64,
                        "type": "string",
                        "description": "File type. E.g. pdf, css, spreadsheet, .."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Customizable extra data about the file. String key -> String value."
                      },
                      "assetIds": {
                        "type": "array",
                        "items": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "maxItems": 100,
                        "minItems": 1
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "resumable": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                },
                                "name": {
                                  "maxLength": 256,
                                  "type": "string"
                                },
                                "source": {
                                  "maxLength": 128,
                                  "type": "string",
                                  "description": "The source of the file."
                                },
                                "mimeType": {
                                  "maxLength": 64,
                                  "type": "string",
                                  "description": "File type. E.g. pdf, css, spreadsheet, .."
                                },
                                "metadata": {
                                  "type": "object",
                                  "description": "Customizable extra data about the file. String key -> String value."
                                },
                                "assetIds": {
                                  "type": "array",
                                  "items": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "uploaded": {
                                  "type": "boolean",
                                  "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                                },
                                "uploadedAt": {
                                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                },
                                "createdTime": {
                                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                },
                                "lastUpdatedTime": {
                                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "uploadUrl": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/files/byids": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve multiple files’ metadata",
        "description": "Retrieves information about multiple files in the same project. Results are returned in the same order as in the query. This operation does not return file contents.\n\nList of IDs to retrieve must be up to a maximum of 1000 and all of them must be unique. operationId: byIdsFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of files to retrieve. Must be up to a maximum of 1000 files and all IDs must be unique",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "name": {
                                    "maxLength": 256,
                                    "type": "string"
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of the file."
                                  },
                                  "mimeType": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "File type. E.g. pdf, css, spreadsheet, .."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the file. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    },
                                    "maxItems": 100,
                                    "minItems": 1
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "uploaded": {
                                    "type": "boolean",
                                    "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                                  },
                                  "uploadedAt": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "FilesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/search": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Search for files",
        "description": "Retrieves a list with information about files matching the given criteria. This operation supports limited pagination with the offset parameter, but does not support retrieving all files in a project.",
        "operationId": "searchFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "TODO",
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter on files  with exact match",
                "allOf": [
                  {
                    "description": "Filter on files with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "metadata": {
                            "type": "object",
                            "description": "Customizable extra data about the event. String key -> String value."
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Asset IDs of related equipments that this event relates to.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- TODO",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 100,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "maxLength": 256,
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "name": {
                                    "maxLength": 256,
                                    "type": "string"
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of the file."
                                  },
                                  "mimeType": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "File type. E.g. pdf, css, spreadsheet, .."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Customizable extra data about the file. String key -> String value."
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    },
                                    "maxItems": 100,
                                    "minItems": 1
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "uploaded": {
                                    "type": "boolean",
                                    "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                                  },
                                  "uploadedAt": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "FilesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/delete": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Delete multiple files",
        "description": "Deletes the files with the given ids.\n\nA maximum of 1000 files can be deleted per request.",
        "operationId": "deleteFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of files to delete. A maximum of 1000 files can be deleted per request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/files/download": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Download file's content",
        "description": "",
        "operationId": "downloadFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of files to delete. A maximum of 1000 files can be deleted per request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "link": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/files/update": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Update multiple files",
        "description": "",
        "operationId": "updateFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "ID given by the API to the file.",
                          "format": "int64"
                        },
                        "name": {
                          "type": "object",
                          "properties": {
                            "set": {
                              "type": "string"
                            }
                          },
                          "description": "Non removable string change.",
                          "required": [
                            "set"
                          ]
                        },
                        "mimeType": {
                          "type": "object",
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "setNull": {
                                  "type": "boolean"
                                }
                              }
                            }
                          ],
                          "description": "Removable string change."
                        },
                        "source": {
                          "type": "object",
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "setNull": {
                                  "type": "boolean"
                                }
                              }
                            }
                          ],
                          "description": "Removable string change."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Object change",
                          "properties": {
                            "add": {
                              "uniqueItems": true,
                              "type": "object",
                              "description": "key-value pairs to be added. Existing key-value pairs will be kept. If key already exist, the value will be overwritten.",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "example": {
                                "key1": "value1",
                                "key2": "value2"
                              }
                            },
                            "remove": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Array of keys of key-value pairs to remove.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "set": {
                              "uniqueItems": true,
                              "type": "object",
                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                              "additionalProperties": {
                                "type": "string"
                              },
                              "example": {
                                "key1": "value1",
                                "key2": "value2"
                              }
                            }
                          }
                        },
                        "assetIds": {
                          "type": "object",
                          "description": "array of objects change",
                          "properties": {
                            "add": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int64"
                              }
                            },
                            "remove": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int64"
                              }
                            },
                            "set": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          }
                        },
                        "externalId": {
                          "type": "object",
                          "oneOf": [
                            {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "setNull": {
                                  "type": "boolean"
                                }
                              }
                            }
                          ],
                          "description": "Removable string change."
                        }
                      },
                      "description": "Changes will be applied to file."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            },
                            "name": {
                              "maxLength": 256,
                              "type": "string"
                            },
                            "source": {
                              "maxLength": 128,
                              "type": "string",
                              "description": "The source of the file."
                            },
                            "mimeType": {
                              "maxLength": 64,
                              "type": "string",
                              "description": "File type. E.g. pdf, css, spreadsheet, .."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Customizable extra data about the file. String key -> String value."
                            },
                            "assetIds": {
                              "type": "array",
                              "items": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "maxItems": 100,
                              "minItems": 1
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "uploaded": {
                              "type": "boolean",
                              "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body."
                            },
                            "uploadedAt": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "createdTime": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "lastUpdatedTime": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries": {
      "get": {
        "tags": [
          "Time series"
        ],
        "summary": "List all time series",
        "description": "Retrieves a list of all time series in a project, sorted by name alphabetically. Parameters can be used to select a subset of time series. This operation supports pagination.",
        "operationId": "getTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "includeMetadata",
            "in": "query",
            "description": "Decide if the metadata field should be returned or not.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for paging through time series.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "Get time series related to this asset.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of time series in lexicographic order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "required": [
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Generated id of the time series",
                                "format": "int64"
                              },
                              "externalId": {
                                "type": "string",
                                "description": "Externaly supplied id of the time series"
                              },
                              "name": {
                                "type": "string",
                                "description": "Unique name of time series"
                              },
                              "isString": {
                                "type": "boolean",
                                "description": "Whether the time series is string valued or not."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Additional metadata. String key -> String value."
                              },
                              "unit": {
                                "type": "string",
                                "description": "The physical unit of the time series."
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "Asset that this time series belongs to.",
                                "format": "int64"
                              },
                              "isStep": {
                                "type": "boolean",
                                "description": "Whether the time series is a step series or not."
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the time series."
                              },
                              "securityCategories": {
                                "type": "array",
                                "description": "Security categories required in order to access this time series.",
                                "items": {
                                  "type": "integer",
                                  "description": "Security categories required in order to access this time series.",
                                  "format": "int64"
                                }
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "type": "integer",
                                "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              }
                            }
                          }
                        },
                        "previousCursor": {
                          "type": "string",
                          "description": "Cursor to get the previous page of results (if available)."
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next, or previous, page of result"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      },
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Create a new time series.",
        "operationId": "postTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The time series to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "type": "string",
                          "description": "Externaly provided id for the time series (optional but recomended)"
                        },
                        "name": {
                          "type": "string",
                          "description": "Human readable name of time series"
                        },
                        "isString": {
                          "type": "boolean",
                          "description": "Whether the time series is string valued or not."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Additional metadata. String key -> String value."
                        },
                        "unit": {
                          "type": "string",
                          "description": "The physical unit of the time series."
                        },
                        "assetId": {
                          "type": "integer",
                          "description": "Asset that this time series belongs to.",
                          "format": "int64"
                        },
                        "isStep": {
                          "type": "boolean",
                          "description": "Whether the time series is a step series or not."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the time series."
                        },
                        "securityCategories": {
                          "type": "array",
                          "description": "Security categories required in order to access this time series.",
                          "items": {
                            "type": "integer",
                            "description": "Security categories required in order to access this time series.",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The time series created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "required": [
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Generated id of the time series",
                                "format": "int64"
                              },
                              "externalId": {
                                "type": "string",
                                "description": "Externaly supplied id of the time series"
                              },
                              "name": {
                                "type": "string",
                                "description": "Unique name of time series"
                              },
                              "isString": {
                                "type": "boolean",
                                "description": "Whether the time series is string valued or not."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Additional metadata. String key -> String value."
                              },
                              "unit": {
                                "type": "string",
                                "description": "The physical unit of the time series."
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "Asset that this time series belongs to.",
                                "format": "int64"
                              },
                              "isStep": {
                                "type": "boolean",
                                "description": "Whether the time series is a step series or not."
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the time series."
                              },
                              "securityCategories": {
                                "type": "array",
                                "description": "Security categories required in order to access this time series.",
                                "items": {
                                  "type": "integer",
                                  "description": "Security categories required in order to access this time series.",
                                  "format": "int64"
                                }
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "type": "integer",
                                "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/search": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Search for time series",
        "description": "Retrieves a list of time series matching the given criteria. This operation does not support pagination.",
        "operationId": "searchTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Retrieves a list of time series matching the given criteria. This operation does not support pagination.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "Filtering parameters",
                    "type": "object",
                    "properties": {
                      "unit": {
                        "description": "Filter on unit (case-sensitive).",
                        "type": "string"
                      },
                      "isString": {
                        "description": "Filter on isString.",
                        "type": "boolean"
                      },
                      "isStep": {
                        "description": "Filter on isStep.",
                        "type": "boolean"
                      },
                      "metadata": {
                        "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                        "type": "object"
                      },
                      "assetIds": {
                        "type": "array",
                        "description": "Filter out time series that are not linked to any of these assets.",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "assetSubtrees": {
                        "type": "array",
                        "description": "Filter out time series that are not linked to assets in the subtree rooted at these assets. Format is [12,345,6,7890].",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "createdTime": {
                        "description": "Filter out time series with createdTime before this. Format is milliseconds since epoch.",
                        "type": "object",
                        "properties": {
                          "min": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "max": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      "lastUpdatedTime": {
                        "description": "Filter out time series with lastUpdatedTime before this. Format is milliseconds since epoch.",
                        "type": "object",
                        "properties": {
                          "min": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "max": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  },
                  "search": {
                    "description": "Search parameters",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Prefix and fuzzy search on name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "Prefix and fuzzy search on description.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
                        "type": "string"
                      }
                    }
                  },
                  "sort": {
                    "description": "Field to be sorted. If not specified, results are sorted by relevance score.",
                    "type": "string",
                    "enum": [
                      "createdTime",
                      "lastUpdatedTime"
                    ]
                  },
                  "dir": {
                    "description": "Sort direction: descending or ascending. Only applicable if sort is specified. Default 'desc'.",
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "desc"
                  },
                  "limit": {
                    "description": "Return up to this many results. Maximum is 1000. Default is 25.",
                    "maximum": 1000,
                    "type": "integer",
                    "format": "int32",
                    "default": 25
                  },
                  "offset": {
                    "description": "Offset from the first result. Sum of limit and offset must not exceed 1000. Default is 0.",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                  },
                  "boostName": {
                    "description": "Whether or not boosting name field. This option is experimental and can be changed.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Experimental endpoint. Search on time series.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "required": [
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Generated id of the time series",
                                "format": "int64"
                              },
                              "externalId": {
                                "type": "string",
                                "description": "Externaly supplied id of the time series"
                              },
                              "name": {
                                "type": "string",
                                "description": "Unique name of time series"
                              },
                              "isString": {
                                "type": "boolean",
                                "description": "Whether the time series is string valued or not."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Additional metadata. String key -> String value."
                              },
                              "unit": {
                                "type": "string",
                                "description": "The physical unit of the time series."
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "Asset that this time series belongs to.",
                                "format": "int64"
                              },
                              "isStep": {
                                "type": "boolean",
                                "description": "Whether the time series is a step series or not."
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the time series."
                              },
                              "securityCategories": {
                                "type": "array",
                                "description": "Security categories required in order to access this time series.",
                                "items": {
                                  "type": "integer",
                                  "description": "Security categories required in order to access this time series.",
                                  "format": "int64"
                                }
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "type": "integer",
                                "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/get": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve multiple time series",
        "description": "Retrieves the details of multiple time series within the same project given the project id and a list of time series ids. Time series are returned in the same order as they appeared in the list of ids in the request.",
        "operationId": "getTimeSeriesByIds",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of time series IDs to retrieve",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "type": "object",
                      "description": "Object is required to provide only one from two available attributes (one or another). Id field maps to server side ID while externalId to user set identifier.",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "externalId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of time-series matching the ids.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "required": [
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Generated id of the time series",
                                "format": "int64"
                              },
                              "externalId": {
                                "type": "string",
                                "description": "Externaly supplied id of the time series"
                              },
                              "name": {
                                "type": "string",
                                "description": "Unique name of time series"
                              },
                              "isString": {
                                "type": "boolean",
                                "description": "Whether the time series is string valued or not."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Additional metadata. String key -> String value."
                              },
                              "unit": {
                                "type": "string",
                                "description": "The physical unit of the time series."
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "Asset that this time series belongs to.",
                                "format": "int64"
                              },
                              "isStep": {
                                "type": "boolean",
                                "description": "Whether the time series is a step series or not."
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the time series."
                              },
                              "securityCategories": {
                                "type": "array",
                                "description": "Security categories required in order to access this time series.",
                                "items": {
                                  "type": "integer",
                                  "description": "Security categories required in order to access this time series.",
                                  "format": "int64"
                                }
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "type": "integer",
                                "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ids duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/update": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Update multiple time series",
        "description": "Updates multiple time series objects within a single project at the same time. This operation supports partial updates, meaning that fields not specified in the request are left unchanged on the object.\n\nFor primitive fields (String, Long Int), use 'set': 'value' to update value; use 'setNull': true to set that field to null.\n\nFor the Json Array field (e.g. securityCategories), use 'set': [value1, value2] to update value; use 'add': [v1, v2] to add values to current list of values; use 'remove': [v1, v2] to remove these values from current list of values if exist.",
        "operationId": "alterTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "externalId": {
                          "type": "string"
                        },
                        "externalIdChange": {
                          "type": "object",
                          "properties": {
                            "set": {
                              "type": "string"
                            },
                            "setNull": {
                              "type": "boolean"
                            }
                          },
                          "description": "Change that will be applied to description."
                        },
                        "name": {
                          "type": "object",
                          "properties": {
                            "set": {
                              "type": "string"
                            },
                            "setNull": {
                              "type": "boolean"
                            }
                          },
                          "description": "Change that will be applied to description."
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "set": {
                              "type": "object"
                            },
                            "setNull": {
                              "type": "boolean"
                            }
                          },
                          "description": "Change that will be applied to metadata. String key -> String value."
                        },
                        "unit": {
                          "type": "object",
                          "properties": {
                            "set": {
                              "type": "string"
                            },
                            "setNull": {
                              "type": "boolean"
                            }
                          },
                          "description": "Change that will be applied to description."
                        },
                        "assetId": {
                          "type": "object",
                          "properties": {
                            "set": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "setNull": {
                              "type": "boolean"
                            }
                          },
                          "description": "Change that will be applied to assetId."
                        },
                        "description": {
                          "type": "object",
                          "properties": {
                            "set": {
                              "type": "string"
                            },
                            "setNull": {
                              "type": "boolean"
                            }
                          },
                          "description": "Change that will be applied to description."
                        },
                        "securityCategories": {
                          "type": "object",
                          "description": "array of objects change",
                          "properties": {
                            "add": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int64"
                              }
                            },
                            "remove": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int64"
                              }
                            },
                            "set": {
                              "uniqueItems": true,
                              "type": "array",
                              "items": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          }
                        }
                      },
                      "description": "Changes will be applied to time series."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Corresponding time series after applying the updates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "required": [
                              "name"
                            ],
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Generated id of the time series",
                                "format": "int64"
                              },
                              "externalId": {
                                "type": "string",
                                "description": "Externaly supplied id of the time series"
                              },
                              "name": {
                                "type": "string",
                                "description": "Unique name of time series"
                              },
                              "isString": {
                                "type": "boolean",
                                "description": "Whether the time series is string valued or not."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Additional metadata. String key -> String value."
                              },
                              "unit": {
                                "type": "string",
                                "description": "The physical unit of the time series."
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "Asset that this time series belongs to.",
                                "format": "int64"
                              },
                              "isStep": {
                                "type": "boolean",
                                "description": "Whether the time series is a step series or not."
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of the time series."
                              },
                              "securityCategories": {
                                "type": "array",
                                "description": "Security categories required in order to access this time series.",
                                "items": {
                                  "type": "integer",
                                  "description": "Security categories required in order to access this time series.",
                                  "format": "int64"
                                }
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "Time when this time-series is created in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "type": "integer",
                                "description": "The latest time when this time-series is updated in CDP in milliseconds since Jan 1, 1970.",
                                "format": "int64"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ids duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/delete": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Delete time series",
        "description": "Deletes multiple time series given their IDs.",
        "operationId": "deleteTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of IDs of time series to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "type": "object",
                      "description": "Object is required to provide only one from two available attributes (one or another). Id field maps to server side ID while externalId to user set identifier.",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "externalId": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "notFound": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Items which are not  found",
                      "items": {
                        "description": "Ids or ExternalIds which are not found",
                        "oneOf": [
                          {
                            "type": "integer",
                            "format": "int64"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/data": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Insert a list of data points into multiple time series.",
        "description": "Inserts multiple data points into multiple time series in the same project.",
        "operationId": "postMultiTimeSeriesDatapoints",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Datapoints to insert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "datapoints"
                      ],
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Id of the timeseries to post the datapoints to",
                          "format": "int64"
                        },
                        "externalId": {
                          "type": "string",
                          "description": "External id of the timeseries to post the datapoints to (Only if id is not set)"
                        },
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints",
                          "items": {
                            "required": [
                              "timestamp",
                              "value"
                            ],
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "integer",
                                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                "format": "int64"
                              },
                              "value": {
                                "description": "The data value. Can be String or numeric depending on the metric",
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ids or external ids not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "notFound": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Items which are not  found",
                      "items": {
                        "description": "Ids or ExternalIds which are not found",
                        "oneOf": [
                          {
                            "type": "integer",
                            "format": "int64"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/data/get": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve data points from multiple time series",
        "description": "Retrieves a list of data points from multiple time series in the same project. This operation supports aggregation but not pagination. This operation is also accessible using GET if the post body is supplied as a query parameter named postBody.",
        "operationId": "getMultiTimeSeriesDatapoints",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of DatapointsQueries to perform.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Id of the timeseries to query",
                          "format": "int64"
                        },
                        "externalId": {
                          "type": "string",
                          "description": "External id of the timeseries to query (Only if id is not set)"
                        },
                        "start": {
                          "type": "string",
                          "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch."
                        },
                        "end": {
                          "type": "string",
                          "description": "Get datapoints up to this time. The format is the same as for start."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Return up to this number of datapoints.",
                          "format": "int32"
                        },
                        "aggregates": {
                          "type": "array",
                          "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                          "items": {
                            "type": "string",
                            "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates."
                          }
                        },
                        "granularity": {
                          "type": "string",
                          "description": "The granularity size and granularity of the aggregates."
                        },
                        "includeOutsidePoints": {
                          "type": "boolean",
                          "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                          "default": false
                        },
                        "aliases": {
                          "type": "array",
                          "items": {
                            "required": [
                              "id",
                              "alias"
                            ],
                            "type": "object",
                            "description": "Input alias for the function query",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The id of the timeseries that this alias references"
                              },
                              "alias": {
                                "type": "string",
                                "description": "The string value that is referenced in the function expression"
                              },
                              "aggregate": {
                                "type": "string",
                                "description": "The aggregate to fetch for this alias, empty means fetch non-aggregated data. Aggregate values will be interpolated for periods with no ground data. There are known inaccuracies in how the average value is interpolated."
                              },
                              "granularity": {
                                "type": "string",
                                "description": "The granularity of the aggregates, only relevant if property 'aggregate' is specified"
                              }
                            }
                          }
                        }
                      },
                      "description": "Parameters describing a query for datapoints."
                    }
                  },
                  "start": {
                    "type": "string",
                    "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Default '0'."
                  },
                  "end": {
                    "type": "string",
                    "description": "Get datapoints up to this time. Same format as for start. Default 'now'."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Return up to this number of datapoints. Default 100.",
                    "format": "int32"
                  },
                  "aggregates": {
                    "type": "array",
                    "description": "The aggregates to be applied. If both this field and the a query item aggregate field is left blank, un-aggregated data will be returned for that query.",
                    "items": {
                      "type": "string",
                      "description": "The aggregates to be applied. If both this field and the a query item aggregate field is left blank, un-aggregated data will be returned for that query."
                    }
                  },
                  "granularity": {
                    "type": "string",
                    "description": "The time granularity size and unit to aggregate over. For example '1h' for one hour."
                  },
                  "includeOutsidePoints": {
                    "type": "boolean",
                    "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                    "default": false
                  }
                },
                "description": "Parameters describing a query for multiple datapoints. If fields in individual datapoint query items are omitted, values from the multiquery are used instead. For example, you can provide a default limit for all items (that do not have a limit set) by setting the limit field in the multiquery."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Lists of datapoints for the given queries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "required": [
                              "datapoints"
                            ],
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Id of the timeseries the datapoints belong to",
                                "format": "int64"
                              },
                              "externalId": {
                                "type": "string",
                                "description": "External id of the timeseries the datapoints belong to (Only if id is not set)"
                              },
                              "datapoints": {
                                "type": "array",
                                "description": "The list of datapoints",
                                "items": {
                                  "required": [
                                    "timestamp",
                                    "value"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "timestamp": {
                                      "type": "integer",
                                      "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                      "format": "int64"
                                    },
                                    "value": {
                                      "description": "The data value. Can be String or numeric depending on the metric",
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        }
                                      ]
                                    },
                                    "average": {
                                      "type": "number",
                                      "description": "The integral average value in the aggregate period",
                                      "format": "double"
                                    },
                                    "max": {
                                      "type": "number",
                                      "description": "The maximum value in the aggregate period",
                                      "format": "double"
                                    },
                                    "min": {
                                      "type": "number",
                                      "description": "The minimum value in the aggregate period",
                                      "format": "double"
                                    },
                                    "count": {
                                      "type": "integer",
                                      "description": "The number of datapoints in the aggregate period",
                                      "format": "int32"
                                    },
                                    "sum": {
                                      "type": "number",
                                      "description": "The sum of the datapoints in the aggregate period",
                                      "format": "double"
                                    },
                                    "interpolation": {
                                      "type": "number",
                                      "description": "The interpolated value of the series in the beginning of the aggregate",
                                      "format": "double"
                                    },
                                    "stepInterpolation": {
                                      "type": "number",
                                      "description": "The last value before or at the beginning of the aggregate.",
                                      "format": "double"
                                    },
                                    "continuousVariance": {
                                      "type": "number",
                                      "description": "The variance of the interpolated underlying function.",
                                      "format": "double"
                                    },
                                    "discreteVariance": {
                                      "type": "number",
                                      "description": "The variance of the datapoint values.",
                                      "format": "double"
                                    },
                                    "totalVariation": {
                                      "type": "number",
                                      "description": "The total variation of the interpolated underlying function.",
                                      "format": "double"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Names not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "notFound": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Items which are not  found",
                      "items": {
                        "description": "Ids or ExternalIds which are not found",
                        "oneOf": [
                          {
                            "type": "integer",
                            "format": "int64"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/data/latest": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve the latest data point in a time series",
        "description": "Retrieves the single latest data point in a time series.",
        "operationId": "getLatest",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of get latest queries to perform.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "description": "List of latest queries",
                    "items": {
                      "type": "object",
                      "description": "Describes the latest query. One and only one of id and externalId must be set.",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Id of the timeseries to get the latest value for",
                          "format": "int64"
                        },
                        "externalId": {
                          "type": "string",
                          "description": "External id of the timeseries to get the latest value for (Only if id is not set)"
                        },
                        "before": {
                          "type": "string",
                          "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                          "default": "now"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of responses. Each response contains a list containing a single point, the most recent datapoint, or an empty list if no points found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "required": [
                              "datapoints"
                            ],
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Id of the timeseries the datapoints belong to",
                                "format": "int64"
                              },
                              "externalId": {
                                "type": "string",
                                "description": "External id of the timeseries the datapoints belong to (Only if id is not set)"
                              },
                              "datapoints": {
                                "type": "array",
                                "description": "The list of datapoints",
                                "items": {
                                  "required": [
                                    "timestamp",
                                    "value"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "timestamp": {
                                      "type": "integer",
                                      "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                      "format": "int64"
                                    },
                                    "value": {
                                      "description": "The data value. Can be String or numeric depending on the metric",
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        }
                                      ]
                                    },
                                    "average": {
                                      "type": "number",
                                      "description": "The integral average value in the aggregate period",
                                      "format": "double"
                                    },
                                    "max": {
                                      "type": "number",
                                      "description": "The maximum value in the aggregate period",
                                      "format": "double"
                                    },
                                    "min": {
                                      "type": "number",
                                      "description": "The minimum value in the aggregate period",
                                      "format": "double"
                                    },
                                    "count": {
                                      "type": "integer",
                                      "description": "The number of datapoints in the aggregate period",
                                      "format": "int32"
                                    },
                                    "sum": {
                                      "type": "number",
                                      "description": "The sum of the datapoints in the aggregate period",
                                      "format": "double"
                                    },
                                    "interpolation": {
                                      "type": "number",
                                      "description": "The interpolated value of the series in the beginning of the aggregate",
                                      "format": "double"
                                    },
                                    "stepInterpolation": {
                                      "type": "number",
                                      "description": "The last value before or at the beginning of the aggregate.",
                                      "format": "double"
                                    },
                                    "continuousVariance": {
                                      "type": "number",
                                      "description": "The variance of the interpolated underlying function.",
                                      "format": "double"
                                    },
                                    "discreteVariance": {
                                      "type": "number",
                                      "description": "The variance of the datapoint values.",
                                      "format": "double"
                                    },
                                    "totalVariation": {
                                      "type": "number",
                                      "description": "The total variation of the interpolated underlying function.",
                                      "format": "double"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The time series does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "notFound": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Items which are not  found",
                      "items": {
                        "description": "Ids or ExternalIds which are not found",
                        "oneOf": [
                          {
                            "type": "integer",
                            "format": "int64"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/1/projects/{project}/timeseries/data/delete": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Deletes points",
        "description": "Perform a set of delete requests",
        "operationId": "deleteDatapoints",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of deletes to perform.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "description": "List of deletes",
                    "items": {
                      "type": "object",
                      "required": [
                        "inclusiveBegin"
                      ],
                      "description": "Describes the latest query. One and only one of id and externalId must be set.",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Id of the timeseries to get the latest value for",
                          "format": "int64"
                        },
                        "externalId": {
                          "type": "string",
                          "description": "External id of the timeseries to get the latest value for (Only if id is not set)"
                        },
                        "inclusiveBegin": {
                          "type": "integer",
                          "description": "The first datapoint to delete",
                          "format": "int64"
                        },
                        "exclusiveEnd": {
                          "type": "integer",
                          "description": "If set, the first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "notFound": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Items which are not  found",
                      "items": {
                        "description": "Ids or ExternalIds which are not found",
                        "oneOf": [
                          {
                            "type": "integer",
                            "format": "int64"
                          },
                          {
                            "type": "string"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "token": []
          }
        ],
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Assets",
      "description": "CDP organizes digital information about the physical world. Assets are digital representations of physical objects or groups of objects, and assets are organized into an asset hierarchy. For example, an asset can represent a water pump which is part of a subsystem on an oil platform.\n\nAssets are used to connect related data together, even if the data comes from different sources; Time series of data points, events and files are all connected to one or more assets. The pump asset can be connected to a time series measuring pressure within the pump, as well as events recording maintenance operations, and a file with a 3D diagram of the pump.\n\nAt the top of an asset hierarchy is a root asset (e.g., the oil platform). Each project can have multiple root assets. All assets have a name and a parent asset. No assets with the same parent can have the same name."
    },
    {
      "name": "Events",
      "description": "Event objects store complex information about multiple assets over a time period. For example, an event can describe two hours of maintenance on a water pump and some associated pipes, or a future time window where the pump is scheduled for inspection. This is in contrast with data points in time series that store single pieces of information about one asset at specific points in time (e.g., temperature measurements).\n\nAn event’s time period is defined by a start time and end time, both millisecond timestamps since the UNIX epoch. The timestamps can be in the future. In addition, events can have a text description as well as arbitrary metadata and properties.\n"
    },
    {
      "name": "Files",
      "description": "A file stores a sequence of bytes connected to one or more assets. For example, a file can contain a piping and instrumentation diagram (P&IDs) showing how multiple assets are connected.\n\nEach file is identified by a unique ID that is generated when it is a created, as well as a name and a directory path. File names are limited to 256 bytes, and directory paths to 512. The combination of file name and directory path must be unique within a project.\n\nDirectories in CDP differ from ones in normal file systems; They exist only as string attributes on individual file objects. This means that directories themselves cannot be created, deleted, or moved. There is no particular path separator, and no notion of a directory hierarchy.\nFiles are created in two steps; First the metadata is stored in a file object, and then the file contents are uploaded. This means that files can exist in a non-uploaded state."
    },
    {
      "name": "Time series",
      "description": "A time series consists of a sequence of data points connected to a single asset. \n\nFor example: A water pump asset can have a temperature time series that records a data point in units of °C every second. \n\nA single asset can have several time series. The water pump could have additional time series measuring pressure within the pump, rpm, flow volume, power consumption, and more.\n\nTime series store data points as either number or strings. This is controlled by the is_string flag on the time series object. Numerical data points can be aggregated before they are returned from a query (e.g., to find the average temperature for a day). String data points, on the other hand, cannot be aggregated by CDP, but can store arbitrary information like states (e.g. “open”/”closed”) or more complex information (JSON).\n\nCognite stores discrete data points, but the underlying process measured by the data points can vary continuously. When interpolating between data points, we can either assume that each value stays the same until the next measurement, or that it linearly changes between the two measurements. This is controlled by the is_step flag on the time series object. For example, if we estimate the average over a time containing two data points, the average will either be close to the first (is step) or close to the mean of the two (not is step).\n\nA data point stores a single piece of information, a number or a string, associated with a specific time. Data points are identified by their timestamps, measured in milliseconds since the unix epoch -- 00:00, January 1st, 1970. Milliseconds is the finest time resolution supported by CDP i.e. fractional milliseconds are not supported. Leap seconds are not counted.\n\nNumerical data points can be aggregated before they are retrieved from CDP. This allows for faster queries by reducing the amount of data transferred. You can aggregate data points by specifying one or more aggregates (e.g. average, minimum, maximum) as well as the time granularity over which the aggregates should be applied (e.g. “1h” for one hour).\n\nAggregates are aligned to the start time modulo the granularity unit. For example, if you ask for daily average temperatures since monday afternoon last week, the first aggregated data point will contain averages for monday, the second for tuesday, etc. Determining aggregate alignment without considering data point timestamps allows CDP to pre-calculate aggregates (e.g. to quickly return daily average temperatures for a year). As a consequence, aggregating over 60 minutes can return a different result that aggregating over 1 hour because the two queries will be aligned differently.Deprecation warning: In the future, CDP will phase out name as a unique identifier for time series, and instead use a primary key of externalId. Time series names must currently be unique across across all time series in the same project. In version 1 of CDP, time series names will no longer be unique. "
    }
  ]
}