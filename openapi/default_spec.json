{
  "openapi": "3.0.1",
  "info": {
    "title": "Cognite API",
    "description": "This is the reference documentation for the Cognite API. Here you can see an overview of all methods available through the API.",
    "version": "v1 beta",
    "contact": {
      "name": "Cognite Support",
      "url": "https://support.cognite.com",
      "email": "support@cognite.com"
    }
  },
  "servers": [
    {
      "url": "https://api.cognitedata.com"
    }
  ],
  "paths": {
    "/api/v1/projects/{project}/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get assets",
        "description": "Get assets.",
        "operationId": "getAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Name of asset. Often referred to as tag.",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "parentIds",
            "description": "Filter out assets that have one of the ids listed as parent. The parentId is set to null if the asset is a root asset.",
            "example": [
              363848954441724,
              793045462540095,
              1261042166839739
            ],
            "schema": {
              "uniqueItems": true,
              "minItems": 1,
              "maxItems": 100,
              "type": "string",
              "format": "jsonArray(int64)"
            }
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "maxLength": 128,
              "type": "string",
              "description": "The source of this asset."
            }
          },
          {
            "in": "query",
            "name": "minDepth",
            "schema": {
              "type": "integer",
              "description": "Minimum depth."
            }
          },
          {
            "in": "query",
            "name": "maxDepth",
            "schema": {
              "type": "integer",
              "description": "Maximum depth."
            }
          },
          {
            "in": "query",
            "name": "minCreatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxCreatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minLastUpdatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxLastUpdatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "externalIdPrefix",
            "schema": {
              "description": "External Id provided by client. Should be unique within the project.",
              "type": "string",
              "maxLength": 255
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged response with list of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag.",
                                "maxLength": 50
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Create new assets",
        "description": "Create new assets.\n\nIt is possible to post a maximum of 1000 assets per request.\nThe parentId is set to null if the asset is a root asset.",
        "operationId": "createAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of assets to create. It is possible to post a maximum of 1000 assets per request",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of asset. Often referred to as tag.",
                              "maxLength": 50
                            },
                            "parentId": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "description": {
                              "type": "string",
                              "description": "Description of asset.",
                              "maxLength": 500
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Custom, application specific metadata. String key -> String value",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "source": {
                              "type": "string",
                              "description": "The source of this asset"
                            }
                          },
                          "description": "Representation of a physical asset, e.g plant or piece of equipment"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "parentExternalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag.",
                                "maxLength": 50
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "AssetsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get asset by id",
        "description": "Get an asset identified by its id.",
        "operationId": "getAsset",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Cognite internal id",
            "schema": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single asset response",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of asset. Often referred to as tag.",
                          "maxLength": 50
                        },
                        "parentId": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of asset.",
                          "maxLength": 500
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "source": {
                          "type": "string",
                          "description": "The source of this asset"
                        }
                      },
                      "description": "Representation of a physical asset, e.g plant or piece of equipment"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "createdTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "lastUpdatedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "path": {
                          "type": "array",
                          "description": "IDs of assets on the path to the asset.",
                          "items": {
                            "type": "integer",
                            "description": "IDs of assets on the path to the asset.",
                            "format": "int64"
                          }
                        },
                        "depth": {
                          "type": "integer",
                          "description": "Asset path depth (number of levels below root node).",
                          "format": "int32",
                          "minimum": 0
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project}/assets/list": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Filter all assets",
        "description": "Retrieve a list of all assets in the same project. This operation supports pagination by cursor. Criteria can be applied to select a subset of events.",
        "operationId": "listAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Filter on assets with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag.",
                            "maxLength": 50
                          },
                          "parentIds": {
                            "type": "array",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of this asset"
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "root": {
                            "type": "boolean",
                            "description": "filtered assets are root assets or not"
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paged response with list of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag.",
                                "maxLength": 50
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          }
        },
        "x-capability": [
          "AssetsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/byids": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieve assets",
        "description": "Retrieves information about multiple assets in the same project.\nA maximum of 1000 assets IDs may be listed per request and all of them must be unique.",
        "operationId": "byIdsAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of IDs of assets to retrieve. Must be up to a maximum of 1000 events and all of them must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag.",
                                "maxLength": 50
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "AssetsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/update": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Update multiple assets",
        "description": "Updates multiple assets within the same project. Updating assets does not replace the existing asset hierarchy. This operation supports partial updates, meaning that fields omitted from the requests are not changed.\n\nUnder DataAssetChange -> SinglePathString, you can use 'set': 'value' to update value; use 'setNull': true to set that field to null.\n\nIt is possible to post changes to a maximum of 1000 assets per request and all of their IDs must be unique.",
        "operationId": "updateAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes. It is possible to post changes to a maximum of 1000 assets per request and all asset IDs must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes applied to asset",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "name": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "type": "string"
                                        }
                                      },
                                      "description": "Non removable string change.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes applied to asset",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "name": {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "type": "string"
                                        }
                                      },
                                      "description": "Non removable string change.",
                                      "required": [
                                        "set"
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag.",
                                "maxLength": 50
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "AssetsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/search": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Search for assets",
        "description": "Retrieves a list of assets matching the given criteria. This operation does not support pagination.",
        "operationId": "searchAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "Search query",
          "content": {
            "application/json": {
              "schema": {
                "description": "Search request with filter capabilities",
                "allOf": [
                  {
                    "description": "Filter on assets with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag.",
                            "maxLength": 50
                          },
                          "parentIds": {
                            "type": "array",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of this asset"
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "root": {
                            "type": "boolean",
                            "description": "filtered assets are root assets or not"
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag.",
                            "maxLength": 50
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of asset.",
                            "maxLength": 500
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response with list of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of asset. Often referred to as tag.",
                                "maxLength": 50
                              },
                              "parentId": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "description": {
                                "type": "string",
                                "description": "Description of asset.",
                                "maxLength": 500
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "source": {
                                "type": "string",
                                "description": "The source of this asset"
                              }
                            },
                            "description": "Representation of a physical asset, e.g plant or piece of equipment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "path": {
                                "type": "array",
                                "description": "IDs of assets on the path to the asset.",
                                "items": {
                                  "type": "integer",
                                  "description": "IDs of assets on the path to the asset.",
                                  "format": "int64"
                                }
                              },
                              "depth": {
                                "type": "integer",
                                "description": "Asset path depth (number of levels below root node).",
                                "format": "int32",
                                "minimum": 0
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "AssetsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/assets/delete": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete assets",
        "description": "Deletes multiple assets in the same project, along with all their descendants in the asset hierarchy.\n\nA maximum of 1000 asset IDs can be listed per delete request (not including the descendants).",
        "operationId": "deleteAssets",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of IDs of assets to delete. A maximum of 1000 asset IDs can be listed per delete request (not including the descendants).",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "AssetsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/events": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create events",
        "description": "Creates multiple event objects in the same project. It is possible to post a maximum of 1000 events per request.",
        "operationId": "createEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of events to be posted. It is possible to post a maximum of 1000 events per request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project",
                          "type": "string",
                          "maxLength": 255
                        },
                        "startTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 100,
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:WRITE"
        ]
      },
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Filter events",
        "description": "List events optionally filtered on query parameters",
        "operationId": "listEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "minStartTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxStartTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minEndTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxEndTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "assetIds",
            "description": "Asset IDs of related equipment that this event relates to. Format is list of IDs serialized as JSON array(int64). Takes [ 1 .. 100 ] of unique items.",
            "example": [
              363848954441724,
              793045462540095,
              1261042166839739
            ],
            "schema": {
              "type": "string",
              "format": "jsonArray(int64)"
            }
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "maxLength": 128,
              "type": "string",
              "description": "The source of this event."
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "maxLength": 64,
              "type": "string",
              "description": "The event type"
            }
          },
          {
            "in": "query",
            "name": "subtype",
            "schema": {
              "maxLength": 64,
              "type": "string",
              "description": "The event subtype"
            }
          },
          {
            "in": "query",
            "name": "minCreatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxCreatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minLastUpdatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxLastUpdatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "externalIdPrefix",
            "schema": {
              "description": "External Id provided by client. Should be unique within the project",
              "type": "string",
              "maxLength": 255
            },
            "style": "form",
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "single event response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Receive event by ID",
        "operationId": "getEventByInternalId",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project",
                          "type": "string",
                          "maxLength": 255
                        },
                        "startTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 100,
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "lastUpdatedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/list": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Filter all events",
        "description": "Retrieve a list of all events in the same project. This operation supports pagination by cursor. Criteria can be applied to select a subset of events.",
        "operationId": "advancedListEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter request for events. Filters exact field matching or timestamp ranges inclusive min and max.",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "description": "Filter on events filter with exact match",
                        "type": "object",
                        "properties": {
                          "startTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "endTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Asset IDs of related equipment that this event relates to.",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "type": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The event type"
                          },
                          "subtype": {
                            "maxLength": 64,
                            "type": "string",
                            "description": "The event subtype"
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project",
                            "type": "string",
                            "maxLength": 255
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "single event response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      },
                      "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/byids": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve events",
        "description": "Retrieves information about multiple events in the same project. Events are returned in the same order as the ids listed in the query.\n\nA maximum of 1000 event IDs may be listed per request and all of them must be unique.",
        "operationId": "byIdsEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of events to retrieve. Must be up to a maximum of 1000 events and all of them must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/update": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Update multiple events",
        "description": "Updates multiple events in the same project. This operation supports partial updates; Fields omitted from queries will remain unchanged on objects.\n\nFor primitive fields (String, Long, Int), use 'set': 'value' to update value; use 'setNull': true to set that field to null.\n\nFor the Json Array field (e.g. assetIds), use 'set': [value1, value2] to update value; use 'add': [v1, v2] to add values to current list of values; use 'remove': [v1, v2] to remove these values from current list of values if exists.\n\nA maximum of 1000 events can be updated per request, and all of the event IDs must be unique.",
        "operationId": "updateEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of changes. A maximum of 1000 events can be updated per request, and all of the event IDs must be unique.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "startTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "endTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to array object."
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "type": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "subtype": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to event.",
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "startTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "endTime": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "description": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to array object."
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "type": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "subtype": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 1000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/events/search": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Search within events",
        "operationId": "searchEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter on events filter with exact match",
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "Filter on events filter with exact match",
                    "type": "object",
                    "properties": {
                      "startTime": {
                        "description": "Range between two timestamps",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "endTime": {
                        "description": "Range between two timestamps",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Custom, application specific metadata. String key -> String value",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "assetIds": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true,
                        "description": "Asset IDs of related equipment that this event relates to.",
                        "items": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      },
                      "source": {
                        "maxLength": 128,
                        "type": "string",
                        "description": "The source of this event."
                      },
                      "type": {
                        "maxLength": 64,
                        "type": "string",
                        "description": "The event type"
                      },
                      "subtype": {
                        "maxLength": 64,
                        "type": "string",
                        "description": "The event subtype"
                      },
                      "createdTime": {
                        "description": "Range between two timestamps",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "lastUpdatedTime": {
                        "description": "Range between two timestamps",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "externalIdPrefix": {
                        "description": "External Id provided by client. Should be unique within the project",
                        "type": "string",
                        "maxLength": 255
                      }
                    }
                  },
                  "search": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string",
                        "maxLength": 500,
                        "description": "text to search in description field across events"
                      }
                    }
                  },
                  "limit": {
                    "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Paged response with list of events",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project",
                                    "type": "string",
                                    "maxLength": 255
                                  },
                                  "startTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "endTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "type": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Type of the event, e.g 'failure'."
                                  },
                                  "subtype": {
                                    "maxLength": 64,
                                    "type": "string",
                                    "description": "Subtype of the event, e.g 'electrical'."
                                  },
                                  "description": {
                                    "maxLength": 500,
                                    "type": "string",
                                    "description": "Textual description of the event."
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "description": "Custom, application specific metadata. String key -> String value",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "assetIds": {
                                    "type": "array",
                                    "minItems": 1,
                                    "maxItems": 100,
                                    "uniqueItems": true,
                                    "description": "Asset IDs of related equipment that this event relates to.",
                                    "items": {
                                      "description": "Javascript friendly internal ID given to the object.",
                                      "type": "integer",
                                      "minimum": 1,
                                      "maximum": 9007199254740991,
                                      "format": "int64"
                                    }
                                  },
                                  "source": {
                                    "maxLength": 128,
                                    "type": "string",
                                    "description": "The source of this event."
                                  }
                                },
                                "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "lastUpdatedTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "createdTime": {
                                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/events/delete": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Delete multiple events",
        "description": "Deletes events with the given ids. A maximum of 1000 events can be deleted per request.",
        "operationId": "deleteEvents",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Initiate file upload",
        "description": "Create metadata information and get upload link for one file.\n\nThe uploadUrl link which is returned in the response is a Google Cloud Storage (GCS) resumable upload URL. \nIt should be used in a separate request to upload the file, as documented in \nhttps://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload. \n\nThe 'Origin' header parameter is forwarded as a 'Origin' header to the GCS initiate upload session request.\nAlso, the 'mimeType' query parameter is forwarded as a 'X-Upload-Content-Type' header.",
        "operationId": "initFileUpload",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Origin",
            "description": "The 'Origin' header parameter is required in a resumable upload request if there is a Cross Origin issue.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "overwrite",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If 'overwrite' is set to true, and the POST body content specifies a 'externalId' field, fields for the file found for externalId can be overwritten. The default setting is false. \n\nIf metadata is included in the request body, all of the original metadata will be overwritten.\nThe actual file will be overwritten after successful upload. If there is no successful upload, the current file contents will be kept. \n\nFile-Asset mappings only change if explicitly stated in the assetIds field of the POST json body. \nDo not set assetIds in request body if you want to keep the current file-asset mappings."
          }
        ],
        "requestBody": {
          "description": "Fields to be set for the file. ",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "externalId": {
                        "description": "External Id provided by client. Should be unique within the project.",
                        "type": "string",
                        "maxLength": 255
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the file.",
                        "maxLength": 50
                      },
                      "source": {
                        "maxLength": 128,
                        "type": "string",
                        "description": "The source of the file."
                      },
                      "mimeType": {
                        "maxLength": 64,
                        "type": "string",
                        "example": "image/jpeg",
                        "description": "File type. E.g. text/plain, application/pdf, .."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Custom, application specific metadata. String key -> String value",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "assetIds": {
                        "type": "array",
                        "items": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "maxItems": 100,
                        "minItems": 1
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The response for a successful files/initupload operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the file.",
                              "maxLength": 50
                            },
                            "source": {
                              "maxLength": 128,
                              "type": "string",
                              "description": "The source of the file."
                            },
                            "mimeType": {
                              "maxLength": 64,
                              "type": "string",
                              "example": "image/jpeg",
                              "description": "File type. E.g. text/plain, application/pdf, .."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Custom, application specific metadata. String key -> String value",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "assetIds": {
                              "type": "array",
                              "items": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "maxItems": 100,
                              "minItems": 1
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "id",
                            "uploaded",
                            "createdTime",
                            "lastUpdatedTime"
                          ],
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "uploaded": {
                              "type": "boolean",
                              "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                              "example": true
                            },
                            "uploadedTime": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "createdTime": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "lastUpdatedTime": {
                              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "required": [
                        "uploadUrl"
                      ],
                      "properties": {
                        "uploadUrl": {
                          "description": "The URL where the file contents should be uploaded.",
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List files with simple filtering",
        "description": "The GET /files operation can be used to return information for all files in a project. \n\nOptionally you can add one or more of the following query parameters. \nThe filter query parameters will filter the results to only include files that match all filter parameters.",
        "operationId": "listFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Name of the file.",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "mimeType",
            "schema": {
              "maxLength": 64,
              "type": "string",
              "example": "image/jpeg",
              "description": "File type. E.g. text/plain, application/pdf, .."
            },
            "example": "image/jpeg"
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "maxLength": 128,
              "type": "string",
              "description": "The source of the file."
            }
          },
          {
            "in": "query",
            "name": "assetIds",
            "schema": {
              "type": "array",
              "minItems": 1,
              "maxItems": 100,
              "uniqueItems": true,
              "description": "Only include files that reference these specific asset IDs.",
              "example": [
                363848954441724,
                793045462540095,
                1261042166839739
              ],
              "items": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "in": "query",
            "name": "minCreatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxCreatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minLastUpdatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxLastUpdatedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "minUploadedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "maxUploadedTime",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "in": "query",
            "name": "externalIdPrefix",
            "schema": {
              "description": "External Id provided by client. Should be unique within the project.",
              "type": "string",
              "maxLength": 255
            },
            "style": "form",
            "explode": false
          },
          {
            "in": "query",
            "name": "uploaded",
            "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response for a successful files/list operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 50
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 64,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of results"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/{id}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get info for one file by ID",
        "description": "Returns file info for the file ID",
        "operationId": "getFileByInternalId",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response for a successful GET files/id operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the file.",
                          "maxLength": 50
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of the file."
                        },
                        "mimeType": {
                          "maxLength": 64,
                          "type": "string",
                          "example": "image/jpeg",
                          "description": "File type. E.g. text/plain, application/pdf, .."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "maxItems": 100,
                          "minItems": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id",
                        "uploaded",
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "uploaded": {
                          "type": "boolean",
                          "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                          "example": true
                        },
                        "uploadedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "lastUpdatedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "EventsAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/list": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "List files with advanced filtering",
        "description": "Retrieves a list of all files in a project. Criteria can be supplied to select a subset of files. This operation supports pagination with cursors.",
        "operationId": "advancedListFiles",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "The project name",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "description": "Filter on files with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 50
                          },
                          "mimeType": {
                            "maxLength": 64,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Only include files that reference these specific asset IDs.",
                            "example": [
                              363848954441724,
                              793045462540095,
                              1261042166839739
                            ],
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "uploadedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          },
                          "uploaded": {
                            "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                            "type": "boolean",
                            "example": true
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Maximum number of items that the client want to get back.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "description": "Cursor for paging through results",
                    "type": "object",
                    "properties": {
                      "cursor": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/list operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 50
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 64,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of results"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/byids": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve multiple files’ metadata",
        "description": "Retrieves metadata information about multiple specific files in the same project. \nResults are returned in the same order as in the request. This operation does not return the file contents.",
        "operationId": "byIdsFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of files to retrieve. Must be up to a maximum of 1000 files and all IDs must be unique",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/byids, files/search or files/update operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 50
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 64,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/search": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Search for files",
        "description": "Retrieves a list with information about files matching the given criteria. This operation supports limited pagination with the offset parameter, but does not support retrieving all files in a project.",
        "operationId": "searchFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request POST body format",
          "content": {
            "application/json": {
              "schema": {
                "description": "Filter on files with exact match",
                "allOf": [
                  {
                    "description": "Filter on files with exact match",
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 50
                          },
                          "mimeType": {
                            "maxLength": 64,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 100,
                            "uniqueItems": true,
                            "description": "Only include files that reference these specific asset IDs.",
                            "example": [
                              363848954441724,
                              793045462540095,
                              1261042166839739
                            ],
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of this event."
                          },
                          "createdTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "lastUpdatedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "uploadedTime": {
                            "description": "Range between two timestamps",
                            "type": "object",
                            "properties": {
                              "max": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "min": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          },
                          "externalIdPrefix": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          },
                          "uploaded": {
                            "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                            "type": "boolean",
                            "example": true
                          }
                        }
                      },
                      "limit": {
                        "description": "<- Maximum number of items that the client want to get back.",
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 100
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "search": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 50
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/byids, files/search or files/update operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 50
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 64,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/files/delete": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Delete multiple files",
        "description": "Deletes the files with the given ids.\n\nA maximum of 1000 files can be deleted per request.",
        "operationId": "deleteFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of IDs of files to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/files/downloadlink": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Get download URLs for file IDs",
        "description": "Retrieves a list of download URLs for the specified list of file IDs. After getting the download links, the client has to issue a GET request to the returned URLs, which will respond with the contents of the file. The link will expire after 30 seconds.",
        "operationId": "downloadLinks",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of file IDs to retrieve the download URL for.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 100,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/downloadlink operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "downloadUrl": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "oneOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/files/update": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Update multiple files",
        "description": "Updates the information for the files specified in the request body.\n\nFor primitive fields (String, Long, Int), use 'set': 'value' to update\nvalue; use 'setNull': true to set that field to null.\n\nFor the Json Array field (e.g. assetIds), use 'set': [value1, value2] to\nupdate value; use 'add': [v1, v2] to add values to current list of\nvalues; use 'remove': [v1, v2] to remove these values from current list\nof values if exists.",
        "operationId": "updateFiles",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "The JSON request body which specifies which files and fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "description": "Changes will be applied to file.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to array object."
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            },
                            {
                              "type": "object",
                              "description": "Changes will be applied to file.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "source": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean"
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Removable string change."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "assetIds": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to array object."
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The response for a successful files/byids, files/search or files/update operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              },
                              "name": {
                                "type": "string",
                                "description": "Name of the file.",
                                "maxLength": 50
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of the file."
                              },
                              "mimeType": {
                                "maxLength": 64,
                                "type": "string",
                                "example": "image/jpeg",
                                "description": "File type. E.g. text/plain, application/pdf, .."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                },
                                "maxItems": 100,
                                "minItems": 1
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "id",
                              "uploaded",
                              "createdTime",
                              "lastUpdatedTime"
                            ],
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              },
                              "uploaded": {
                                "type": "boolean",
                                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                                "example": true
                              },
                              "uploadedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "FilesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/files/{threedFileId}": {
      "get": {
        "tags": [
          "3D Files"
        ],
        "summary": "Retrieve a 3D file",
        "description": "Retrieve the contents of a 3D file.\n\nThis endpoint supported tag-based caching.\n\nThis endpoint is only compatible with 3D file IDs from the 3D API, and not compatible with\nfile IDs from the Files API.",
        "operationId": "get3DFile",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "threedFileId",
            "in": "path",
            "description": "The ID of the 3D file to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "description": "The raw contents of the file.",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "The media type of the file."
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models": {
      "get": {
        "tags": [
          "3D Models"
        ],
        "summary": "List 3D models",
        "description": "Retrieves a list of all models in a project. This operation supports pagination. You can filter out all models without a published revision.",
        "operationId": "get3DModels",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Filter based on whether or not it has published revisions.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of models.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name",
                              "id",
                              "createdTime"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the model.",
                                "example": "My Model"
                              },
                              "id": {
                                "type": "integer",
                                "description": "The ID of the model.",
                                "format": "int64",
                                "example": 1000
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                                "format": "int64",
                                "example": 0
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      },
      "post": {
        "tags": [
          "3D Models"
        ],
        "summary": "Create 3D models",
        "operationId": "create3DModels",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "The models to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 255,
                          "description": "The name of the model.",
                          "example": "My Model"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of the created models.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "createdTime"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the model.",
                            "example": "My Model"
                          },
                          "id": {
                            "type": "integer",
                            "description": "The ID of the model.",
                            "format": "int64",
                            "example": 1000
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:CREATE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/update": {
      "post": {
        "tags": [
          "3D Models"
        ],
        "summary": "Update 3D models",
        "operationId": "update3DModels",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of changes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "allOf": [
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "update": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string",
                                      "minLength": 1,
                                      "maxLength": 255
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Corresponding models after applying the updates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "createdTime"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the model.",
                            "example": "My Model"
                          },
                          "id": {
                            "type": "integer",
                            "description": "The ID of the model.",
                            "format": "int64",
                            "example": 1000
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:UPDATE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/delete": {
      "post": {
        "tags": [
          "3D Models"
        ],
        "summary": "Delete 3D models",
        "operationId": "delete3DModels",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "List of models to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:DELETE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}": {
      "get": {
        "tags": [
          "3D Models"
        ],
        "summary": "Retrieve a 3D model",
        "operationId": "get3DModel",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A model object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "id",
                    "createdTime"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the model.",
                      "example": "My Model"
                    },
                    "id": {
                      "type": "integer",
                      "description": "The ID of the model.",
                      "format": "int64",
                      "example": 1000
                    },
                    "createdTime": {
                      "type": "integer",
                      "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                      "format": "int64",
                      "example": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "List 3D revisions",
        "description": "Retrieves a list of all revisions of a model. This operation supports pagination. You can also filter revisions if they are marked as published or not by using the query param published.",
        "operationId": "get3DRevisions",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "published",
            "in": "query",
            "description": "Filter based on published status.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of revisions of the model.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "fileId",
                              "published",
                              "status",
                              "assetMappingCount",
                              "createdTime"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the revision.",
                                "format": "int64",
                                "example": 1000
                              },
                              "fileId": {
                                "type": "integer",
                                "description": "The file id.",
                                "format": "int64",
                                "example": 1000
                              },
                              "published": {
                                "type": "boolean",
                                "description": "True if the revision is marked as published.",
                                "default": false
                              },
                              "rotation": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "items": {
                                  "type": "number",
                                  "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                                  "format": "double"
                                }
                              },
                              "camera": {
                                "type": "object",
                                "properties": {
                                  "target": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "description": "Initial camera target.",
                                    "items": {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  },
                                  "position": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "description": "Initial camera position.",
                                    "items": {
                                      "type": "number",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "Initial camera position and target."
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Queued",
                                  "Processing",
                                  "Done",
                                  "Failed"
                                ],
                                "description": "The status of the revision.",
                                "example": "Done"
                              },
                              "thumbnailThreedFileId": {
                                "type": "integer",
                                "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                                "format": "int64",
                                "example": 1000
                              },
                              "thumbnailURL": {
                                "type": "string",
                                "description": "The URL of a thumbnail for the revision.",
                                "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                              },
                              "assetMappingCount": {
                                "type": "integer",
                                "description": "The number of asset mappings for this revision.",
                                "format": "int64",
                                "example": 0
                              },
                              "createdTime": {
                                "type": "integer",
                                "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                                "format": "int64",
                                "example": 0
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      },
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Create 3D revisions",
        "operationId": "create3DRevisions",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The revisions to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "fileId"
                      ],
                      "properties": {
                        "published": {
                          "type": "boolean",
                          "description": "True if the revision is marked as published.",
                          "default": false
                        },
                        "rotation": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "items": {
                            "type": "number",
                            "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                            "format": "double"
                          }
                        },
                        "camera": {
                          "type": "object",
                          "properties": {
                            "target": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera target.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            },
                            "position": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera position.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            }
                          },
                          "description": "Initial camera position and target."
                        },
                        "fileId": {
                          "type": "integer",
                          "description": "The file id to a file uploaded to Cognite's Files API. Can only be set on revision creation, and can never be updated. _Only FBX files are supported_.",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of created revisions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "fileId",
                          "published",
                          "status",
                          "assetMappingCount",
                          "createdTime"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The ID of the revision.",
                            "format": "int64",
                            "example": 1000
                          },
                          "fileId": {
                            "type": "integer",
                            "description": "The file id.",
                            "format": "int64",
                            "example": 1000
                          },
                          "published": {
                            "type": "boolean",
                            "description": "True if the revision is marked as published.",
                            "default": false
                          },
                          "rotation": {
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array",
                            "items": {
                              "type": "number",
                              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                              "format": "double"
                            }
                          },
                          "camera": {
                            "type": "object",
                            "properties": {
                              "target": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera target.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              },
                              "position": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera position.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              }
                            },
                            "description": "Initial camera position and target."
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Queued",
                              "Processing",
                              "Done",
                              "Failed"
                            ],
                            "description": "The status of the revision.",
                            "example": "Done"
                          },
                          "thumbnailThreedFileId": {
                            "type": "integer",
                            "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                            "format": "int64",
                            "example": 1000
                          },
                          "thumbnailURL": {
                            "type": "string",
                            "description": "The URL of a thumbnail for the revision.",
                            "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                          },
                          "assetMappingCount": {
                            "type": "integer",
                            "description": "The number of asset mappings for this revision.",
                            "format": "int64",
                            "example": 0
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:CREATE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/update": {
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Update 3D revisions",
        "operationId": "update3DRevisions",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "allOf": [
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "update": {
                              "type": "object",
                              "properties": {
                                "published": {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "boolean",
                                      "description": "True if the revision is marked as published."
                                    }
                                  }
                                },
                                "rotation": {
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "maxItems": 3,
                                          "minItems": 3,
                                          "type": "array",
                                          "items": {
                                            "type": "number",
                                            "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                                            "format": "double"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "camera": {
                                  "type": "object",
                                  "oneOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "set": {
                                          "type": "object",
                                          "properties": {
                                            "target": {
                                              "maxItems": 3,
                                              "minItems": 3,
                                              "type": "array",
                                              "description": "Initial camera target.",
                                              "items": {
                                                "type": "number",
                                                "format": "double"
                                              }
                                            },
                                            "position": {
                                              "maxItems": 3,
                                              "minItems": 3,
                                              "type": "array",
                                              "description": "Initial camera position.",
                                              "items": {
                                                "type": "number",
                                                "format": "double"
                                              }
                                            }
                                          },
                                          "description": "Initial camera position and target."
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Corresponding revisions after applying the updates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "fileId",
                          "published",
                          "status",
                          "assetMappingCount",
                          "createdTime"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The ID of the revision.",
                            "format": "int64",
                            "example": 1000
                          },
                          "fileId": {
                            "type": "integer",
                            "description": "The file id.",
                            "format": "int64",
                            "example": 1000
                          },
                          "published": {
                            "type": "boolean",
                            "description": "True if the revision is marked as published.",
                            "default": false
                          },
                          "rotation": {
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array",
                            "items": {
                              "type": "number",
                              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                              "format": "double"
                            }
                          },
                          "camera": {
                            "type": "object",
                            "properties": {
                              "target": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera target.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              },
                              "position": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera position.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              }
                            },
                            "description": "Initial camera position and target."
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Queued",
                              "Processing",
                              "Done",
                              "Failed"
                            ],
                            "description": "The status of the revision.",
                            "example": "Done"
                          },
                          "thumbnailThreedFileId": {
                            "type": "integer",
                            "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                            "format": "int64",
                            "example": 1000
                          },
                          "thumbnailURL": {
                            "type": "string",
                            "description": "The URL of a thumbnail for the revision.",
                            "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                          },
                          "assetMappingCount": {
                            "type": "integer",
                            "description": "The number of asset mappings for this revision.",
                            "format": "int64",
                            "example": 0
                          },
                          "createdTime": {
                            "type": "integer",
                            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                            "format": "int64",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:UPDATE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/delete": {
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Delete 3D revisions",
        "operationId": "delete3DRevisions",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "List of revisions ids to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:DELETE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Retrieve a 3D revision",
        "operationId": "get3DRevision",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A revision object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "fileId",
                    "published",
                    "status",
                    "assetMappingCount",
                    "createdTime"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The ID of the revision.",
                      "format": "int64",
                      "example": 1000
                    },
                    "fileId": {
                      "type": "integer",
                      "description": "The file id.",
                      "format": "int64",
                      "example": 1000
                    },
                    "published": {
                      "type": "boolean",
                      "description": "True if the revision is marked as published.",
                      "default": false
                    },
                    "rotation": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                        "format": "double"
                      }
                    },
                    "camera": {
                      "type": "object",
                      "properties": {
                        "target": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "description": "Initial camera target.",
                          "items": {
                            "type": "number",
                            "format": "double"
                          }
                        },
                        "position": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "description": "Initial camera position.",
                          "items": {
                            "type": "number",
                            "format": "double"
                          }
                        }
                      },
                      "description": "Initial camera position and target."
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Queued",
                        "Processing",
                        "Done",
                        "Failed"
                      ],
                      "description": "The status of the revision.",
                      "example": "Done"
                    },
                    "thumbnailThreedFileId": {
                      "type": "integer",
                      "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                      "format": "int64",
                      "example": 1000
                    },
                    "thumbnailURL": {
                      "type": "string",
                      "description": "The URL of a thumbnail for the revision.",
                      "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                    },
                    "assetMappingCount": {
                      "type": "integer",
                      "description": "The number of asset mappings for this revision.",
                      "format": "int64",
                      "example": 0
                    },
                    "createdTime": {
                      "type": "integer",
                      "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                      "format": "int64",
                      "example": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/thumbnail": {
      "post": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "Update 3D revision thumbnail",
        "operationId": "updateThumbnail",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request body containing the file ID of the thumbnail image (from Files API).",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fileId"
                ],
                "properties": {
                  "fileId": {
                    "type": "integer",
                    "description": "File ID of thumbnail file in Files API. _Only JPEG and PNG files are supported_.",
                    "format": "int64"
                  }
                },
                "description": "Request body for the updateModelRevisionThumbnail endpoint."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:UPDATE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/nodes": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "List 3D nodes",
        "description": "Retrieves a list of nodes from the hierarchy in the 3D model. You can also request a specific subtree with the 'nodeId' query parameter and limit the depth of the resulting subtree with the 'depth' query parameter. This operation supports pagination.",
        "operationId": "get3DNodes",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Get sub nodes up to this many levels below the specified node. Depth 0 is the root node.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nodeId",
            "in": "query",
            "description": "ID of a node that are the root of the subtree you request (default is the root node).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes of a revision.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "treeIndex",
                              "parentId",
                              "depth",
                              "name",
                              "subtreeSize",
                              "boundingBox"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1000
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 3
                              },
                              "parentId": {
                                "type": "integer",
                                "nullable": true,
                                "description": "The parent of the node, null if it is the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "depth": {
                                "type": "integer",
                                "description": "The depth of the node in the tree, starting from 0 at the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the node.",
                                "example": "Node name"
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of descendants of the node, plus one (counting itself).",
                                "format": "int64",
                                "example": 4
                              },
                              "boundingBox": {
                                "type": "object",
                                "required": [
                                  "min",
                                  "max"
                                ],
                                "properties": {
                                  "max": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The maximal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  },
                                  "min": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The minimal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/nodes/{nodeId}/ancestors": {
      "get": {
        "tags": [
          "3D Model Revisions"
        ],
        "summary": "List 3D ancestor nodes",
        "description": "Retrieves a list of ancestor nodes of a given node, including itself, in the hierarchy of the 3D model. This operation supports pagination.",
        "operationId": "get3DNodeAncestors",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "ID of the node to get the ancestors of.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ancestor nodes.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "treeIndex",
                              "parentId",
                              "depth",
                              "name",
                              "subtreeSize",
                              "boundingBox"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1000
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 3
                              },
                              "parentId": {
                                "type": "integer",
                                "nullable": true,
                                "description": "The parent of the node, null if it is the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "depth": {
                                "type": "integer",
                                "description": "The depth of the node in the tree, starting from 0 at the root node.",
                                "format": "int64",
                                "example": 2
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the node.",
                                "example": "Node name"
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of descendants of the node, plus one (counting itself).",
                                "format": "int64",
                                "example": 4
                              },
                              "boundingBox": {
                                "type": "object",
                                "required": [
                                  "min",
                                  "max"
                                ],
                                "properties": {
                                  "max": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The maximal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  },
                                  "min": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The minimal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/mappings": {
      "get": {
        "tags": [
          "3D Asset Mapping"
        ],
        "summary": "List 3D asset mappings",
        "description": "List all asset mappings",
        "operationId": "get3DMappings",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "nodeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of mappings between assets and 3D nodes",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "nodeId",
                              "assetId",
                              "treeIndex",
                              "subtreeSize"
                            ],
                            "properties": {
                              "nodeId": {
                                "type": "integer",
                                "description": "The ID of the node.",
                                "format": "int64",
                                "example": 1003
                              },
                              "assetId": {
                                "type": "integer",
                                "description": "The ID of the associated asset (Cognite's Assets API).",
                                "format": "int64",
                                "example": 3001
                              },
                              "treeIndex": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                "format": "int64",
                                "example": 5
                              },
                              "subtreeSize": {
                                "type": "integer",
                                "description": "The number of nodes in the subtree of this node (this number included the node itself).",
                                "format": "int64",
                                "example": 7
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      },
      "post": {
        "tags": [
          "3D Asset Mapping"
        ],
        "summary": "Create 3D asset mappings",
        "description": "Create asset mappings",
        "operationId": "create3DMappings",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The asset mappings to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "nodeId",
                        "assetId"
                      ],
                      "properties": {
                        "nodeId": {
                          "type": "integer",
                          "description": "The ID of the node.",
                          "format": "int64",
                          "example": 1003
                        },
                        "assetId": {
                          "type": "integer",
                          "description": "The ID of the associated asset (Cognite's Assets API).",
                          "format": "int64",
                          "example": 3001
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of created asset mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "nodeId",
                          "assetId",
                          "treeIndex",
                          "subtreeSize"
                        ],
                        "properties": {
                          "nodeId": {
                            "type": "integer",
                            "description": "The ID of the node.",
                            "format": "int64",
                            "example": 1003
                          },
                          "assetId": {
                            "type": "integer",
                            "description": "The ID of the associated asset (Cognite's Assets API).",
                            "format": "int64",
                            "example": 3001
                          },
                          "treeIndex": {
                            "type": "integer",
                            "minimum": 0,
                            "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                            "format": "int64",
                            "example": 5
                          },
                          "subtreeSize": {
                            "type": "integer",
                            "description": "The number of nodes in the subtree of this node (this number included the node itself).",
                            "format": "int64",
                            "example": 7
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:UPDATE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/models/{modelId}/revisions/{revisionId}/mappings/delete": {
      "post": {
        "tags": [
          "3D Asset Mapping"
        ],
        "summary": "Delete 3D asset mappings",
        "description": "Delete a list of asset mappings",
        "operationId": "delete3DMappings",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The IDs of the asset mappings to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "required": [
                        "nodeId",
                        "assetId"
                      ],
                      "properties": {
                        "nodeId": {
                          "type": "integer",
                          "description": "The ID of the node.",
                          "format": "int64",
                          "example": 1003
                        },
                        "assetId": {
                          "type": "integer",
                          "description": "The ID of the associated asset (Cognite's Assets API).",
                          "format": "int64",
                          "example": 3001
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:DELETE"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/reveal/models/{modelId}/revisions/{revisionId}": {
      "get": {
        "tags": [
          "3D Viewer"
        ],
        "summary": "Retrieve a 3D revision (Reveal)",
        "operationId": "getReveal3DRevision",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A revision object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "id",
                        "fileId",
                        "published",
                        "status",
                        "assetMappingCount",
                        "createdTime"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The ID of the revision.",
                          "format": "int64",
                          "example": 1000
                        },
                        "fileId": {
                          "type": "integer",
                          "description": "The file id.",
                          "format": "int64",
                          "example": 1000
                        },
                        "published": {
                          "type": "boolean",
                          "description": "True if the revision is marked as published.",
                          "default": false
                        },
                        "rotation": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "items": {
                            "type": "number",
                            "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                            "format": "double"
                          }
                        },
                        "camera": {
                          "type": "object",
                          "properties": {
                            "target": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera target.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            },
                            "position": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera position.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            }
                          },
                          "description": "Initial camera position and target."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Queued",
                            "Processing",
                            "Done",
                            "Failed"
                          ],
                          "description": "The status of the revision.",
                          "example": "Done"
                        },
                        "thumbnailThreedFileId": {
                          "type": "integer",
                          "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                          "format": "int64",
                          "example": 1000
                        },
                        "thumbnailURL": {
                          "type": "string",
                          "description": "The URL of a thumbnail for the revision.",
                          "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                        },
                        "assetMappingCount": {
                          "type": "integer",
                          "description": "The number of asset mappings for this revision.",
                          "format": "int64",
                          "example": 0
                        },
                        "createdTime": {
                          "type": "integer",
                          "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                          "format": "int64",
                          "example": 0
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "sceneThreedFiles"
                      ],
                      "properties": {
                        "sceneThreedFiles": {
                          "type": "array",
                          "items": {
                            "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                            "type": "object",
                            "required": [
                              "version",
                              "fileId"
                            ],
                            "properties": {
                              "version": {
                                "type": "integer",
                                "description": "Version of the file format.",
                                "format": "int64",
                                "example": 1
                              },
                              "fileId": {
                                "type": "integer",
                                "description": "File ID. Use /3d/files/{id} to retrieve the file.",
                                "format": "int64",
                                "example": 1000
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/reveal/models/{modelId}/revisions/{revisionId}/nodes": {
      "get": {
        "tags": [
          "3D Viewer"
        ],
        "summary": "List 3D nodes (Reveal)",
        "operationId": "revealGet3DNodes",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Get sub nodes up to this many levels below the specified node.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "nodeId",
            "in": "query",
            "description": "ID of a node that are the root of the subtree you request (default is the root node).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of nodes of a revision.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id",
                                  "treeIndex",
                                  "parentId",
                                  "depth",
                                  "name",
                                  "subtreeSize",
                                  "boundingBox"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "description": "The ID of the node.",
                                    "format": "int64",
                                    "example": 1000
                                  },
                                  "treeIndex": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                    "format": "int64",
                                    "example": 3
                                  },
                                  "parentId": {
                                    "type": "integer",
                                    "nullable": true,
                                    "description": "The parent of the node, null if it is the root node.",
                                    "format": "int64",
                                    "example": 2
                                  },
                                  "depth": {
                                    "type": "integer",
                                    "description": "The depth of the node in the tree, starting from 0 at the root node.",
                                    "format": "int64",
                                    "example": 2
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the node.",
                                    "example": "Node name"
                                  },
                                  "subtreeSize": {
                                    "type": "integer",
                                    "description": "The number of descendants of the node, plus one (counting itself).",
                                    "format": "int64",
                                    "example": 4
                                  },
                                  "boundingBox": {
                                    "type": "object",
                                    "required": [
                                      "min",
                                      "max"
                                    ],
                                    "properties": {
                                      "max": {
                                        "maxItems": 3,
                                        "minItems": 3,
                                        "type": "array",
                                        "items": {
                                          "type": "number",
                                          "description": "The maximal coordinates of the bounding box.",
                                          "format": "double"
                                        }
                                      },
                                      "min": {
                                        "maxItems": 3,
                                        "minItems": 3,
                                        "type": "array",
                                        "items": {
                                          "type": "number",
                                          "description": "The minimal coordinates of the bounding box.",
                                          "format": "double"
                                        }
                                      }
                                    },
                                    "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "sectorId": {
                                    "type": "integer",
                                    "description": "The sector the node is contained in.",
                                    "format": "int64",
                                    "example": 1000
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/reveal/models/{modelId}/revisions/{revisionId}/nodes/{nodeId}/ancestors": {
      "get": {
        "tags": [
          "3D Viewer"
        ],
        "summary": "List 3D ancestor nodes (Reveal)",
        "operationId": "revealGet3DNodeAncestors",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "ID of the node to get the ancestors of.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of ancestor nodes.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "id",
                                  "treeIndex",
                                  "parentId",
                                  "depth",
                                  "name",
                                  "subtreeSize",
                                  "boundingBox"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "description": "The ID of the node.",
                                    "format": "int64",
                                    "example": 1000
                                  },
                                  "treeIndex": {
                                    "type": "integer",
                                    "minimum": 0,
                                    "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                                    "format": "int64",
                                    "example": 3
                                  },
                                  "parentId": {
                                    "type": "integer",
                                    "nullable": true,
                                    "description": "The parent of the node, null if it is the root node.",
                                    "format": "int64",
                                    "example": 2
                                  },
                                  "depth": {
                                    "type": "integer",
                                    "description": "The depth of the node in the tree, starting from 0 at the root node.",
                                    "format": "int64",
                                    "example": 2
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the node.",
                                    "example": "Node name"
                                  },
                                  "subtreeSize": {
                                    "type": "integer",
                                    "description": "The number of descendants of the node, plus one (counting itself).",
                                    "format": "int64",
                                    "example": 4
                                  },
                                  "boundingBox": {
                                    "type": "object",
                                    "required": [
                                      "min",
                                      "max"
                                    ],
                                    "properties": {
                                      "max": {
                                        "maxItems": 3,
                                        "minItems": 3,
                                        "type": "array",
                                        "items": {
                                          "type": "number",
                                          "description": "The maximal coordinates of the bounding box.",
                                          "format": "double"
                                        }
                                      },
                                      "min": {
                                        "maxItems": 3,
                                        "minItems": 3,
                                        "type": "array",
                                        "items": {
                                          "type": "number",
                                          "description": "The minimal coordinates of the bounding box.",
                                          "format": "double"
                                        }
                                      }
                                    },
                                    "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "sectorId": {
                                    "type": "integer",
                                    "description": "The sector the node is contained in.",
                                    "format": "int64",
                                    "example": 1000
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/reveal/models/{modelId}/revisions/{revisionId}/sectors": {
      "get": {
        "tags": [
          "3D Viewer"
        ],
        "summary": "List 3D sectors (Reveal)",
        "description": "List all sectors for a revision",
        "operationId": "revealGet3DSectors",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "boundingBox",
            "in": "query",
            "description": "Bounding box to restrict search to. If given, only return sectors that intersect the given bounding box. Given as a JSON-encoded object of two arrays \"min\" and \"max\" with 3 coordinates each.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "min",
                    "max"
                  ],
                  "properties": {
                    "max": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The maximal coordinates of the bounding box.",
                        "format": "double"
                      }
                    },
                    "min": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The minimal coordinates of the bounding box.",
                        "format": "double"
                      }
                    }
                  },
                  "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                }
              }
            }
          },
          {
            "name": "cursor",
            "description": "Cursor for paging through results",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sectors for the revision.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "id",
                              "parentId",
                              "path",
                              "depth",
                              "boundingBox",
                              "threedFiles"
                            ],
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The id of the sector.",
                                "format": "int64",
                                "example": 1000
                              },
                              "parentId": {
                                "type": "integer",
                                "nullable": true,
                                "description": "The parent of the sector, null if it is the root sector.",
                                "format": "int64",
                                "example": 900
                              },
                              "path": {
                                "type": "string",
                                "description": "String representing the path to the sector: 0/2/6/ etc.",
                                "example": "0/100/500/900/1000"
                              },
                              "depth": {
                                "type": "integer",
                                "description": "The depth of the sector in the sector tree, starting from 0 at the root sector.",
                                "format": "int64",
                                "example": 4
                              },
                              "boundingBox": {
                                "type": "object",
                                "required": [
                                  "min",
                                  "max"
                                ],
                                "properties": {
                                  "max": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The maximal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  },
                                  "min": {
                                    "maxItems": 3,
                                    "minItems": 3,
                                    "type": "array",
                                    "items": {
                                      "type": "number",
                                      "description": "The minimal coordinates of the bounding box.",
                                      "format": "double"
                                    }
                                  }
                                },
                                "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                              },
                              "threedFiles": {
                                "type": "array",
                                "description": "The file ID of the data file for this sector, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                                "items": {
                                  "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                                  "type": "object",
                                  "required": [
                                    "version",
                                    "fileId"
                                  ],
                                  "properties": {
                                    "version": {
                                      "type": "integer",
                                      "description": "Version of the file format.",
                                      "format": "int64",
                                      "example": 1
                                    },
                                    "fileId": {
                                      "type": "integer",
                                      "description": "File ID. Use /3d/files/{id} to retrieve the file.",
                                      "format": "int64",
                                      "example": 1000
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "description": "Cursor to get the next page of results (if available)."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/3d/unreal/models/{modelId}/revisions/{revisionId}": {
      "get": {
        "tags": [
          "3D Viewer"
        ],
        "summary": "Retrieve a 3D Revision (Unreal)",
        "operationId": "getUnreal3DRevision",
        "parameters": [
          {
            "name": "project",
            "description": "Project name.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Model ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "revisionId",
            "in": "path",
            "description": "Revision ID.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A revision object",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "id",
                        "fileId",
                        "published",
                        "status",
                        "assetMappingCount",
                        "createdTime"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "The ID of the revision.",
                          "format": "int64",
                          "example": 1000
                        },
                        "fileId": {
                          "type": "integer",
                          "description": "The file id.",
                          "format": "int64",
                          "example": 1000
                        },
                        "published": {
                          "type": "boolean",
                          "description": "True if the revision is marked as published.",
                          "default": false
                        },
                        "rotation": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "items": {
                            "type": "number",
                            "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                            "format": "double"
                          }
                        },
                        "camera": {
                          "type": "object",
                          "properties": {
                            "target": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera target.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            },
                            "position": {
                              "maxItems": 3,
                              "minItems": 3,
                              "type": "array",
                              "description": "Initial camera position.",
                              "items": {
                                "type": "number",
                                "format": "double"
                              }
                            }
                          },
                          "description": "Initial camera position and target."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Queued",
                            "Processing",
                            "Done",
                            "Failed"
                          ],
                          "description": "The status of the revision.",
                          "example": "Done"
                        },
                        "thumbnailThreedFileId": {
                          "type": "integer",
                          "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                          "format": "int64",
                          "example": 1000
                        },
                        "thumbnailURL": {
                          "type": "string",
                          "description": "The URL of a thumbnail for the revision.",
                          "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                        },
                        "assetMappingCount": {
                          "type": "integer",
                          "description": "The number of asset mappings for this revision.",
                          "format": "int64",
                          "example": 0
                        },
                        "createdTime": {
                          "type": "integer",
                          "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                          "format": "int64",
                          "example": 0
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "sceneThreedFiles"
                      ],
                      "properties": {
                        "sceneThreedFiles": {
                          "type": "array",
                          "items": {
                            "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                            "type": "object",
                            "required": [
                              "version",
                              "fileId"
                            ],
                            "properties": {
                              "version": {
                                "type": "integer",
                                "description": "Version of the file format.",
                                "format": "int64",
                                "example": 1
                              },
                              "fileId": {
                                "type": "integer",
                                "description": "File ID. Use /3d/files/{id} to retrieve the file.",
                                "format": "int64",
                                "example": 1000
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-capability": [
          "ThreedAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries": {
      "get": {
        "tags": [
          "Time series"
        ],
        "summary": "List all time series",
        "description": "Retrieves a list of all time series in a project, sorted by name alphabetically. Parameters can be used to select a subset of time series. This operation supports pagination.",
        "operationId": "getTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "includeMetadata",
            "in": "query",
            "description": "Decide if the metadata field should be returned or not.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for paging through time series.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIds",
            "in": "query",
            "description": "Get time series related to these assets. Format is list of IDs serialized as JSON array(int64). Takes [ 1 .. 100 ] unique items.",
            "example": [
              363848954441724,
              793045462540095,
              1261042166839739
            ],
            "schema": {
              "type": "string",
              "format": "jsonArray(int64)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of time series in lexicographic order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "minItems": 0,
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Generated id of the time series",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "type": "string",
                            "description": "Externally supplied id of the time series"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of time series"
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Additional metadata. String key -> String value."
                          },
                          "unit": {
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "Asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "Security categories required in order to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of result"
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      },
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Create a new time series.",
        "description": "Create one or multiple time series",
        "operationId": "postTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The time series to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "type": "string",
                          "description": "Externally provided id for the time series (optional but recommended)"
                        },
                        "name": {
                          "type": "string",
                          "description": "Human readable name of time series"
                        },
                        "isString": {
                          "type": "boolean",
                          "default": false,
                          "description": "Whether the time series is string valued or not."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Additional metadata. String key -> String value."
                        },
                        "unit": {
                          "type": "string",
                          "description": "The physical unit of the time series."
                        },
                        "assetId": {
                          "description": "Asset that this time series belongs to.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "isStep": {
                          "type": "boolean",
                          "default": false,
                          "description": "Whether the time series is a step series or not."
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the time series."
                        },
                        "securityCategories": {
                          "type": "array",
                          "description": "Security categories required in order to access this time series.",
                          "items": {
                            "type": "integer",
                            "description": "Security categories required in order to access this time series.",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The time series created",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. Order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Generated id of the time series",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "type": "string",
                            "description": "Externally supplied id of the time series"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of time series"
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Additional metadata. String key -> String value."
                          },
                          "unit": {
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "Asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "Security categories required in order to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Timeseries with specified externalId already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Ids duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "duplicated": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are duplicated",
                              "items": {
                                "description": "Ids and ExternalIds which are duplicated in request",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/search": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Search for time series",
        "description": "Retrieves a list of time series matching the given criteria. This operation does not support pagination.",
        "operationId": "searchTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Retrieves a list of time series matching the given criteria. This operation does not support pagination.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "description": "Filtering parameters",
                    "type": "object",
                    "properties": {
                      "unit": {
                        "description": "Filter on unit (case-sensitive).",
                        "type": "string"
                      },
                      "isString": {
                        "description": "Filter on isString.",
                        "type": "boolean"
                      },
                      "isStep": {
                        "description": "Filter on isStep.",
                        "type": "boolean"
                      },
                      "metadata": {
                        "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        },
                        "type": "object"
                      },
                      "assetIds": {
                        "type": "array",
                        "description": "Filter out time series that are not linked to any of these assets.",
                        "example": [
                          363848954441724,
                          793045462540095,
                          1261042166839739
                        ],
                        "items": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "minItems": 1,
                        "maxItems": 100,
                        "uniqueItems": true
                      },
                      "createdTime": {
                        "description": "Filter out time series with createdTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      },
                      "lastUpdatedTime": {
                        "description": "Filter out time series with lastUpdatedTime outside this range.",
                        "type": "object",
                        "properties": {
                          "max": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "min": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  },
                  "search": {
                    "description": "Search parameters",
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Prefix and fuzzy search on name.",
                        "type": "string"
                      },
                      "description": {
                        "description": "Prefix and fuzzy search on description.",
                        "type": "string"
                      },
                      "query": {
                        "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
                        "type": "string"
                      }
                    }
                  },
                  "limit": {
                    "description": "Return up to this many results.",
                    "maximum": 1000,
                    "minimum": 1,
                    "type": "integer",
                    "format": "int32",
                    "default": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search on time series.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. Order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Generated id of the time series",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "type": "string",
                            "description": "Externally supplied id of the time series"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of time series"
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Additional metadata. String key -> String value."
                          },
                          "unit": {
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "Asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "Security categories required in order to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/byids": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve multiple time series",
        "description": "Retrieves the details of multiple time series within the same project given the project id and a list of time series ids. Time series are returned in the same order as they appeared in the list of ids in the request.",
        "operationId": "getTimeSeriesByIds",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of time series IDs to retrieve",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of time-series matching the ids.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. Order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Generated id of the time series",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "type": "string",
                            "description": "Externally supplied id of the time series"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of time series"
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Additional metadata. String key -> String value."
                          },
                          "unit": {
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "Asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "Security categories required in order to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "notFound": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are not found",
                              "items": {
                                "description": "Ids or ExternalIds which are not found",
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Ids duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "duplicated": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are duplicated",
                              "items": {
                                "description": "Ids and ExternalIds which are duplicated in request",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/update": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Update multiple time series",
        "description": "Updates multiple time series objects within a single project at the same time. This operation supports partial updates, meaning that fields not specified in the request are left unchanged on the object.\n\nFor primitive fields (String, Long Int), use 'set': 'value' to update value; use 'setNull': true to set that field to null.\n\nFor the Json Array field (e.g. securityCategories), use 'set': [value1, value2] to update value; use 'add': [v1, v2] to add values to current list of values; use 'remove': [v1, v2] to remove these values from current list of values if exist.",
        "operationId": "alterTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of changes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 1000,
                    "items": {
                      "oneOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to timeseries.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "name": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "unit": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "assetId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to assetId."
                                    },
                                    "description": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "securityCategories": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to array object."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "description": "Changes will be applied to timeseries.",
                              "required": [
                                "update"
                              ],
                              "properties": {
                                "update": {
                                  "type": "object",
                                  "properties": {
                                    "externalId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "name": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "description": "Object change",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "object",
                                              "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                              "additionalProperties": {
                                                "type": "string"
                                              },
                                              "example": {
                                                "key1": "value1",
                                                "key2": "value2"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "description": "Remove the key-value pairs with given keys.",
                                              "example": [
                                                "value1",
                                                "value2"
                                              ],
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "unit": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "assetId": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "integer",
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to assetId."
                                    },
                                    "description": {
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "setNull"
                                          ],
                                          "properties": {
                                            "setNull": {
                                              "type": "boolean",
                                              "enum": [
                                                true
                                              ]
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to description."
                                    },
                                    "securityCategories": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "set"
                                          ],
                                          "properties": {
                                            "set": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "add": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            },
                                            "remove": {
                                              "uniqueItems": true,
                                              "type": "array",
                                              "items": {
                                                "type": "integer",
                                                "format": "int64"
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "description": "Change that will be applied to array object."
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "required": [
                                "externalId"
                              ],
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Corresponding time series after applying the updates.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. Order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "id",
                          "isString",
                          "isStep",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Generated id of the time series",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "externalId": {
                            "type": "string",
                            "description": "Externally supplied id of the time series"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of time series"
                          },
                          "isString": {
                            "type": "boolean",
                            "description": "Whether the time series is string valued or not."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Additional metadata. String key -> String value."
                          },
                          "unit": {
                            "type": "string",
                            "description": "The physical unit of the time series."
                          },
                          "assetId": {
                            "description": "Asset that this time series belongs to.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "isStep": {
                            "type": "boolean",
                            "description": "Whether the time series is a step series or not."
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the time series."
                          },
                          "securityCategories": {
                            "type": "array",
                            "description": "Security categories required in order to access this time series.",
                            "items": {
                              "type": "integer",
                              "description": "Security categories required in order to access this time series.",
                              "format": "int64"
                            }
                          },
                          "createdTime": {
                            "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "notFound": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are not found",
                              "items": {
                                "description": "Ids or ExternalIds which are not found",
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Ids duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "duplicated": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are duplicated",
                              "items": {
                                "description": "Ids and ExternalIds which are duplicated in request",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/delete": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Delete time series",
        "description": "Deletes multiple time series given their IDs.",
        "operationId": "deleteTimeSeries",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Select a list of time series to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "List of ID objects",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    },
                    "maxItems": 1000,
                    "minItems": 1
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "notFound": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are not found",
                              "items": {
                                "description": "Ids or ExternalIds which are not found",
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Ids duplicated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "duplicated": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are duplicated",
                              "items": {
                                "description": "Ids and ExternalIds which are duplicated in request",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Insert a list of data points into multiple time series.",
        "description": "Inserts multiple data points into multiple time series in the same project.",
        "operationId": "postMultiTimeSeriesDatapoints",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Datapoints to insert.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 10000,
                    "items": {
                      "type": "object",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "allOf": [
                            {
                              "required": [
                                "datapoints"
                              ],
                              "properties": {
                                "datapoints": {
                                  "type": "array",
                                  "description": "The list of datapoints. Total limit per request is 100000 datapoints.",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "timestamp": {
                                            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                            "type": "integer",
                                            "minimum": 0,
                                            "format": "int64"
                                          },
                                          "value": {
                                            "type": "number",
                                            "description": "The numerical data value of a numerical metric"
                                          }
                                        }
                                      },
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "timestamp": {
                                            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                            "type": "integer",
                                            "minimum": 0,
                                            "format": "int64"
                                          },
                                          "value": {
                                            "type": "string",
                                            "description": "The string data value of a string metric"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "allOf": [
                            {
                              "required": [
                                "datapoints"
                              ],
                              "properties": {
                                "datapoints": {
                                  "type": "array",
                                  "description": "The list of datapoints. Total limit per request is 100000 datapoints.",
                                  "items": {
                                    "oneOf": [
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "timestamp": {
                                            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                            "type": "integer",
                                            "minimum": 0,
                                            "format": "int64"
                                          },
                                          "value": {
                                            "type": "number",
                                            "description": "The numerical data value of a numerical metric"
                                          }
                                        }
                                      },
                                      {
                                        "required": [
                                          "timestamp",
                                          "value"
                                        ],
                                        "type": "object",
                                        "properties": {
                                          "timestamp": {
                                            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                            "type": "integer",
                                            "minimum": 0,
                                            "format": "int64"
                                          },
                                          "value": {
                                            "type": "string",
                                            "description": "The string data value of a string metric"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Ids or external ids not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "notFound": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are not found",
                              "items": {
                                "description": "Ids or ExternalIds which are not found",
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Ids or external ids duplicated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "duplicated": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are duplicated",
                              "items": {
                                "description": "Ids and ExternalIds which are duplicated in request",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Javascript friendly internal ID given to the object.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991,
                                    "format": "int64"
                                  },
                                  "externalId": {
                                    "description": "External Id provided by client. Should be unique within the project.",
                                    "type": "string",
                                    "maxLength": 255
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data/list": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve data points from multiple time series",
        "description": "Retrieves a list of data points from multiple time series in the same project. This operation supports aggregation but not pagination. This operation is also accessible using GET if the post body is supplied as a query parameter named postBody.",
        "operationId": "getMultiTimeSeriesDatapoints",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters describing a query for multiple datapoints. If fields in individual datapoint query items are omitted, top-level values are used instead. For example, you can provide a default limit for all items (that do not have a limit set) by setting the top-level limit field. Data points are returned if no aggregates are requested. If aggregates are specified then just the specified aggregates are returned.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Parameters describing a query for datapoints.",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "allOf": [
                            {
                              "properties": {
                                "start": {
                                  "type": "string",
                                  "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc."
                                },
                                "end": {
                                  "type": "string",
                                  "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                                },
                                "limit": {
                                  "type": "integer",
                                  "description": "Return up to this number of datapoints.",
                                  "format": "int32"
                                },
                                "aggregates": {
                                  "type": "array",
                                  "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                                  "minItems": 0,
                                  "maxItems": 10,
                                  "uniqueItems": true,
                                  "items": {
                                    "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                                    "type": "string",
                                    "enum": [
                                      "average",
                                      "max",
                                      "min",
                                      "count",
                                      "sum",
                                      "interpolation",
                                      "stepInterpolation",
                                      "totalVariation",
                                      "continuousVariance",
                                      "discreteVariance"
                                    ]
                                  }
                                },
                                "granularity": {
                                  "type": "string",
                                  "description": "The granularity size and granularity of the aggregates.",
                                  "example": "1h"
                                },
                                "includeOutsidePoints": {
                                  "type": "boolean",
                                  "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                                  "default": false
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "allOf": [
                            {
                              "properties": {
                                "start": {
                                  "type": "string",
                                  "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc."
                                },
                                "end": {
                                  "type": "string",
                                  "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                                },
                                "limit": {
                                  "type": "integer",
                                  "description": "Return up to this number of datapoints.",
                                  "format": "int32"
                                },
                                "aggregates": {
                                  "type": "array",
                                  "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                                  "minItems": 0,
                                  "maxItems": 10,
                                  "uniqueItems": true,
                                  "items": {
                                    "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                                    "type": "string",
                                    "enum": [
                                      "average",
                                      "max",
                                      "min",
                                      "count",
                                      "sum",
                                      "interpolation",
                                      "stepInterpolation",
                                      "totalVariation",
                                      "continuousVariance",
                                      "discreteVariance"
                                    ]
                                  }
                                },
                                "granularity": {
                                  "type": "string",
                                  "description": "The granularity size and granularity of the aggregates.",
                                  "example": "1h"
                                },
                                "includeOutsidePoints": {
                                  "type": "boolean",
                                  "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                                  "default": false
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "minItems": 1,
                    "maxItems": 100
                  },
                  "start": {
                    "type": "string",
                    "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc.",
                    "default": "0"
                  },
                  "end": {
                    "type": "string",
                    "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start.",
                    "default": "now"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Return up to this number of datapoints.",
                    "format": "int32",
                    "default": 100
                  },
                  "aggregates": {
                    "type": "array",
                    "description": "The aggregates to be returned. This value overrides top-level default aggregates list when set. Specify all aggregates to be retrieved here. Specify empty array if this sub-query needs to return datapoints without aggregation.",
                    "minItems": 0,
                    "maxItems": 10,
                    "uniqueItems": true,
                    "items": {
                      "type": "string",
                      "enum": [
                        "average",
                        "max",
                        "min",
                        "count",
                        "sum",
                        "interpolation",
                        "stepInterpolation",
                        "totalVariation",
                        "continuousVariance",
                        "discreteVariance"
                      ]
                    }
                  },
                  "granularity": {
                    "type": "string",
                    "description": "The time granularity size and unit to aggregate over.",
                    "example": "1h"
                  },
                  "includeOutsidePoints": {
                    "type": "boolean",
                    "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Lists of datapoints for the given queries.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of responses. Order matches the requests order.",
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "Id of the timeseries the datapoints belong to",
                                    "format": "int64",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "description": "External id of the timeseries the datapoints belong to."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "datapoints"
                                ],
                                "properties": {
                                  "datapoints": {
                                    "type": "array",
                                    "description": "The list of datapoints",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "timestamp"
                                          ],
                                          "properties": {
                                            "timestamp": {
                                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                              "type": "integer",
                                              "minimum": 0,
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "properties": {
                                            "average": {
                                              "type": "number",
                                              "description": "The integral average value in the aggregate period",
                                              "format": "double"
                                            },
                                            "max": {
                                              "type": "number",
                                              "description": "The maximum value in the aggregate period",
                                              "format": "double"
                                            },
                                            "min": {
                                              "type": "number",
                                              "description": "The minimum value in the aggregate period",
                                              "format": "double"
                                            },
                                            "count": {
                                              "type": "integer",
                                              "description": "The number of datapoints in the aggregate period",
                                              "format": "int32"
                                            },
                                            "sum": {
                                              "type": "number",
                                              "description": "The sum of the datapoints in the aggregate period",
                                              "format": "double"
                                            },
                                            "interpolation": {
                                              "type": "number",
                                              "description": "The interpolated value of the series in the beginning of the aggregate",
                                              "format": "double"
                                            },
                                            "stepInterpolation": {
                                              "type": "number",
                                              "description": "The last value before or at the beginning of the aggregate.",
                                              "format": "double"
                                            },
                                            "continuousVariance": {
                                              "type": "number",
                                              "description": "The variance of the interpolated underlying function.",
                                              "format": "double"
                                            },
                                            "discreteVariance": {
                                              "type": "number",
                                              "description": "The variance of the datapoint values.",
                                              "format": "double"
                                            },
                                            "totalVariation": {
                                              "type": "number",
                                              "description": "The total variation of the interpolated underlying function.",
                                              "format": "double"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "oneOf": [
                              {
                                "allOf": [
                                  {
                                    "required": [
                                      "id"
                                    ],
                                    "properties": {
                                      "id": {
                                        "description": "Id of the timeseries the datapoints belong to",
                                        "format": "int64",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991
                                      },
                                      "externalId": {
                                        "type": "string",
                                        "description": "External id of the timeseries the datapoints belong to."
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "datapoints",
                                      "isString"
                                    ],
                                    "properties": {
                                      "isString": {
                                        "description": "Whether the time series is string valued or not.",
                                        "type": "boolean"
                                      },
                                      "datapoints": {
                                        "type": "array",
                                        "description": "The list of datapoints",
                                        "items": {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "timestamp"
                                              ],
                                              "properties": {
                                                "timestamp": {
                                                  "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                                  "type": "integer",
                                                  "minimum": 0,
                                                  "format": "int64"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "required": [
                                                "value"
                                              ],
                                              "properties": {
                                                "value": {
                                                  "type": "string",
                                                  "description": "The data value."
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "required": [
                                      "id"
                                    ],
                                    "properties": {
                                      "id": {
                                        "description": "Id of the timeseries the datapoints belong to",
                                        "format": "int64",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991
                                      },
                                      "externalId": {
                                        "type": "string",
                                        "description": "External id of the timeseries the datapoints belong to."
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "datapoints",
                                      "isString"
                                    ],
                                    "properties": {
                                      "isString": {
                                        "description": "Whether the time series is string valued or not.",
                                        "type": "boolean"
                                      },
                                      "datapoints": {
                                        "type": "array",
                                        "description": "The list of datapoints",
                                        "items": {
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "required": [
                                                "timestamp"
                                              ],
                                              "properties": {
                                                "timestamp": {
                                                  "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                                  "type": "integer",
                                                  "minimum": 0,
                                                  "format": "int64"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "required": [
                                                "value"
                                              ],
                                              "properties": {
                                                "value": {
                                                  "type": "number",
                                                  "description": "The data value."
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            ],
                            "discriminator": {
                              "propertyName": "isString",
                              "mapping": {
                                "true": "#/components/schemas/DatapointsGetStringDatapoint",
                                "false": "#/components/schemas/DatapointsGetDoubleDatapoint"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Names not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "notFound": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are not found",
                              "items": {
                                "description": "Ids or ExternalIds which are not found",
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data/latest": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Retrieve the latest data point in a time series",
        "description": "Retrieves the single latest data point in a time series.",
        "operationId": "getLatest",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of get latest queries to perform.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "description": "List of latest queries",
                    "minItems": 1,
                    "maxItems": 100,
                    "items": {
                      "type": "object",
                      "description": "Describes latest query",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "allOf": [
                            {
                              "properties": {
                                "before": {
                                  "type": "string",
                                  "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                                  "default": "now"
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "allOf": [
                            {
                              "properties": {
                                "before": {
                                  "type": "string",
                                  "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                                  "default": "now"
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of responses. Each response contains a list containing a single point, the most recent datapoint, or an empty list if no points found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "List of responses. Order matches the requests order.",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "Id of the timeseries the datapoints belong to",
                                    "format": "int64",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "description": "External id of the timeseries the datapoints belong to."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "datapoints",
                                  "isString"
                                ],
                                "properties": {
                                  "isString": {
                                    "description": "Whether the time series is string valued or not.",
                                    "type": "boolean"
                                  },
                                  "datapoints": {
                                    "type": "array",
                                    "description": "The list of datapoints",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "timestamp"
                                          ],
                                          "properties": {
                                            "timestamp": {
                                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                              "type": "integer",
                                              "minimum": 0,
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "value"
                                          ],
                                          "properties": {
                                            "value": {
                                              "type": "string",
                                              "description": "The data value."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "Id of the timeseries the datapoints belong to",
                                    "format": "int64",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 9007199254740991
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "description": "External id of the timeseries the datapoints belong to."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "datapoints",
                                  "isString"
                                ],
                                "properties": {
                                  "isString": {
                                    "description": "Whether the time series is string valued or not.",
                                    "type": "boolean"
                                  },
                                  "datapoints": {
                                    "type": "array",
                                    "description": "The list of datapoints",
                                    "items": {
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "required": [
                                            "timestamp"
                                          ],
                                          "properties": {
                                            "timestamp": {
                                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                              "type": "integer",
                                              "minimum": 0,
                                              "format": "int64"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "required": [
                                            "value"
                                          ],
                                          "properties": {
                                            "value": {
                                              "type": "number",
                                              "description": "The data value."
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ],
                        "discriminator": {
                          "propertyName": "isString",
                          "mapping": {
                            "true": "#/components/schemas/DatapointsGetStringDatapoint",
                            "false": "#/components/schemas/DatapointsGetDoubleDatapoint"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The time series does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "notFound": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are not found",
                              "items": {
                                "description": "Ids or ExternalIds which are not found",
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/timeseries/data/delete": {
      "post": {
        "tags": [
          "Time series"
        ],
        "summary": "Deletes points",
        "description": "Perform a set of delete requests",
        "operationId": "deleteDatapoints",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of deletes to perform.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "description": "List of delete filters",
                    "minItems": 1,
                    "maxItems": 10000,
                    "items": {
                      "type": "object",
                      "description": "Select timeseries and datapoints to delete.",
                      "oneOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "allOf": [
                            {
                              "required": [
                                "inclusiveBegin"
                              ],
                              "properties": {
                                "inclusiveBegin": {
                                  "description": "The timestamp of first datapoint to delete",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                },
                                "exclusiveEnd": {
                                  "description": "If set, the timestamp of first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "properties": {
                                "id": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "required": [
                            "externalId"
                          ],
                          "allOf": [
                            {
                              "required": [
                                "inclusiveBegin"
                              ],
                              "properties": {
                                "inclusiveBegin": {
                                  "description": "The timestamp of first datapoint to delete",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                },
                                "exclusiveEnd": {
                                  "description": "If set, the timestamp of first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                                  "type": "integer",
                                  "minimum": 0,
                                  "format": "int64"
                                }
                              }
                            },
                            {
                              "properties": {
                                "externalId": {
                                  "description": "External Id provided by client. Should be unique within the project.",
                                  "type": "string",
                                  "maxLength": 255
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Ids not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "description": "Error details",
                      "required": [
                        "code",
                        "message"
                      ],
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32"
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message"
                        },
                        "extra": {
                          "type": "object",
                          "description": "Additional data",
                          "properties": {
                            "notFound": {
                              "uniqueItems": true,
                              "type": "array",
                              "description": "Items which are not found",
                              "items": {
                                "description": "Ids or ExternalIds which are not found",
                                "oneOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Javascript friendly internal ID given to the object.",
                                        "type": "integer",
                                        "minimum": 1,
                                        "maximum": 9007199254740991,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "externalId": {
                                        "description": "External Id provided by client. Should be unique within the project.",
                                        "type": "string",
                                        "maxLength": 255
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "TimeseriesAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "List all databases",
        "operationId": "getDBs",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of databases to be returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 1000,
              "default": 25
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for paging through the results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of databases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of a database."
                          }
                        },
                        "description": "A NoSQL database to store customer data."
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:LIST"
        ]
      },
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Create databases",
        "description": "Create databases in a project. It is possible to post a maximum of 1000 databases per request.",
        "operationId": "createDBs",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of names of databases to be created.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of a database."
                        }
                      },
                      "description": "A NoSQL database to store customer data."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created databases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of a database."
                          }
                        },
                        "description": "A NoSQL database to store customer data."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/delete": {
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Delete databases",
        "operationId": "deleteDBs",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of names of the databases to be deleted.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of a database."
                        }
                      },
                      "description": "A NoSQL database to store customer data."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "List all tables in a database",
        "operationId": "getTables",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "The name of a database to retrieve tables from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on the number of tables to be returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 1000,
              "default": 25
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for paging through the results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tables in the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the table"
                          }
                        },
                        "description": "A NoSQL database table to store customer data"
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:LIST"
        ]
      },
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Create tables in a database",
        "description": "Create tables in a database. It is possible to post a maximum of 1000 tables per request.",
        "operationId": "createTables",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database to create tables in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ensureParent",
            "in": "query",
            "description": "Create database if it doesn't exist already",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "List of tables to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of the table"
                        }
                      },
                      "description": "A NoSQL database table to store customer data"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created tables.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the table"
                          }
                        },
                        "description": "A NoSQL database table to store customer data"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/delete": {
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Delete tables in a database",
        "operationId": "deleteTables",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database to delete tables in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of tables to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of the table"
                        }
                      },
                      "description": "A NoSQL database table to store customer data"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/{tableName}/rows": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "Retrieve all rows from a table",
        "operationId": "getRows",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 10000,
              "default": 25
            }
          },
          {
            "name": "columns",
            "in": "query",
            "description": "Ordered list of column keys, separated by commas. Leave empty for all, use single comma to retrieve only row keys.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for paging through rows.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minLastUpdatedTime",
            "in": "query",
            "description": "It is an exclusive filter, specifed as the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          },
          {
            "name": "maxLastUpdatedTime",
            "in": "query",
            "description": "It is an inclusive filter, specifed as the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "schema": {
              "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
              "type": "integer",
              "minimum": 0,
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rows returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "columns",
                          "key",
                          "lastUpdatedTime"
                        ],
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "Unique row key"
                          },
                          "columns": {
                            "type": "object",
                            "description": "Row data stored as a JSON object."
                          },
                          "lastUpdatedTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "columnHeaders": {
                      "type": "array",
                      "description": "Headers for the different columns in the response.",
                      "items": {
                        "type": "string",
                        "description": "Headers for the different columns in the response."
                      }
                    },
                    "rows": {
                      "type": "array",
                      "description": "Rows of column values, in same order as columnHeaders.",
                      "items": {
                        "type": "array",
                        "description": "Rows of column values, in same order as columnHeaders.",
                        "items": {
                          "type": "object",
                          "description": "Rows of column values, in same order as columnHeaders."
                        }
                      }
                    }
                  },
                  "description": "Raw row result written in CSV format, with column columnHeaders."
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:READ"
        ]
      },
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Insert rows into a table",
        "description": "Insert rows into a table. It is possible to post a maximum of 10000 rows per request.\nIt will replace the columns of an existing row if the rowKey already exists.\n\nThe rowKey is limited to 1024 characters which also includes Unicode characters.\nThe maximum size of columns are 5 MiB, however the maximum size of one column name and value is 2621440 characters each.\nIf you want to store huge amount of data per row or column we recommend using the Files API to upload blobs, then reference it from the Raw row.\n\nThe columns object is a key value object, where the key corresponds to the column name while the value is the column value.\nIt supports all the valid types of values in JSON, so number, string, array, and even nested JSON structure (see payload example to the right).\n",
        "operationId": "postRows",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ensureParent",
            "in": "query",
            "description": "Create database/table if it doesn't exist already",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "List of rows to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "columns",
                        "key"
                      ],
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Unique row key"
                        },
                        "columns": {
                          "type": "object",
                          "description": "Row data stored as a JSON object."
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "items": {
                  "key": [
                    "some rowKey"
                  ],
                  "columns": {
                    "some int-col": 10,
                    "some string-col": "string example",
                    "some json-col": {
                      "test": {
                        "foo": "nested"
                      }
                    },
                    "some array-col": [
                      0,
                      1,
                      3,
                      4
                    ]
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:WRITE"
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/{tableName}/rows/{rowKey}": {
      "get": {
        "tags": [
          "Raw"
        ],
        "summary": "Retrieve a single row from a table",
        "operationId": "getRow",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database to retrieve the row from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table to retrieve the row from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowKey",
            "in": "path",
            "description": "Row key of the row to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single row from the raw database table with the specified rowKey.",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "columns",
                    "key",
                    "lastUpdatedTime"
                  ],
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Unique row key"
                    },
                    "columns": {
                      "type": "object",
                      "description": "Row data stored as a JSON object."
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:READ"
        ]
      }
    },
    "/api/v1/projects/{project}/raw/dbs/{dbName}/tables/{tableName}/rows/delete": {
      "post": {
        "tags": [
          "Raw"
        ],
        "summary": "Delete rows in a table",
        "operationId": "deleteRows",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dbName",
            "in": "path",
            "description": "Name of the database containing the rows.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table containing the rows.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Keys to the rows to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "key"
                      ],
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Unique row key"
                        }
                      },
                      "description": "A row key"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "RawAcl:WRITE"
        ]
      }
    },
    "/login/status": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Verify login status",
        "description": "Returns the authentication information about the asking entity.",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "Information about the current logged in entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LoginStatusResponse",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "loggedIn",
                        "project",
                        "projectId"
                      ],
                      "properties": {
                        "user": {
                          "type": "string",
                          "description": "The user principal, e.g john.doe@corporation.com.",
                          "example": "tim@apple.com"
                        },
                        "loggedIn": {
                          "type": "boolean",
                          "description": "Whether the user is logged in or not.",
                          "example": true
                        },
                        "project": {
                          "type": "string",
                          "description": "Name of project user belongs to",
                          "example": "tesla"
                        },
                        "projectId": {
                          "type": "integer",
                          "description": "Internal project id of the project",
                          "format": "int64",
                          "example": 137238723719
                        },
                        "apiKeyId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
                        }
                      },
                      "description": "Represents the current authentication status of the request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login/redirect": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Login with redirect",
        "description": "Redirects to a login URL. This endpoint is typically used by front-end services acting on behalf of users to log them in.",
        "operationId": "redirect-url",
        "parameters": [
          {
            "name": "project",
            "in": "query",
            "description": "The project to login to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The url to send the user to after the login is successful.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "errorRedirectUrl",
            "in": "query",
            "description": "The url to send the user to if the login fails or is aborted. If this is not passed in, the value of the redirectUrl will be used.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [],
        "responses": {
          "303": {
            "description": "Redirection to the login url"
          }
        }
      }
    },
    "/login/token": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Validate a JSON Web Token",
        "description": "Checks if a JWT ([JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token)) is valid.",
        "operationId": "getTokenStatus",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "description": "A JWT acquired from Cognite",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns information on whether the token is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "token",
                        "valid",
                        "expired"
                      ],
                      "properties": {
                        "token": {
                          "type": "string",
                          "description": "The token that was sent for validation",
                          "example": "ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhY2NvdW50X3R5cGUiOiAidXNlcl9hY2NvdW50IiwKICAicHJvamVjdF9pZCI6IDI5MzgyOTU3MjA2NzUzNTMsCiAgInVuaXF1ZV9uYW1lIjogIm1hcnRpbi5yb2VkQGNvZ25pdGUuY29tIiwKICAic2Vzc2lvblRpY2tldCI6ICJDQUlTSkdKa04yUmxZMkUyTFRkbFltSXROR1E1TlMxaU16QmtMVFF4T1dRMFlUSTVaRGRqTkJvRFFWQkpJa01hRjIxaGNuUnBiaTV5YjJWa1FHTnZaMjVwZEdVdVkyOXRJSm1RdE1YVWk1d0ZLaC9vbjQ3QzE5Uld0TXZQMkpYTGd3YTVrNm0wbHMvS0NMVHB5SWFDcEpBTEtnTkJVRWtxREVGVlZFZ3RVMFZTVmtsRFJUSU1DTnlkdCtVRkVNQ2c0ck1CT2d3STZMSzM1UVVRd0tEaXN3RkNEQWpjbmJmbEJSREFvT0t6QVVvTUlnb0lBUklDQUFFYUFnb0FTZzhxRFFnQkVnVUFBUUlEQkJvQ0dnQktDeW9KQ0FFU0FRQWFBaW9BU2d3eUNnZ0JFZ0lBQVJvQ0NnQktERG9LQ0FFU0FnQUJHZ0lLQUVvTVFnb0lBUklDQUFFYUFnb0FTZzlLRFFnQkVnVUFBUUlFQXhvQ0dnQktERklLQ0FFU0FnRURHZ0lhQUVvT1dnd0lBUklFQVFRQ0FCb0NDZ0JLRFdJTENBRVNBd0lCQUJvQ0NnQktER29LQ0FFU0FnQUJHZ0lLQUVvTGNna0lBUklCQUJvQ0tnQktEM0lOQ0FFU0JRQUJBZ01FR2dJYUFFb09lZ3dJQVJJRUFBRUNBeG9DR2dCS0RZSUJDZ2dCRWdJQUFSb0NDZ0JLRFlvQkNnZ0JFZ0lBQVJvQ0NnQktEcElCQ3dnQkVnTUFBZ0VhQWdvQVNncWFBUWNTQVFBYUFob0EiLAogICJzaWduaW5nX2tleSI6ICIyZTAyMGM3NS1kODcwLTQxNWItYTY2Ny02OGZiODk0MTgwZjEiLAogICJleHBpcmVfdGltZSI6IDE1NTQ4OTcyNTYKfQ==.WNTT7qvdj4KUbIwo8x4Upq3Ki/X9rd0lqMbcIlLCDwjqrH2OH4jc/CgE/Uk9z9HeCCSWDDwJYGXOiIc+bZGQdzuYDPd5LYN8SaT1bDfa5mkAaPpk7f0KSBqp5FceNWSqjh1/mevX0OhNMbB6z5KXU9t7EDgNFWgMT2zUpfll0nNYhAgJBU1MeGtxVZcRLIP2iAEmFR4XlLlxc+bi0SxGGUZHPn2AQq5jitbJAdjnwf5KCr+2HH1Dww75q7qiGZ7NsO7ipTGdO/KaaTvlLp90k5jT4a7fPqCuMWS25NgJK4dQIEqtCvHaqnMV1Q+G6WtdEy+Qcx581H8J3A2LV1pQYA=="
                        },
                        "valid": {
                          "type": "boolean",
                          "description": "Whether this token is valid"
                        },
                        "expired": {
                          "type": "boolean",
                          "description": "Whether this token has expired"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/login/userinfo": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Obtain user information",
        "operationId": "userinfo",
        "description": "Ask this with any valid credentials to obtain information about the current authenticated entity. The response is a decoded idToken.",
        "responses": {
          "200": {
            "description": "User information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "sub",
                    "project_name",
                    "groups",
                    "signing_key",
                    "exp"
                  ],
                  "properties": {
                    "sub": {
                      "type": "string",
                      "description": "The subject of the token",
                      "example": "tim@apple.com"
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Which CDF project the subject is in",
                      "example": "apple"
                    },
                    "groups": {
                      "type": "array",
                      "description": "Which groups (by id) the subject is in",
                      "items": {
                        "type": "integer",
                        "description": "Which groups (by id) the subject is in",
                        "format": "int64"
                      },
                      "example": [
                        123982398,
                        123981283723,
                        7283273927
                      ]
                    },
                    "signing_key": {
                      "type": "string",
                      "description": "The signing key id",
                      "example": "a769f8ef-d5e3-4cf7-b914-2a6de189d942"
                    },
                    "exp": {
                      "type": "integer",
                      "description": "The expiration time of the token in seconds (unix)",
                      "format": "int64",
                      "example": 1554897484
                    }
                  },
                  "description": "An ID JWT token"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "Logout"
        ],
        "summary": "Logout",
        "description": "Invalidates a session and returns the authentication status of the asking entity.",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Information about the current logged in entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LoginStatusResponse",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": [
                        "user",
                        "loggedIn",
                        "project",
                        "projectId"
                      ],
                      "properties": {
                        "user": {
                          "type": "string",
                          "description": "The user principal, e.g john.doe@corporation.com.",
                          "example": "tim@apple.com"
                        },
                        "loggedIn": {
                          "type": "boolean",
                          "description": "Whether the user is logged in or not.",
                          "example": true
                        },
                        "project": {
                          "type": "string",
                          "description": "Name of project user belongs to",
                          "example": "tesla"
                        },
                        "projectId": {
                          "type": "integer",
                          "description": "Internal project id of the project",
                          "format": "int64",
                          "example": 137238723719
                        },
                        "apiKeyId": {
                          "type": "integer",
                          "format": "int64",
                          "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
                        }
                      },
                      "description": "Represents the current authentication status of the request"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/logout/url": {
      "get": {
        "tags": [
          "Logout"
        ],
        "summary": "Retrieve a logout url",
        "description": "Get logout url of the given project.",
        "operationId": "logoutUrl",
        "parameters": [
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "The url to send the user to after the logout is successful. If no url is passed, you will end up at the IDPs log out page.",
            "schema": {
              "type": "string"
            },
            "example": "https://mysite.com/loggedout"
          }
        ],
        "responses": {
          "200": {
            "description": "Logout URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "data"
                  ],
                  "properties": {
                    "data": {
                      "title": "URL Response",
                      "description": "Object containing the log out URL",
                      "type": "object",
                      "required": [
                        "url"
                      ],
                      "properties": {
                        "url": {
                          "type": "string",
                          "example": "https://accounts.google.com/logout",
                          "description": "The url to send the user to in order to log out"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{project}/groups": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List groups",
        "description": "Retrieves a list of groups the asking service account is a member of. Service accounts with groups:list capability can optionally ask for all groups in a project.",
        "operationId": "getGroups",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Whether to get all groups, only available with the groups:list acl.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "isDeleted"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the group",
                            "example": "Production Engineers"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
                            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                          },
                          "capabilities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "groupsAcl",
                                  "properties": {
                                    "groupsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Group:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all groups",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "groups the current user is in",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Group:Scope"
                                        }
                                      },
                                      "title": "Acl:Group"
                                    }
                                  }
                                },
                                {
                                  "title": "assetsAcl",
                                  "properties": {
                                    "assetsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Asset:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Asset:Scope"
                                        }
                                      },
                                      "title": "Acl:Asset"
                                    }
                                  }
                                },
                                {
                                  "title": "eventsAcl",
                                  "properties": {
                                    "eventsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Event:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Event:Scope"
                                        }
                                      },
                                      "title": "Acl:Event"
                                    }
                                  }
                                },
                                {
                                  "title": "filesAcl",
                                  "properties": {
                                    "filesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "File:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "File:Scope"
                                        }
                                      },
                                      "title": "Acl:File"
                                    }
                                  }
                                },
                                {
                                  "title": "usersAcl",
                                  "properties": {
                                    "usersAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "User:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all users",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "the current user making the request",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "User:Scope"
                                        }
                                      },
                                      "title": "Acl:User"
                                    }
                                  }
                                },
                                {
                                  "title": "projectsAcl",
                                  "properties": {
                                    "projectsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE"
                                            ],
                                            "default": "LIST",
                                            "title": "Project:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Project:Scope"
                                        }
                                      },
                                      "title": "Acl:Project"
                                    }
                                  }
                                },
                                {
                                  "title": "securityCategoriesAcl",
                                  "properties": {
                                    "securityCategoriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "MEMBEROF",
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "MEMBEROF",
                                            "title": "SecurityCategory:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "SecurityCategory:Scope"
                                        }
                                      },
                                      "title": "Acl:SecurityCategory"
                                    }
                                  }
                                },
                                {
                                  "title": "rawAcl",
                                  "properties": {
                                    "rawAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Raw:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Raw:Scope"
                                        }
                                      },
                                      "title": "Acl:Raw"
                                    }
                                  }
                                },
                                {
                                  "title": "timeSeriesAcl",
                                  "properties": {
                                    "timeSeriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Timeseries:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "assetIdScope": {
                                                  "type": "object",
                                                  "properties": {
                                                    "subtreeIds": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "title": "root asset id (subtrees)"
                                                    }
                                                  },
                                                  "title": "Scope:AssetIdScope"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Timeseries:Scope"
                                        }
                                      },
                                      "title": "Acl:Timeseries"
                                    }
                                  }
                                },
                                {
                                  "title": "apikeysAcl",
                                  "properties": {
                                    "apikeysAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Apikey:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "apikeys the user making the request has",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Apikey:Scope"
                                        }
                                      },
                                      "title": "Acl:Apikey"
                                    }
                                  }
                                },
                                {
                                  "title": "threedAcl",
                                  "properties": {
                                    "threedAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "READ",
                                            "title": "Threed:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Threed:Scope"
                                        }
                                      },
                                      "title": "Acl:Threed"
                                    }
                                  }
                                },
                                {
                                  "title": "sequencesAcl",
                                  "properties": {
                                    "sequencesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Sequences:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Sequences:Scope"
                                        }
                                      },
                                      "title": "Acl:Sequences"
                                    }
                                  }
                                },
                                {
                                  "title": "analyticsAcl",
                                  "properties": {
                                    "analyticsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "EXECUTE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Analytics:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Analytics:Scope"
                                        }
                                      },
                                      "title": "Acl:Analytics"
                                    }
                                  }
                                }
                              ]
                            },
                            "title": "Capability"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "default": false
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "GroupsAcl:LIST"
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create groups",
        "description": "Creates one or more named groups, each with a set of capabilities.",
        "operationId": "createGroups",
        "requestBody": {
          "description": "List of groups to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the group",
                          "example": "Production Engineers"
                        },
                        "sourceId": {
                          "type": "string",
                          "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
                          "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                        },
                        "capabilities": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "oneOf": [
                              {
                                "title": "groupsAcl",
                                "properties": {
                                  "groupsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "READ",
                                            "CREATE",
                                            "UPDATE",
                                            "DELETE"
                                          ],
                                          "default": "LIST",
                                          "title": "Group:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "title": "all groups",
                                                "type": "object"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "currentuserscope": {
                                                "title": "groups the current user is in",
                                                "type": "object"
                                              }
                                            }
                                          }
                                        ],
                                        "title": "Group:Scope"
                                      }
                                    },
                                    "title": "Acl:Group"
                                  }
                                }
                              },
                              {
                                "title": "assetsAcl",
                                "properties": {
                                  "assetsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Asset:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Asset:Scope"
                                      }
                                    },
                                    "title": "Acl:Asset"
                                  }
                                }
                              },
                              {
                                "title": "eventsAcl",
                                "properties": {
                                  "eventsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Event:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Event:Scope"
                                      }
                                    },
                                    "title": "Acl:Event"
                                  }
                                }
                              },
                              {
                                "title": "filesAcl",
                                "properties": {
                                  "filesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "File:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "File:Scope"
                                      }
                                    },
                                    "title": "Acl:File"
                                  }
                                }
                              },
                              {
                                "title": "usersAcl",
                                "properties": {
                                  "usersAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "CREATE",
                                            "DELETE"
                                          ],
                                          "default": "LIST",
                                          "title": "User:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "title": "all users",
                                                "type": "object"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "currentuserscope": {
                                                "title": "the current user making the request",
                                                "type": "object"
                                              }
                                            }
                                          }
                                        ],
                                        "title": "User:Scope"
                                      }
                                    },
                                    "title": "Acl:User"
                                  }
                                }
                              },
                              {
                                "title": "projectsAcl",
                                "properties": {
                                  "projectsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "READ",
                                            "CREATE",
                                            "UPDATE"
                                          ],
                                          "default": "LIST",
                                          "title": "Project:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Project:Scope"
                                      }
                                    },
                                    "title": "Acl:Project"
                                  }
                                }
                              },
                              {
                                "title": "securityCategoriesAcl",
                                "properties": {
                                  "securityCategoriesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "MEMBEROF",
                                            "LIST",
                                            "CREATE",
                                            "DELETE"
                                          ],
                                          "default": "MEMBEROF",
                                          "title": "SecurityCategory:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "SecurityCategory:Scope"
                                      }
                                    },
                                    "title": "Acl:SecurityCategory"
                                  }
                                }
                              },
                              {
                                "title": "rawAcl",
                                "properties": {
                                  "rawAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE",
                                            "LIST"
                                          ],
                                          "default": "READ",
                                          "title": "Raw:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Raw:Scope"
                                      }
                                    },
                                    "title": "Acl:Raw"
                                  }
                                }
                              },
                              {
                                "title": "timeSeriesAcl",
                                "properties": {
                                  "timeSeriesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Timeseries:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "type": "object",
                                                "title": "Scope:All"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "assetIdScope": {
                                                "type": "object",
                                                "properties": {
                                                  "subtreeIds": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string",
                                                      "format": "uint64"
                                                    },
                                                    "title": "root asset id (subtrees)"
                                                  }
                                                },
                                                "title": "Scope:AssetIdScope"
                                              }
                                            }
                                          }
                                        ],
                                        "title": "Timeseries:Scope"
                                      }
                                    },
                                    "title": "Acl:Timeseries"
                                  }
                                }
                              },
                              {
                                "title": "apikeysAcl",
                                "properties": {
                                  "apikeysAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "LIST",
                                            "CREATE",
                                            "DELETE"
                                          ],
                                          "default": "LIST",
                                          "title": "Apikey:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "all": {
                                                "type": "object",
                                                "title": "Scope:All"
                                              }
                                            }
                                          },
                                          {
                                            "properties": {
                                              "currentuserscope": {
                                                "title": "apikeys the user making the request has",
                                                "type": "object"
                                              }
                                            }
                                          }
                                        ],
                                        "title": "Apikey:Scope"
                                      }
                                    },
                                    "title": "Acl:Apikey"
                                  }
                                }
                              },
                              {
                                "title": "threedAcl",
                                "properties": {
                                  "threedAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "CREATE",
                                            "UPDATE",
                                            "DELETE"
                                          ],
                                          "default": "READ",
                                          "title": "Threed:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Threed:Scope"
                                      }
                                    },
                                    "title": "Acl:Threed"
                                  }
                                }
                              },
                              {
                                "title": "sequencesAcl",
                                "properties": {
                                  "sequencesAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "WRITE"
                                          ],
                                          "default": "READ",
                                          "title": "Sequences:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Sequences:Scope"
                                      }
                                    },
                                    "title": "Acl:Sequences"
                                  }
                                }
                              },
                              {
                                "title": "analyticsAcl",
                                "properties": {
                                  "analyticsAcl": {
                                    "type": "object",
                                    "required": [
                                      "actions",
                                      "scope"
                                    ],
                                    "properties": {
                                      "actions": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "enum": [
                                            "READ",
                                            "EXECUTE",
                                            "LIST"
                                          ],
                                          "default": "READ",
                                          "title": "Analytics:Action"
                                        }
                                      },
                                      "scope": {
                                        "type": "object",
                                        "properties": {
                                          "all": {
                                            "type": "object",
                                            "title": "Scope:All"
                                          }
                                        },
                                        "title": "Analytics:Scope"
                                      }
                                    },
                                    "title": "Acl:Analytics"
                                  }
                                }
                              }
                            ]
                          },
                          "title": "Capability"
                        }
                      },
                      "description": "A specification for creating a new group"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of the created groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "id",
                          "isDeleted"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the group",
                            "example": "Production Engineers"
                          },
                          "sourceId": {
                            "type": "string",
                            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
                            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                          },
                          "capabilities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "title": "groupsAcl",
                                  "properties": {
                                    "groupsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Group:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all groups",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "groups the current user is in",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Group:Scope"
                                        }
                                      },
                                      "title": "Acl:Group"
                                    }
                                  }
                                },
                                {
                                  "title": "assetsAcl",
                                  "properties": {
                                    "assetsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Asset:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Asset:Scope"
                                        }
                                      },
                                      "title": "Acl:Asset"
                                    }
                                  }
                                },
                                {
                                  "title": "eventsAcl",
                                  "properties": {
                                    "eventsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Event:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Event:Scope"
                                        }
                                      },
                                      "title": "Acl:Event"
                                    }
                                  }
                                },
                                {
                                  "title": "filesAcl",
                                  "properties": {
                                    "filesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "File:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "File:Scope"
                                        }
                                      },
                                      "title": "Acl:File"
                                    }
                                  }
                                },
                                {
                                  "title": "usersAcl",
                                  "properties": {
                                    "usersAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "User:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "title": "all users",
                                                  "type": "object"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "the current user making the request",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "User:Scope"
                                        }
                                      },
                                      "title": "Acl:User"
                                    }
                                  }
                                },
                                {
                                  "title": "projectsAcl",
                                  "properties": {
                                    "projectsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "READ",
                                              "CREATE",
                                              "UPDATE"
                                            ],
                                            "default": "LIST",
                                            "title": "Project:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Project:Scope"
                                        }
                                      },
                                      "title": "Acl:Project"
                                    }
                                  }
                                },
                                {
                                  "title": "securityCategoriesAcl",
                                  "properties": {
                                    "securityCategoriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "MEMBEROF",
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "MEMBEROF",
                                            "title": "SecurityCategory:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "SecurityCategory:Scope"
                                        }
                                      },
                                      "title": "Acl:SecurityCategory"
                                    }
                                  }
                                },
                                {
                                  "title": "rawAcl",
                                  "properties": {
                                    "rawAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Raw:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Raw:Scope"
                                        }
                                      },
                                      "title": "Acl:Raw"
                                    }
                                  }
                                },
                                {
                                  "title": "timeSeriesAcl",
                                  "properties": {
                                    "timeSeriesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Timeseries:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "assetIdScope": {
                                                  "type": "object",
                                                  "properties": {
                                                    "subtreeIds": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string",
                                                        "format": "uint64"
                                                      },
                                                      "title": "root asset id (subtrees)"
                                                    }
                                                  },
                                                  "title": "Scope:AssetIdScope"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Timeseries:Scope"
                                        }
                                      },
                                      "title": "Acl:Timeseries"
                                    }
                                  }
                                },
                                {
                                  "title": "apikeysAcl",
                                  "properties": {
                                    "apikeysAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "LIST",
                                              "CREATE",
                                              "DELETE"
                                            ],
                                            "default": "LIST",
                                            "title": "Apikey:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "all": {
                                                  "type": "object",
                                                  "title": "Scope:All"
                                                }
                                              }
                                            },
                                            {
                                              "properties": {
                                                "currentuserscope": {
                                                  "title": "apikeys the user making the request has",
                                                  "type": "object"
                                                }
                                              }
                                            }
                                          ],
                                          "title": "Apikey:Scope"
                                        }
                                      },
                                      "title": "Acl:Apikey"
                                    }
                                  }
                                },
                                {
                                  "title": "threedAcl",
                                  "properties": {
                                    "threedAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "CREATE",
                                              "UPDATE",
                                              "DELETE"
                                            ],
                                            "default": "READ",
                                            "title": "Threed:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Threed:Scope"
                                        }
                                      },
                                      "title": "Acl:Threed"
                                    }
                                  }
                                },
                                {
                                  "title": "sequencesAcl",
                                  "properties": {
                                    "sequencesAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "WRITE"
                                            ],
                                            "default": "READ",
                                            "title": "Sequences:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Sequences:Scope"
                                        }
                                      },
                                      "title": "Acl:Sequences"
                                    }
                                  }
                                },
                                {
                                  "title": "analyticsAcl",
                                  "properties": {
                                    "analyticsAcl": {
                                      "type": "object",
                                      "required": [
                                        "actions",
                                        "scope"
                                      ],
                                      "properties": {
                                        "actions": {
                                          "type": "array",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "READ",
                                              "EXECUTE",
                                              "LIST"
                                            ],
                                            "default": "READ",
                                            "title": "Analytics:Action"
                                          }
                                        },
                                        "scope": {
                                          "type": "object",
                                          "properties": {
                                            "all": {
                                              "type": "object",
                                              "title": "Scope:All"
                                            }
                                          },
                                          "title": "Analytics:Scope"
                                        }
                                      },
                                      "title": "Acl:Analytics"
                                    }
                                  }
                                }
                              ]
                            },
                            "title": "Capability"
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "default": false
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "GroupsAcl:CREATE"
        ]
      }
    },
    "/api/v1/projects/{project}/groups/delete": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete groups",
        "description": "Deletes the groups with the given IDs.",
        "operationId": "deleteGroups",
        "requestBody": {
          "description": "List of group ids to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "GroupsAcl:DELETE"
        ]
      }
    },
    "/api/v1/projects/{project}/groups/{groupId}/serviceaccounts": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List service accounts in a group",
        "description": "Retrieve a list of service accounts that are members of the group with the given ID.",
        "operationId": "getMembersOfGroups",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "id of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of service accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "List of service accounts",
                      "items": {
                        "required": [
                          "name",
                          "id",
                          "groups",
                          "isDeleted"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the service account",
                            "example": "some-internal-service@apple.com",
                            "title": "name"
                          },
                          "groups": {
                            "type": "array",
                            "description": "List of group ids",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "example": [
                              238712387,
                              1283712837,
                              1238712387
                            ]
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "example": false,
                            "description": "If this service account has been logically deleted"
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Time of deletion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "GroupsAcl:READ"
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add service accounts to a group",
        "description": "Grant the service accounts with the given IDs membership in a group. This operation is not idempotent; If any of the given users is already a member of the group, the operation will fail.",
        "operationId": "addServiceAccountsToGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "id of the group",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "ids of service accounts to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response."
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "GroupsAcl:UPDATE"
        ]
      }
    },
    "/api/v1/projects/{project}/groups/{groupId}/serviceaccounts/remove": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove service accounts from a group",
        "description": "Revoke membership in a group from the given service accounts.",
        "operationId": "removeServiceAccountsFromGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "description": "id of the group",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "List of service account ids to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response."
          }
        },
        "x-capability": [
          "GroupsAcl:UPDATE"
        ]
      }
    },
    "/api/v1/projects/{project}": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve a project",
        "description": "Retrieves information about a project given the project name.",
        "operationId": "getProject",
        "responses": {
          "200": {
            "description": "Information about the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "urlName"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The display name of the project.",
                      "example": "Open Industrial Data"
                    },
                    "urlName": {
                      "type": "string",
                      "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
                      "example": "publicdata"
                    },
                    "defaultGroupId": {
                      "type": "integer",
                      "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                      "format": "int64",
                      "example": 123871937
                    },
                    "authentication": {
                      "type": "object",
                      "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
                      "properties": {
                        "validDomains": {
                          "type": "array",
                          "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                          "example": [
                            "apple.com",
                            "google.com"
                          ],
                          "items": {
                            "type": "string",
                            "example": "apple.com",
                            "description": "Domain name that can successfully log into your tenant"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ProjectsAcl:READ"
        ]
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a project",
        "description": "Updates the full project. Be careful with this operation, as it will also override any previously set field. This means every call to this endpoint needs to also include the oauth credentials, otherwise they get unset. The urlName property can not be changed.\n",
        "operationId": "putProject",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of projects to update, with new values. Currently only supports one project.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Project object",
                "title": "ProjectObject",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The display name of the project.",
                    "example": "Open Industrial Data"
                  },
                  "defaultGroupId": {
                    "type": "integer",
                    "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                    "format": "int64",
                    "example": 123871937
                  },
                  "authentication": {
                    "type": "object",
                    "description": "Data about how to authenticate and authorize users",
                    "properties": {
                      "azureADConfiguration": {
                        "type": "object",
                        "properties": {
                          "appId": {
                            "type": "string",
                            "description": "Azure application ID. You get this when creating the Azure app."
                          },
                          "appSecret": {
                            "type": "string",
                            "description": "Azure application secret. You get this when creating the Azure app."
                          },
                          "tenantId": {
                            "type": "string",
                            "description": "Azure tenant ID."
                          },
                          "appResourceId": {
                            "type": "string",
                            "description": "Resource to grant access to. This is usually (always?) 00000002-0000-0000-c000-000000000000"
                          }
                        },
                        "description": "Data specific to Azure AD authentication"
                      },
                      "validDomains": {
                        "type": "array",
                        "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                        "example": [
                          "apple.com",
                          "google.com"
                        ],
                        "items": {
                          "type": "string",
                          "example": "apple.com",
                          "description": "Domain name that can successfully log into your tenant"
                        }
                      },
                      "oAuth2Configuration": {
                        "type": "object",
                        "properties": {
                          "loginUrl": {
                            "type": "string",
                            "description": "Login URL of OAuth2 provider. E.g https://accounts.google.com/o/oauth2/v2/auth."
                          },
                          "logoutUrl": {
                            "type": "string",
                            "description": "Logout URL of OAuth2 provider. E.g https://accounts.google.com/Logout."
                          },
                          "tokenUrl": {
                            "type": "string",
                            "description": "URL to get access token from OAuth2 provider. E.g https://www.googleapis.com/oauth2/v4/token."
                          },
                          "clientId": {
                            "type": "string",
                            "description": "Client ID. You probably get this when registering your client with the OAuth2 provider."
                          },
                          "clientSecret": {
                            "type": "string",
                            "description": "Client secret. You probably get this when registering your client with the OAuth2 provider."
                          }
                        },
                        "description": "Data related to generic OAuth2 authentication. Not used for Azure AD"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Information about the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "urlName"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The display name of the project.",
                      "example": "Open Industrial Data"
                    },
                    "urlName": {
                      "type": "string",
                      "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
                      "example": "publicdata"
                    },
                    "defaultGroupId": {
                      "type": "integer",
                      "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                      "format": "int64",
                      "example": 123871937
                    },
                    "authentication": {
                      "type": "object",
                      "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
                      "properties": {
                        "validDomains": {
                          "type": "array",
                          "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                          "example": [
                            "apple.com",
                            "google.com"
                          ],
                          "items": {
                            "type": "string",
                            "example": "apple.com",
                            "description": "Domain name that can successfully log into your tenant"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ProjectsAcl:UPDATE"
        ]
      }
    },
    "/api/v1/projects/{project}/serviceaccounts": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Service accounts"
        ],
        "summary": "List all service accounts in a project",
        "operationId": "getServiceAccounts",
        "responses": {
          "200": {
            "description": "List of service accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "List of service accounts",
                      "items": {
                        "required": [
                          "name",
                          "id",
                          "groups",
                          "isDeleted"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the service account",
                            "example": "some-internal-service@apple.com",
                            "title": "name"
                          },
                          "groups": {
                            "type": "array",
                            "description": "List of group ids",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "example": [
                              238712387,
                              1283712837,
                              1238712387
                            ]
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "example": false,
                            "description": "If this service account has been logically deleted"
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Time of deletion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "UsersAcl:LIST"
        ]
      },
      "post": {
        "tags": [
          "Service accounts"
        ],
        "summary": "Create service accounts",
        "operationId": "createServiceAccounts",
        "requestBody": {
          "description": "List of service accounts to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Unique name of the service account",
                          "example": "some-internal-service@apple.com",
                          "title": "name"
                        },
                        "groups": {
                          "type": "array",
                          "description": "List of group ids",
                          "items": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "example": [
                            238712387,
                            1283712837,
                            1238712387
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List of service accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "List of service accounts",
                      "items": {
                        "required": [
                          "name",
                          "id",
                          "groups",
                          "isDeleted"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Unique name of the service account",
                            "example": "some-internal-service@apple.com",
                            "title": "name"
                          },
                          "groups": {
                            "type": "array",
                            "description": "List of group ids",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "example": [
                              238712387,
                              1283712837,
                              1238712387
                            ]
                          },
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "isDeleted": {
                            "type": "boolean",
                            "example": false,
                            "description": "If this service account has been logically deleted"
                          },
                          "deletedTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Time of deletion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "UsersAcl:CREATE"
        ]
      }
    },
    "/api/v1/projects/{project}/serviceaccounts/delete": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Service accounts"
        ],
        "summary": "Delete service accounts",
        "operationId": "deleteServiceAccounts",
        "requestBody": {
          "description": "List of service account ids to delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "UsersAcl:DELETE"
        ]
      }
    },
    "/api/v1/projects/{project}/apikeys": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "API keys"
        ],
        "summary": "List all API keys",
        "description": "Retrieves a list of all API Keys connected to the current service account in a given project. Administrators can optionally list keys for all or individual service accounts that's not their own.",
        "operationId": "getApiKeys",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "description": "Only available with users:list acl, returns all api keys for this project.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "serviceAccountId",
            "in": "query",
            "description": "Get api keys for a specific service account, only available to admin users.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Whether to include deleted api keys",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ApiKeyResponse",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "ApiKeyObject",
                        "required": [
                          "id",
                          "serviceAccountId",
                          "createdTime",
                          "status"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "example": 91723917823,
                            "description": "id of the api key"
                          },
                          "serviceAccountId": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1283712837,
                            "description": "id of the service account"
                          },
                          "createdTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Created time in unix milliseconds",
                            "example": 1554897980221
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "ACTIVE",
                              "DELETED"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ApikeysAcl:LIST"
        ]
      },
      "post": {
        "tags": [
          "API keys"
        ],
        "summary": "Create API keys",
        "description": "Creates one API key for each of the service accounts.",
        "operationId": "createApiKeys",
        "requestBody": {
          "description": "List of service accounts to create API keys for.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "required": [
                        "serviceAccountId"
                      ],
                      "type": "object",
                      "properties": {
                        "serviceAccountId": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of the created api keys.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "id",
                          "serviceAccountId",
                          "createdTime",
                          "status",
                          "value"
                        ],
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Internal id for the api key"
                          },
                          "serviceAccountId": {
                            "type": "integer",
                            "format": "int64",
                            "description": "id of the service account"
                          },
                          "createdTime": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Time of creating in unix ms"
                          },
                          "status": {
                            "type": "string",
                            "description": "The status of the api key.",
                            "enum": [
                              "ACTIVE",
                              "DELETED"
                            ],
                            "default": "ACTIVE"
                          },
                          "value": {
                            "type": "string",
                            "description": "The api key to be used against the API",
                            "example": "MQ23y87QSDKIJSd87287sdJkjsd"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Some required fields are missing",
                  "required": [
                    "code",
                    "message",
                    "missingFields"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "extra": {
                      "type": "object",
                      "description": "Additional data"
                    },
                    "missingFields": {
                      "uniqueItems": true,
                      "type": "array",
                      "description": "Fields that are missing.",
                      "items": {
                        "type": "object",
                        "description": "Fields that are missing."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "ApikeysAcl:CREATE"
        ]
      }
    },
    "/api/v1/projects/{project}/apikeys/delete": {
      "post": {
        "tags": [
          "API keys"
        ],
        "summary": "Delete API keys",
        "description": "Deletes one or more API keys with the given API key IDs. The key IDs were returned when the keys were created, or can be obtained by listing all API Keys.",
        "operationId": "deleteApiKeys",
        "parameters": [
          {
            "in": "path",
            "name": "project",
            "required": true,
            "description": "Project name",
            "schema": {
              "type": "string",
              "example": "publicdata"
            }
          }
        ],
        "requestBody": {
          "description": "List of ids of api keys to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-capability": [
          "ApikeysAcl:DELETE"
        ]
      }
    },
    "/api/v1/projects/{project}/securitycategories": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "get": {
        "tags": [
          "Security categories"
        ],
        "summary": "List all security categories",
        "operationId": "getSecurityCategories",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort descending or ascending.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor to use for paging through results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Return up to this many results. Maximum is 1000. Default is 25.",
            "schema": {
              "maximum": 1000,
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of security categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name",
                          "id"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the security category",
                            "example": "Guarded by vendor x"
                          },
                          "id": {
                            "type": "integer",
                            "description": "Id of the security category",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next page of results"
                }
              }
            }
          }
        },
        "x-capability": [
          "SecuritycategoriesAcl:LIST"
        ]
      },
      "post": {
        "tags": [
          "Security categories"
        ],
        "summary": "Create security categories",
        "operationId": "createSecurityCategories",
        "requestBody": {
          "description": "List of categories to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "minLength": 1,
                    "items": {
                      "required": [
                        "name"
                      ],
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the security category",
                          "example": "Guarded by vendor x"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of security categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "required": [
                          "name",
                          "id"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the security category",
                            "example": "Guarded by vendor x"
                          },
                          "id": {
                            "type": "integer",
                            "description": "Id of the security category",
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "SecuritycategoriesAcl:CREATE"
        ]
      }
    },
    "/api/v1/projects/{project}/securitycategories/delete": {
      "parameters": [
        {
          "in": "path",
          "name": "project",
          "required": true,
          "description": "Project name",
          "schema": {
            "type": "string",
            "example": "publicdata"
          }
        }
      ],
      "post": {
        "tags": [
          "Security categories"
        ],
        "summary": "Delete security categories",
        "operationId": "deleteSecurityCategories",
        "requestBody": {
          "description": "List of security category IDs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "example": [
                      23872937137,
                      1238712837,
                      128371973
                    ],
                    "minItems": 1,
                    "uniqueItems": true,
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Empty response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The response for a failed request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "object",
                      "required": [
                        "code",
                        "message"
                      ],
                      "description": "Cognite API error",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "format": "int32",
                          "example": 401
                        },
                        "message": {
                          "type": "string",
                          "description": "Error message",
                          "example": "Could not authenticate."
                        },
                        "missing": {
                          "type": "array",
                          "description": "List of lookup objects that have not matched any results.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "duplicated": {
                          "type": "array",
                          "description": "List of objects that violate the uniqueness constraint.",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-capability": [
          "SecuritycategoriesAcl:DELETE"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "description": "An admin can create API keys in the Cognite console.",
        "name": "api-key",
        "in": "header"
      },
      "token": {
        "type": "http",
        "description": "Human users log in via an OpenId/OAuth flow. Use the /login/redirect flow to obtain a bearer access token. Use a header key of 'Authorization' with a value of 'Bearer: $accesstoken'",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "DataLong": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "example": [
              23872937137,
              1238712837,
              128371973
            ],
            "minItems": 1,
            "uniqueItems": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "description": "Cognite API error",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "format": "int32",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Could not authenticate."
          },
          "missing": {
            "type": "array",
            "description": "List of lookup objects that have not matched any results.",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "duplicated": {
            "type": "array",
            "description": "List of objects that violate the uniqueness constraint.",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "ObjectPatch": {
        "type": "object",
        "description": "Object change",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "uniqueItems": true,
                "type": "object",
                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "add": {
                "uniqueItems": true,
                "type": "object",
                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                }
              },
              "remove": {
                "uniqueItems": true,
                "type": "array",
                "description": "Remove the key-value pairs with given keys.",
                "example": [
                  "value1",
                  "value2"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ObjectPatchSet": {
        "type": "object",
        "required": [
          "set"
        ],
        "properties": {
          "set": {
            "uniqueItems": true,
            "type": "object",
            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          }
        }
      },
      "ObjectPatchAddRemove": {
        "type": "object",
        "properties": {
          "add": {
            "uniqueItems": true,
            "type": "object",
            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          },
          "remove": {
            "uniqueItems": true,
            "type": "array",
            "description": "Remove the key-value pairs with given keys.",
            "example": [
              "value1",
              "value2"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ArrayPatchLongSet": {
        "type": "object",
        "required": [
          "set"
        ],
        "properties": {
          "set": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ArrayPatchLongAddOrRemove": {
        "type": "object",
        "properties": {
          "add": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "remove": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ArrayPatchLong": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "add": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "remove": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        ],
        "description": "Change that will be applied to array object."
      },
      "JsonArrayInt64": {
        "type": "string",
        "format": "jsonArray(int64)"
      },
      "EpochTimestamp": {
        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
        "type": "integer",
        "minimum": 0,
        "format": "int64"
      },
      "EpochTimestampRange": {
        "description": "Range between two timestamps",
        "type": "object",
        "properties": {
          "max": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "min": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "Cursor": {
        "description": "Cursor for paging through results",
        "type": "object",
        "properties": {
          "cursor": {
            "type": "string"
          }
        }
      },
      "IntegerRange": {
        "description": "Range between two integers",
        "type": "object",
        "properties": {
          "max": {
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          "min": {
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          }
        }
      },
      "CogniteInternalId": {
        "description": "Javascript friendly internal ID given to the object.",
        "type": "integer",
        "minimum": 1,
        "maximum": 9007199254740991,
        "format": "int64"
      },
      "CogniteExternalId": {
        "description": "External Id provided by client. Should be unique within the project.",
        "type": "string",
        "maxLength": 255
      },
      "CogniteRefId": {
        "description": "Reference ID used only in post request to disambiguate references to duplicate names.",
        "type": "string",
        "maxLength": 50
      },
      "CogniteParentRefId": {
        "description": "Reference ID of parent, to disambiguate if multiple nodes have the same name.",
        "type": "string",
        "maxLength": 50
      },
      "AssetName": {
        "type": "string",
        "description": "Name of asset. Often referred to as tag.",
        "maxLength": 50
      },
      "AssetDescription": {
        "type": "string",
        "description": "Description of asset.",
        "maxLength": 500
      },
      "AssetMetadata": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value",
        "additionalProperties": {
          "type": "string"
        }
      },
      "AssetSource": {
        "type": "string",
        "description": "The source of this asset"
      },
      "AssetInternalId": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "AssetExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "AssetIdEither": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "DataIds": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    }
                  }
                }
              ]
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "ExternalAsset": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "Name of asset. Often referred to as tag.",
            "maxLength": 50
          },
          "parentId": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "Description of asset.",
            "maxLength": 500
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "description": "The source of this asset"
          }
        },
        "description": "Representation of a physical asset, e.g plant or piece of equipment"
      },
      "Asset": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "Name of asset. Often referred to as tag.",
                "maxLength": 50
              },
              "parentId": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "description": {
                "type": "string",
                "description": "Description of asset.",
                "maxLength": 500
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "description": "The source of this asset"
              }
            },
            "description": "Representation of a physical asset, e.g plant or piece of equipment"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "createdTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "lastUpdatedTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "path": {
                "type": "array",
                "description": "IDs of assets on the path to the asset.",
                "items": {
                  "type": "integer",
                  "description": "IDs of assets on the path to the asset.",
                  "format": "int64"
                }
              },
              "depth": {
                "type": "integer",
                "description": "Asset path depth (number of levels below root node).",
                "format": "int32",
                "minimum": 0
              }
            }
          }
        ]
      },
      "DataAsset": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of asset. Often referred to as tag.",
                      "maxLength": 50
                    },
                    "parentId": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "The source of this asset"
                    }
                  },
                  "description": "Representation of a physical asset, e.g plant or piece of equipment"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "path": {
                      "type": "array",
                      "description": "IDs of assets on the path to the asset.",
                      "items": {
                        "type": "integer",
                        "description": "IDs of assets on the path to the asset.",
                        "format": "int64"
                      }
                    },
                    "depth": {
                      "type": "integer",
                      "description": "Asset path depth (number of levels below root node).",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DataAssetChange": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes applied to asset",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "name": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              },
                              "description": "Non removable string change.",
                              "required": [
                                "set"
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes applied to asset",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "name": {
                              "type": "object",
                              "properties": {
                                "set": {
                                  "type": "string"
                                }
                              },
                              "description": "Non removable string change.",
                              "required": [
                                "set"
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "DataExternalAssetItem": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "Name of asset. Often referred to as tag.",
                "maxLength": 50
              },
              "parentId": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "description": {
                "type": "string",
                "description": "Description of asset.",
                "maxLength": 500
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "description": "The source of this asset"
              }
            },
            "description": "Representation of a physical asset, e.g plant or piece of equipment"
          },
          {
            "type": "object",
            "properties": {
              "parentExternalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "DataExternalAsset": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of asset. Often referred to as tag.",
                      "maxLength": 50
                    },
                    "parentId": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "The source of this asset"
                    }
                  },
                  "description": "Representation of a physical asset, e.g plant or piece of equipment"
                },
                {
                  "type": "object",
                  "properties": {
                    "parentExternalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    }
                  }
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "DataWithCursorAsset": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of asset. Often referred to as tag.",
                      "maxLength": 50
                    },
                    "parentId": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "The source of this asset"
                    }
                  },
                  "description": "Representation of a physical asset, e.g plant or piece of equipment"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "path": {
                      "type": "array",
                      "description": "IDs of assets on the path to the asset.",
                      "items": {
                        "type": "integer",
                        "description": "IDs of assets on the path to the asset.",
                        "format": "int64"
                      }
                    },
                    "depth": {
                      "type": "integer",
                      "description": "Asset path depth (number of levels below root node).",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "AssetFilter": {
        "description": "Filter on assets with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of asset. Often referred to as tag.",
                "maxLength": 50
              },
              "parentIds": {
                "type": "array",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "source": {
                "type": "string",
                "description": "The source of this asset"
              },
              "createdTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "root": {
                "type": "boolean",
                "description": "filtered assets are root assets or not"
              },
              "externalIdPrefix": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          },
          "limit": {
            "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "AssetListScope": {
        "allOf": [
          {
            "description": "Filter on assets with exact match",
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of asset. Often referred to as tag.",
                    "maxLength": 50
                  },
                  "parentIds": {
                    "type": "array",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "source": {
                    "type": "string",
                    "description": "The source of this asset"
                  },
                  "createdTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "root": {
                    "type": "boolean",
                    "description": "filtered assets are root assets or not"
                  },
                  "externalIdPrefix": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              },
              "limit": {
                "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "description": "Cursor for paging through results",
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AssetSearchFilter": {
        "description": "Search request with filter capabilities",
        "allOf": [
          {
            "description": "Filter on assets with exact match",
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of asset. Often referred to as tag.",
                    "maxLength": 50
                  },
                  "parentIds": {
                    "type": "array",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "source": {
                    "type": "string",
                    "description": "The source of this asset"
                  },
                  "createdTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "root": {
                    "type": "boolean",
                    "description": "filtered assets are root assets or not"
                  },
                  "externalIdPrefix": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              },
              "limit": {
                "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "search": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of asset. Often referred to as tag.",
                    "maxLength": 50
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of asset.",
                    "maxLength": 500
                  }
                }
              }
            }
          }
        ]
      },
      "AssetSearch": {
        "type": "object",
        "properties": {
          "search": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of asset. Often referred to as tag.",
                "maxLength": 50
              },
              "description": {
                "type": "string",
                "description": "Description of asset.",
                "maxLength": 500
              }
            }
          }
        }
      },
      "AssetChange": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes applied to asset",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "name": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        },
                        "description": "Non removable string change.",
                        "required": [
                          "set"
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes applied to asset",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "name": {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        },
                        "description": "Non removable string change.",
                        "required": [
                          "set"
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "AssetChangeById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes applied to asset",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "description": "Non removable string change.",
                    "required": [
                      "set"
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "AssetChangeByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes applied to asset",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    },
                    "description": "Non removable string change.",
                    "required": [
                      "set"
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "AssetPatch": {
        "type": "object",
        "description": "Changes applied to asset",
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "name": {
                "type": "object",
                "properties": {
                  "set": {
                    "type": "string"
                  }
                },
                "description": "Non removable string change.",
                "required": [
                  "set"
                ]
              },
              "description": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "metadata": {
                "type": "object",
                "description": "Object change",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with given keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "source": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              }
            }
          }
        }
      },
      "SetObjectField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "object"
          }
        }
      },
      "SetLongField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SetStringField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string"
          }
        }
      },
      "RemoveField": {
        "type": "object",
        "properties": {
          "setNull": {
            "type": "boolean"
          }
        }
      },
      "SinglePatch": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "set": {
                "type": "object"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "setNull": {
                "type": "boolean"
              }
            }
          }
        ],
        "description": "Object change"
      },
      "SinglePatchLong": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "set": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "setNull": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "SinglePatchString": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "set": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "setNull": {
                "type": "boolean"
              }
            }
          }
        ],
        "description": "Removable string change."
      },
      "SinglePatchRequiredString": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string"
          }
        },
        "description": "Non removable string change.",
        "required": [
          "set"
        ]
      },
      "CogniteInternalIdType": {
        "description": "Javascript friendly internal ID given to the object.",
        "type": "integer",
        "minimum": 1,
        "maximum": 9007199254740991,
        "format": "int64"
      },
      "CogniteExternalIdType": {
        "description": "External Id provided by client. Should be unique within the project",
        "type": "string",
        "maxLength": 255
      },
      "InternalId": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "ExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project",
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "DataEvent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project",
                      "type": "string",
                      "maxLength": 255
                    },
                    "startTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "type": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Type of the event, e.g 'failure'."
                    },
                    "subtype": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Subtype of the event, e.g 'electrical'."
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 100,
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipment that this event relates to.",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DataExternalEvent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "externalId": {
                  "description": "External Id provided by client. Should be unique within the project",
                  "type": "string",
                  "maxLength": 255
                },
                "startTime": {
                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "endTime": {
                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "type": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "Type of the event, e.g 'failure'."
                },
                "subtype": {
                  "maxLength": 64,
                  "type": "string",
                  "description": "Subtype of the event, e.g 'electrical'."
                },
                "description": {
                  "maxLength": 500,
                  "type": "string",
                  "description": "Textual description of the event."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "assetIds": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 100,
                  "uniqueItems": true,
                  "description": "Asset IDs of related equipment that this event relates to.",
                  "items": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                },
                "source": {
                  "maxLength": 128,
                  "type": "string",
                  "description": "The source of this event."
                }
              },
              "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "DataEventChange": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "startTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "endTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to array object."
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "type": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "subtype": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to event.",
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "startTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "endTime": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ]
                            },
                            "description": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to array object."
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "type": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "subtype": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 1000
          }
        }
      },
      "EitherId": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "DataWithCursorEvent": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project",
                      "type": "string",
                      "maxLength": 255
                    },
                    "startTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "type": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Type of the event, e.g 'failure'."
                    },
                    "subtype": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Subtype of the event, e.g 'electrical'."
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 100,
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipment that this event relates to.",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "EventMetadata": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Event": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project",
                "type": "string",
                "maxLength": 255
              },
              "startTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "endTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "type": {
                "maxLength": 64,
                "type": "string",
                "description": "Type of the event, e.g 'failure'."
              },
              "subtype": {
                "maxLength": 64,
                "type": "string",
                "description": "Subtype of the event, e.g 'electrical'."
              },
              "description": {
                "maxLength": 500,
                "type": "string",
                "description": "Textual description of the event."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Asset IDs of related equipment that this event relates to.",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              }
            },
            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "lastUpdatedTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "createdTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        ]
      },
      "ExternalEvent": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project",
            "type": "string",
            "maxLength": 255
          },
          "startTime": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "endTime": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "type": {
            "maxLength": 64,
            "type": "string",
            "description": "Type of the event, e.g 'failure'."
          },
          "subtype": {
            "maxLength": 64,
            "type": "string",
            "description": "Subtype of the event, e.g 'electrical'."
          },
          "description": {
            "maxLength": 500,
            "type": "string",
            "description": "Textual description of the event."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true,
            "description": "Asset IDs of related equipment that this event relates to.",
            "items": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of this event."
          }
        },
        "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
      },
      "EventFilterRequest": {
        "description": "Filter request for events. Filters exact field matching or timestamp ranges inclusive min and max.",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "filter": {
                "description": "Filter on events filter with exact match",
                "type": "object",
                "properties": {
                  "startTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "endTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "assetIds": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Asset IDs of related equipment that this event relates to.",
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "source": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "The source of this event."
                  },
                  "type": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The event type"
                  },
                  "subtype": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The event subtype"
                  },
                  "createdTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "externalIdPrefix": {
                    "description": "External Id provided by client. Should be unique within the project",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              },
              "limit": {
                "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "description": "Cursor for paging through results",
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string"
              }
            }
          }
        ]
      },
      "EventChange": {
        "type": "object",
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "startTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "endTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to array object."
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "type": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "subtype": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to event.",
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "startTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "endTime": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      },
                      "description": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to array object."
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "type": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "subtype": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "EventChangeById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "startTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "endTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to array object."
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "type": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "subtype": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "EventChangeByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to event.",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "startTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "endTime": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ]
                  },
                  "description": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to array object."
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "type": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "subtype": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "EventPatch": {
        "type": "object",
        "description": "Changes will be applied to event.",
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "startTime": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              "endTime": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              },
              "description": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "metadata": {
                "type": "object",
                "description": "Object change",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with given keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "assetIds": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to array object."
              },
              "source": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "type": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "subtype": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              }
            }
          }
        }
      },
      "EventFilter": {
        "description": "Filter on events filter with exact match",
        "type": "object",
        "properties": {
          "startTime": {
            "description": "Range between two timestamps",
            "type": "object",
            "properties": {
              "max": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "endTime": {
            "description": "Range between two timestamps",
            "type": "object",
            "properties": {
              "max": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true,
            "description": "Asset IDs of related equipment that this event relates to.",
            "items": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            }
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of this event."
          },
          "type": {
            "maxLength": 64,
            "type": "string",
            "description": "The event type"
          },
          "subtype": {
            "maxLength": 64,
            "type": "string",
            "description": "The event subtype"
          },
          "createdTime": {
            "description": "Range between two timestamps",
            "type": "object",
            "properties": {
              "max": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "lastUpdatedTime": {
            "description": "Range between two timestamps",
            "type": "object",
            "properties": {
              "max": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "externalIdPrefix": {
            "description": "External Id provided by client. Should be unique within the project",
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "EventSearch": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 500,
            "description": "text to search in description field across events"
          }
        }
      },
      "EventSearchRequest": {
        "description": "Filter on events filter with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filter on events filter with exact match",
            "type": "object",
            "properties": {
              "startTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "endTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Asset IDs of related equipment that this event relates to.",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              },
              "type": {
                "maxLength": 64,
                "type": "string",
                "description": "The event type"
              },
              "subtype": {
                "maxLength": 64,
                "type": "string",
                "description": "The event subtype"
              },
              "createdTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "externalIdPrefix": {
                "description": "External Id provided by client. Should be unique within the project",
                "type": "string",
                "maxLength": 255
              }
            }
          },
          "search": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string",
                "maxLength": 500,
                "description": "text to search in description field across events"
              }
            }
          },
          "limit": {
            "description": "<- Limits the maximum number of results to be returned by single request. In case there are more results to the request 'nextCursor' attribute will be provided as part of response. Request may contain less results than request limit.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "EventResponse": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project",
                          "type": "string",
                          "maxLength": 255
                        },
                        "startTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 100,
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "lastUpdatedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "EventWithCursorResponse": {
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project",
                          "type": "string",
                          "maxLength": 255
                        },
                        "startTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "endTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "type": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Type of the event, e.g 'failure'."
                        },
                        "subtype": {
                          "maxLength": 64,
                          "type": "string",
                          "description": "Subtype of the event, e.g 'electrical'."
                        },
                        "description": {
                          "maxLength": 500,
                          "type": "string",
                          "description": "Textual description of the event."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "minItems": 1,
                          "maxItems": 100,
                          "uniqueItems": true,
                          "description": "Asset IDs of related equipment that this event relates to.",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of this event."
                        }
                      },
                      "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "lastUpdatedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                }
              },
              "nextCursor": {
                "type": "string",
                "description": "Cursor to get the next page of results (if available)."
              }
            },
            "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
          }
        ]
      },
      "DetailedErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "required": [
              "code",
              "message"
            ],
            "description": "Cognite API error",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32",
                "example": 401
              },
              "message": {
                "type": "string",
                "description": "Error message",
                "example": "Could not authenticate."
              },
              "missing": {
                "type": "array",
                "description": "List of lookup objects that have not matched any results.",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              "duplicated": {
                "type": "array",
                "description": "List of objects that violate the uniqueness constraint.",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "FileInternalId": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Javascript friendly internal ID given to the object.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          }
        }
      },
      "FileExternalId": {
        "type": "object",
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "FileIdEither": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "FileName": {
        "type": "string",
        "description": "Name of the file.",
        "maxLength": 50
      },
      "ExternalFilesMetadata": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "externalId": {
            "description": "External Id provided by client. Should be unique within the project.",
            "type": "string",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": "Name of the file.",
            "maxLength": 50
          },
          "source": {
            "maxLength": 128,
            "type": "string",
            "description": "The source of the file."
          },
          "mimeType": {
            "maxLength": 64,
            "type": "string",
            "example": "image/jpeg",
            "description": "File type. E.g. text/plain, application/pdf, .."
          },
          "metadata": {
            "type": "object",
            "description": "Custom, application specific metadata. String key -> String value",
            "additionalProperties": {
              "type": "string"
            }
          },
          "assetIds": {
            "type": "array",
            "items": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "maxItems": 100,
            "minItems": 1
          }
        }
      },
      "FilesMetadata": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "name": {
                "type": "string",
                "description": "Name of the file.",
                "maxLength": 50
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of the file."
              },
              "mimeType": {
                "maxLength": 64,
                "type": "string",
                "example": "image/jpeg",
                "description": "File type. E.g. text/plain, application/pdf, .."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "maxItems": 100,
                "minItems": 1
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id",
              "uploaded",
              "createdTime",
              "lastUpdatedTime"
            ],
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              },
              "uploaded": {
                "type": "boolean",
                "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                "example": true
              },
              "uploadedTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "createdTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "lastUpdatedTime": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        ]
      },
      "FilesSearchFilter": {
        "description": "Filter on files with exact match",
        "allOf": [
          {
            "description": "Filter on files with exact match",
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the file.",
                    "maxLength": 50
                  },
                  "mimeType": {
                    "maxLength": 64,
                    "type": "string",
                    "example": "image/jpeg",
                    "description": "File type. E.g. text/plain, application/pdf, .."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Custom, application specific metadata. String key -> String value",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "assetIds": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 100,
                    "uniqueItems": true,
                    "description": "Only include files that reference these specific asset IDs.",
                    "example": [
                      363848954441724,
                      793045462540095,
                      1261042166839739
                    ],
                    "items": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  },
                  "source": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "The source of this event."
                  },
                  "createdTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "lastUpdatedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "uploadedTime": {
                    "description": "Range between two timestamps",
                    "type": "object",
                    "properties": {
                      "max": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      },
                      "min": {
                        "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                        "type": "integer",
                        "minimum": 0,
                        "format": "int64"
                      }
                    }
                  },
                  "externalIdPrefix": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  },
                  "uploaded": {
                    "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                    "type": "boolean",
                    "example": true
                  }
                }
              },
              "limit": {
                "description": "<- Maximum number of items that the client want to get back.",
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "maximum": 1000,
                "default": 100
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "search": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the file.",
                    "maxLength": 50
                  }
                }
              }
            }
          }
        ]
      },
      "DataFileChange": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Changes will be applied to file.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to array object."
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Changes will be applied to file.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "source": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              ],
                              "description": "Removable string change."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "assetIds": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to array object."
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "FileChangeUpdate": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              },
              {
                "type": "object",
                "description": "Changes will be applied to file.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to array object."
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              },
              {
                "type": "object",
                "description": "Changes will be applied to file.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "source": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "setNull": {
                                "type": "boolean"
                              }
                            }
                          }
                        ],
                        "description": "Removable string change."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "assetIds": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to array object."
                      }
                    }
                  }
                }
              }
            ]
          }
        ]
      },
      "FileChangeUpdateById": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "description": "Changes will be applied to file.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to array object."
                  }
                }
              }
            }
          }
        ]
      },
      "FileChangeUpdateByExternalId": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          },
          {
            "type": "object",
            "description": "Changes will be applied to file.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "source": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "setNull": {
                            "type": "boolean"
                          }
                        }
                      }
                    ],
                    "description": "Removable string change."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "assetIds": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to array object."
                  }
                }
              }
            }
          }
        ]
      },
      "DataFileMetadata": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the file.",
                      "maxLength": 50
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 64,
                      "type": "string",
                      "example": "image/jpeg",
                      "description": "File type. E.g. text/plain, application/pdf, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "uploaded",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                      "example": true
                    },
                    "uploadedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "FileLink": {
        "type": "object",
        "properties": {
          "downloadUrl": {
            "type": "string"
          }
        }
      },
      "DataExternalFileMetadata": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "externalId": {
                  "description": "External Id provided by client. Should be unique within the project.",
                  "type": "string",
                  "maxLength": 255
                },
                "name": {
                  "type": "string",
                  "description": "Name of the file.",
                  "maxLength": 50
                },
                "source": {
                  "maxLength": 128,
                  "type": "string",
                  "description": "The source of the file."
                },
                "mimeType": {
                  "maxLength": 64,
                  "type": "string",
                  "example": "image/jpeg",
                  "description": "File type. E.g. text/plain, application/pdf, .."
                },
                "metadata": {
                  "type": "object",
                  "description": "Custom, application specific metadata. String key -> String value",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "assetIds": {
                  "type": "array",
                  "items": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  },
                  "maxItems": 100,
                  "minItems": 1
                }
              }
            }
          }
        }
      },
      "FileLinkIds": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    }
                  }
                }
              ]
            },
            "maxItems": 100,
            "minItems": 1
          }
        }
      },
      "FileChange": {
        "type": "object",
        "description": "Changes will be applied to file.",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "source": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "setNull": {
                        "type": "boolean"
                      }
                    }
                  }
                ],
                "description": "Removable string change."
              },
              "metadata": {
                "type": "object",
                "description": "Object change",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with given keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "assetIds": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to array object."
              }
            }
          }
        }
      },
      "DataWithCursor": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the file.",
                      "maxLength": 50
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 64,
                      "type": "string",
                      "example": "image/jpeg",
                      "description": "File type. E.g. text/plain, application/pdf, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "uploaded",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                      "example": true
                    },
                    "uploadedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of results"
      },
      "FilesMetadataField": {
        "type": "object",
        "description": "Custom, application specific metadata. String key -> String value",
        "additionalProperties": {
          "type": "string"
        }
      },
      "FileFilter": {
        "description": "Filter on files with exact match",
        "type": "object",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the file.",
                "maxLength": 50
              },
              "mimeType": {
                "maxLength": 64,
                "type": "string",
                "example": "image/jpeg",
                "description": "File type. E.g. text/plain, application/pdf, .."
              },
              "metadata": {
                "type": "object",
                "description": "Custom, application specific metadata. String key -> String value",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "assetIds": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "Only include files that reference these specific asset IDs.",
                "example": [
                  363848954441724,
                  793045462540095,
                  1261042166839739
                ],
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                }
              },
              "source": {
                "maxLength": 128,
                "type": "string",
                "description": "The source of this event."
              },
              "createdTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "uploadedTime": {
                "description": "Range between two timestamps",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "externalIdPrefix": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              },
              "uploaded": {
                "description": "Whether or not the actual file is uploaded. This field is returned only by the API, it has no effect in a post body.",
                "type": "boolean",
                "example": true
              }
            }
          },
          "limit": {
            "description": "<- Maximum number of items that the client want to get back.",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        }
      },
      "AssetIds": {
        "type": "array",
        "minItems": 1,
        "maxItems": 100,
        "uniqueItems": true,
        "description": "Only include files that reference these specific asset IDs.",
        "example": [
          363848954441724,
          793045462540095,
          1261042166839739
        ],
        "items": {
          "description": "Javascript friendly internal ID given to the object.",
          "type": "integer",
          "minimum": 1,
          "maximum": 9007199254740991,
          "format": "int64"
        }
      },
      "NextCursor": {
        "type": "string",
        "description": "Cursor to get the next page of results (if available)."
      },
      "NextCursorData": {
        "type": "object",
        "properties": {
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        }
      },
      "CreatedTime": {
        "type": "integer",
        "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
        "format": "int64",
        "example": 0
      },
      "EmptyResponse": {
        "type": "object"
      },
      "DataIdentifier": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "DataIdentifiers": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of ID objects",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                }
              ]
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "Model3D": {
        "type": "object",
        "required": [
          "name",
          "id",
          "createdTime"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the model.",
            "example": "My Model"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the model.",
            "format": "int64",
            "example": 1000
          },
          "createdTime": {
            "type": "integer",
            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
            "format": "int64",
            "example": 0
          }
        }
      },
      "Model3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "id",
                "createdTime"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the model.",
                  "example": "My Model"
                },
                "id": {
                  "type": "integer",
                  "description": "The ID of the model.",
                  "format": "int64",
                  "example": 1000
                },
                "createdTime": {
                  "type": "integer",
                  "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                  "format": "int64",
                  "example": 0
                }
              }
            }
          }
        }
      },
      "CreateModel3D": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "The name of the model.",
            "example": "My Model"
          }
        }
      },
      "UpdateModel3D": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "SetModelNameField": {
        "type": "object",
        "properties": {
          "set": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        }
      },
      "Revision3D": {
        "type": "object",
        "required": [
          "id",
          "fileId",
          "published",
          "status",
          "assetMappingCount",
          "createdTime"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the revision.",
            "format": "int64",
            "example": 1000
          },
          "fileId": {
            "type": "integer",
            "description": "The file id.",
            "format": "int64",
            "example": 1000
          },
          "published": {
            "type": "boolean",
            "description": "True if the revision is marked as published.",
            "default": false
          },
          "rotation": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
              "format": "double"
            }
          },
          "camera": {
            "type": "object",
            "properties": {
              "target": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera target.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "position": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera position.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Initial camera position and target."
          },
          "status": {
            "type": "string",
            "enum": [
              "Queued",
              "Processing",
              "Done",
              "Failed"
            ],
            "description": "The status of the revision.",
            "example": "Done"
          },
          "thumbnailThreedFileId": {
            "type": "integer",
            "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
            "format": "int64",
            "example": 1000
          },
          "thumbnailURL": {
            "type": "string",
            "description": "The URL of a thumbnail for the revision.",
            "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
          },
          "assetMappingCount": {
            "type": "integer",
            "description": "The number of asset mappings for this revision.",
            "format": "int64",
            "example": 0
          },
          "createdTime": {
            "type": "integer",
            "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
            "format": "int64",
            "example": 0
          }
        }
      },
      "Revision3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "fileId",
                "published",
                "status",
                "assetMappingCount",
                "createdTime"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the revision.",
                  "format": "int64",
                  "example": 1000
                },
                "fileId": {
                  "type": "integer",
                  "description": "The file id.",
                  "format": "int64",
                  "example": 1000
                },
                "published": {
                  "type": "boolean",
                  "description": "True if the revision is marked as published.",
                  "default": false
                },
                "rotation": {
                  "maxItems": 3,
                  "minItems": 3,
                  "type": "array",
                  "items": {
                    "type": "number",
                    "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                    "format": "double"
                  }
                },
                "camera": {
                  "type": "object",
                  "properties": {
                    "target": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "description": "Initial camera target.",
                      "items": {
                        "type": "number",
                        "format": "double"
                      }
                    },
                    "position": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "description": "Initial camera position.",
                      "items": {
                        "type": "number",
                        "format": "double"
                      }
                    }
                  },
                  "description": "Initial camera position and target."
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "Queued",
                    "Processing",
                    "Done",
                    "Failed"
                  ],
                  "description": "The status of the revision.",
                  "example": "Done"
                },
                "thumbnailThreedFileId": {
                  "type": "integer",
                  "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                  "format": "int64",
                  "example": 1000
                },
                "thumbnailURL": {
                  "type": "string",
                  "description": "The URL of a thumbnail for the revision.",
                  "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
                },
                "assetMappingCount": {
                  "type": "integer",
                  "description": "The number of asset mappings for this revision.",
                  "format": "int64",
                  "example": 0
                },
                "createdTime": {
                  "type": "integer",
                  "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                  "format": "int64",
                  "example": 0
                }
              }
            }
          }
        }
      },
      "RevealRevision3D": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "id",
              "fileId",
              "published",
              "status",
              "assetMappingCount",
              "createdTime"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the revision.",
                "format": "int64",
                "example": 1000
              },
              "fileId": {
                "type": "integer",
                "description": "The file id.",
                "format": "int64",
                "example": 1000
              },
              "published": {
                "type": "boolean",
                "description": "True if the revision is marked as published.",
                "default": false
              },
              "rotation": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                  "format": "double"
                }
              },
              "camera": {
                "type": "object",
                "properties": {
                  "target": {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "description": "Initial camera target.",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "position": {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "description": "Initial camera position.",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "description": "Initial camera position and target."
              },
              "status": {
                "type": "string",
                "enum": [
                  "Queued",
                  "Processing",
                  "Done",
                  "Failed"
                ],
                "description": "The status of the revision.",
                "example": "Done"
              },
              "thumbnailThreedFileId": {
                "type": "integer",
                "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                "format": "int64",
                "example": 1000
              },
              "thumbnailURL": {
                "type": "string",
                "description": "The URL of a thumbnail for the revision.",
                "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
              },
              "assetMappingCount": {
                "type": "integer",
                "description": "The number of asset mappings for this revision.",
                "format": "int64",
                "example": 0
              },
              "createdTime": {
                "type": "integer",
                "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                "format": "int64",
                "example": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sceneThreedFiles"
            ],
            "properties": {
              "sceneThreedFiles": {
                "type": "array",
                "items": {
                  "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                  "type": "object",
                  "required": [
                    "version",
                    "fileId"
                  ],
                  "properties": {
                    "version": {
                      "type": "integer",
                      "description": "Version of the file format.",
                      "format": "int64",
                      "example": 1
                    },
                    "fileId": {
                      "type": "integer",
                      "description": "File ID. Use /3d/files/{id} to retrieve the file.",
                      "format": "int64",
                      "example": 1000
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UnrealRevision3D": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "id",
              "fileId",
              "published",
              "status",
              "assetMappingCount",
              "createdTime"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the revision.",
                "format": "int64",
                "example": 1000
              },
              "fileId": {
                "type": "integer",
                "description": "The file id.",
                "format": "int64",
                "example": 1000
              },
              "published": {
                "type": "boolean",
                "description": "True if the revision is marked as published.",
                "default": false
              },
              "rotation": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                  "format": "double"
                }
              },
              "camera": {
                "type": "object",
                "properties": {
                  "target": {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "description": "Initial camera target.",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  },
                  "position": {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "description": "Initial camera position.",
                    "items": {
                      "type": "number",
                      "format": "double"
                    }
                  }
                },
                "description": "Initial camera position and target."
              },
              "status": {
                "type": "string",
                "enum": [
                  "Queued",
                  "Processing",
                  "Done",
                  "Failed"
                ],
                "description": "The status of the revision.",
                "example": "Done"
              },
              "thumbnailThreedFileId": {
                "type": "integer",
                "description": "The threed file ID of a thumbnail for the revision. Use /3d/files/{id} to retrieve the file.",
                "format": "int64",
                "example": 1000
              },
              "thumbnailURL": {
                "type": "string",
                "description": "The URL of a thumbnail for the revision.",
                "example": "https://api.cognitedata.com/api/v1/project/myproject/3d/files/1000"
              },
              "assetMappingCount": {
                "type": "integer",
                "description": "The number of asset mappings for this revision.",
                "format": "int64",
                "example": 0
              },
              "createdTime": {
                "type": "integer",
                "description": "The creation time of the resource, in milliseconds since January 1, 1970 at 00:00 UTC.",
                "format": "int64",
                "example": 0
              }
            }
          },
          {
            "type": "object",
            "required": [
              "sceneThreedFiles"
            ],
            "properties": {
              "sceneThreedFiles": {
                "type": "array",
                "items": {
                  "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                  "type": "object",
                  "required": [
                    "version",
                    "fileId"
                  ],
                  "properties": {
                    "version": {
                      "type": "integer",
                      "description": "Version of the file format.",
                      "format": "int64",
                      "example": 1
                    },
                    "fileId": {
                      "type": "integer",
                      "description": "File ID. Use /3d/files/{id} to retrieve the file.",
                      "format": "int64",
                      "example": 1000
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CreateRevision3D": {
        "type": "object",
        "required": [
          "fileId"
        ],
        "properties": {
          "published": {
            "type": "boolean",
            "description": "True if the revision is marked as published.",
            "default": false
          },
          "rotation": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
              "format": "double"
            }
          },
          "camera": {
            "type": "object",
            "properties": {
              "target": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera target.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "position": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera position.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Initial camera position and target."
          },
          "fileId": {
            "type": "integer",
            "description": "The file id to a file uploaded to Cognite's Files API. Can only be set on revision creation, and can never be updated. _Only FBX files are supported_.",
            "format": "int64"
          }
        }
      },
      "UpdateRevision3D": {
        "allOf": [
          {
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "published": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "boolean",
                        "description": "True if the revision is marked as published."
                      }
                    }
                  },
                  "rotation": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "maxItems": 3,
                            "minItems": 3,
                            "type": "array",
                            "items": {
                              "type": "number",
                              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
                              "format": "double"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "camera": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "set": {
                            "type": "object",
                            "properties": {
                              "target": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera target.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              },
                              "position": {
                                "maxItems": 3,
                                "minItems": 3,
                                "type": "array",
                                "description": "Initial camera position.",
                                "items": {
                                  "type": "number",
                                  "format": "double"
                                }
                              }
                            },
                            "description": "Initial camera position and target."
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "Versioned3DFile": {
        "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
        "type": "object",
        "required": [
          "version",
          "fileId"
        ],
        "properties": {
          "version": {
            "type": "integer",
            "description": "Version of the file format.",
            "format": "int64",
            "example": 1
          },
          "fileId": {
            "type": "integer",
            "description": "File ID. Use /3d/files/{id} to retrieve the file.",
            "format": "int64",
            "example": 1000
          }
        }
      },
      "RevisionCameraProperties": {
        "type": "object",
        "properties": {
          "target": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "description": "Initial camera target.",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "position": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "description": "Initial camera position.",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "description": "Initial camera position and target."
      },
      "SetRevisionRotation": {
        "type": "object",
        "properties": {
          "set": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "Global rotation to be applied to the entire model. The rotation is expressed by Euler angles in radians and in XYZ order.",
              "format": "double"
            }
          }
        }
      },
      "SetRevisionCameraProperties": {
        "type": "object",
        "properties": {
          "set": {
            "type": "object",
            "properties": {
              "target": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera target.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              },
              "position": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "description": "Initial camera position.",
                "items": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "description": "Initial camera position and target."
          }
        }
      },
      "Node3D": {
        "type": "object",
        "required": [
          "id",
          "treeIndex",
          "parentId",
          "depth",
          "name",
          "subtreeSize",
          "boundingBox"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1000
          },
          "treeIndex": {
            "type": "integer",
            "minimum": 0,
            "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
            "format": "int64",
            "example": 3
          },
          "parentId": {
            "type": "integer",
            "nullable": true,
            "description": "The parent of the node, null if it is the root node.",
            "format": "int64",
            "example": 2
          },
          "depth": {
            "type": "integer",
            "description": "The depth of the node in the tree, starting from 0 at the root node.",
            "format": "int64",
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "The name of the node.",
            "example": "Node name"
          },
          "subtreeSize": {
            "type": "integer",
            "description": "The number of descendants of the node, plus one (counting itself).",
            "format": "int64",
            "example": 4
          },
          "boundingBox": {
            "type": "object",
            "required": [
              "min",
              "max"
            ],
            "properties": {
              "max": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "The maximal coordinates of the bounding box.",
                  "format": "double"
                }
              },
              "min": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "The minimal coordinates of the bounding box.",
                  "format": "double"
                }
              }
            },
            "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
          }
        }
      },
      "Node3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "treeIndex",
                "parentId",
                "depth",
                "name",
                "subtreeSize",
                "boundingBox"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the node.",
                  "format": "int64",
                  "example": 1000
                },
                "treeIndex": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                  "format": "int64",
                  "example": 3
                },
                "parentId": {
                  "type": "integer",
                  "nullable": true,
                  "description": "The parent of the node, null if it is the root node.",
                  "format": "int64",
                  "example": 2
                },
                "depth": {
                  "type": "integer",
                  "description": "The depth of the node in the tree, starting from 0 at the root node.",
                  "format": "int64",
                  "example": 2
                },
                "name": {
                  "type": "string",
                  "description": "The name of the node.",
                  "example": "Node name"
                },
                "subtreeSize": {
                  "type": "integer",
                  "description": "The number of descendants of the node, plus one (counting itself).",
                  "format": "int64",
                  "example": 4
                },
                "boundingBox": {
                  "type": "object",
                  "required": [
                    "min",
                    "max"
                  ],
                  "properties": {
                    "max": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The maximal coordinates of the bounding box.",
                        "format": "double"
                      }
                    },
                    "min": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The minimal coordinates of the bounding box.",
                        "format": "double"
                      }
                    }
                  },
                  "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                }
              }
            }
          }
        }
      },
      "RevealNode3D": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "id",
              "treeIndex",
              "parentId",
              "depth",
              "name",
              "subtreeSize",
              "boundingBox"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the node.",
                "format": "int64",
                "example": 1000
              },
              "treeIndex": {
                "type": "integer",
                "minimum": 0,
                "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                "format": "int64",
                "example": 3
              },
              "parentId": {
                "type": "integer",
                "nullable": true,
                "description": "The parent of the node, null if it is the root node.",
                "format": "int64",
                "example": 2
              },
              "depth": {
                "type": "integer",
                "description": "The depth of the node in the tree, starting from 0 at the root node.",
                "format": "int64",
                "example": 2
              },
              "name": {
                "type": "string",
                "description": "The name of the node.",
                "example": "Node name"
              },
              "subtreeSize": {
                "type": "integer",
                "description": "The number of descendants of the node, plus one (counting itself).",
                "format": "int64",
                "example": 4
              },
              "boundingBox": {
                "type": "object",
                "required": [
                  "min",
                  "max"
                ],
                "properties": {
                  "max": {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "The maximal coordinates of the bounding box.",
                      "format": "double"
                    }
                  },
                  "min": {
                    "maxItems": 3,
                    "minItems": 3,
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "The minimal coordinates of the bounding box.",
                      "format": "double"
                    }
                  }
                },
                "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "sectorId": {
                "type": "integer",
                "description": "The sector the node is contained in.",
                "format": "int64",
                "example": 1000
              }
            }
          }
        ]
      },
      "RevealNode3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "id",
                    "treeIndex",
                    "parentId",
                    "depth",
                    "name",
                    "subtreeSize",
                    "boundingBox"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The ID of the node.",
                      "format": "int64",
                      "example": 1000
                    },
                    "treeIndex": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "The index of the node in the 3D model hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                      "format": "int64",
                      "example": 3
                    },
                    "parentId": {
                      "type": "integer",
                      "nullable": true,
                      "description": "The parent of the node, null if it is the root node.",
                      "format": "int64",
                      "example": 2
                    },
                    "depth": {
                      "type": "integer",
                      "description": "The depth of the node in the tree, starting from 0 at the root node.",
                      "format": "int64",
                      "example": 2
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the node.",
                      "example": "Node name"
                    },
                    "subtreeSize": {
                      "type": "integer",
                      "description": "The number of descendants of the node, plus one (counting itself).",
                      "format": "int64",
                      "example": 4
                    },
                    "boundingBox": {
                      "type": "object",
                      "required": [
                        "min",
                        "max"
                      ],
                      "properties": {
                        "max": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "items": {
                            "type": "number",
                            "description": "The maximal coordinates of the bounding box.",
                            "format": "double"
                          }
                        },
                        "min": {
                          "maxItems": 3,
                          "minItems": 3,
                          "type": "array",
                          "items": {
                            "type": "number",
                            "description": "The minimal coordinates of the bounding box.",
                            "format": "double"
                          }
                        }
                      },
                      "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "sectorId": {
                      "type": "integer",
                      "description": "The sector the node is contained in.",
                      "format": "int64",
                      "example": 1000
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "BoundingBox3D": {
        "type": "object",
        "required": [
          "min",
          "max"
        ],
        "properties": {
          "max": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "The maximal coordinates of the bounding box.",
              "format": "double"
            }
          },
          "min": {
            "maxItems": 3,
            "minItems": 3,
            "type": "array",
            "items": {
              "type": "number",
              "description": "The minimal coordinates of the bounding box.",
              "format": "double"
            }
          }
        },
        "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
      },
      "RevealSector3D": {
        "type": "object",
        "required": [
          "id",
          "parentId",
          "path",
          "depth",
          "boundingBox",
          "threedFiles"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the sector.",
            "format": "int64",
            "example": 1000
          },
          "parentId": {
            "type": "integer",
            "nullable": true,
            "description": "The parent of the sector, null if it is the root sector.",
            "format": "int64",
            "example": 900
          },
          "path": {
            "type": "string",
            "description": "String representing the path to the sector: 0/2/6/ etc.",
            "example": "0/100/500/900/1000"
          },
          "depth": {
            "type": "integer",
            "description": "The depth of the sector in the sector tree, starting from 0 at the root sector.",
            "format": "int64",
            "example": 4
          },
          "boundingBox": {
            "type": "object",
            "required": [
              "min",
              "max"
            ],
            "properties": {
              "max": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "The maximal coordinates of the bounding box.",
                  "format": "double"
                }
              },
              "min": {
                "maxItems": 3,
                "minItems": 3,
                "type": "array",
                "items": {
                  "type": "number",
                  "description": "The minimal coordinates of the bounding box.",
                  "format": "double"
                }
              }
            },
            "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
          },
          "threedFiles": {
            "type": "array",
            "description": "The file ID of the data file for this sector, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
            "items": {
              "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
              "type": "object",
              "required": [
                "version",
                "fileId"
              ],
              "properties": {
                "version": {
                  "type": "integer",
                  "description": "Version of the file format.",
                  "format": "int64",
                  "example": 1
                },
                "fileId": {
                  "type": "integer",
                  "description": "File ID. Use /3d/files/{id} to retrieve the file.",
                  "format": "int64",
                  "example": 1000
                }
              }
            }
          }
        }
      },
      "RevealSector3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "parentId",
                "path",
                "depth",
                "boundingBox",
                "threedFiles"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The id of the sector.",
                  "format": "int64",
                  "example": 1000
                },
                "parentId": {
                  "type": "integer",
                  "nullable": true,
                  "description": "The parent of the sector, null if it is the root sector.",
                  "format": "int64",
                  "example": 900
                },
                "path": {
                  "type": "string",
                  "description": "String representing the path to the sector: 0/2/6/ etc.",
                  "example": "0/100/500/900/1000"
                },
                "depth": {
                  "type": "integer",
                  "description": "The depth of the sector in the sector tree, starting from 0 at the root sector.",
                  "format": "int64",
                  "example": 4
                },
                "boundingBox": {
                  "type": "object",
                  "required": [
                    "min",
                    "max"
                  ],
                  "properties": {
                    "max": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The maximal coordinates of the bounding box.",
                        "format": "double"
                      }
                    },
                    "min": {
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                      "items": {
                        "type": "number",
                        "description": "The minimal coordinates of the bounding box.",
                        "format": "double"
                      }
                    }
                  },
                  "description": "The bounding box of the subtree with this sector as the root sector. Is null if there are no geometries in the subtree."
                },
                "threedFiles": {
                  "type": "array",
                  "description": "The file ID of the data file for this sector, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                  "items": {
                    "description": "The file ID of the data file for this resource, with multiple versions supported. Use /3d/files/{id} to retrieve the file.",
                    "type": "object",
                    "required": [
                      "version",
                      "fileId"
                    ],
                    "properties": {
                      "version": {
                        "type": "integer",
                        "description": "Version of the file format.",
                        "format": "int64",
                        "example": 1
                      },
                      "fileId": {
                        "type": "integer",
                        "description": "File ID. Use /3d/files/{id} to retrieve the file.",
                        "format": "int64",
                        "example": 1000
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AssetMapping3D": {
        "type": "object",
        "required": [
          "nodeId",
          "assetId",
          "treeIndex",
          "subtreeSize"
        ],
        "properties": {
          "nodeId": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1003
          },
          "assetId": {
            "type": "integer",
            "description": "The ID of the associated asset (Cognite's Assets API).",
            "format": "int64",
            "example": 3001
          },
          "treeIndex": {
            "type": "integer",
            "minimum": 0,
            "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
            "format": "int64",
            "example": 5
          },
          "subtreeSize": {
            "type": "integer",
            "description": "The number of nodes in the subtree of this node (this number included the node itself).",
            "format": "int64",
            "example": 7
          }
        }
      },
      "AssetMapping3DList": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "nodeId",
                "assetId",
                "treeIndex",
                "subtreeSize"
              ],
              "properties": {
                "nodeId": {
                  "type": "integer",
                  "description": "The ID of the node.",
                  "format": "int64",
                  "example": 1003
                },
                "assetId": {
                  "type": "integer",
                  "description": "The ID of the associated asset (Cognite's Assets API).",
                  "format": "int64",
                  "example": 3001
                },
                "treeIndex": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "A number describing the position of this node in the 3D hierarchy, starting from 0. The tree is traversed in a depth-first order.",
                  "format": "int64",
                  "example": 5
                },
                "subtreeSize": {
                  "type": "integer",
                  "description": "The number of nodes in the subtree of this node (this number included the node itself).",
                  "format": "int64",
                  "example": 7
                }
              }
            }
          }
        }
      },
      "CreateAssetMapping3D": {
        "type": "object",
        "required": [
          "nodeId",
          "assetId"
        ],
        "properties": {
          "nodeId": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1003
          },
          "assetId": {
            "type": "integer",
            "description": "The ID of the associated asset (Cognite's Assets API).",
            "format": "int64",
            "example": 3001
          }
        }
      },
      "DeleteAssetMapping3D": {
        "type": "object",
        "required": [
          "nodeId",
          "assetId"
        ],
        "properties": {
          "nodeId": {
            "type": "integer",
            "description": "The ID of the node.",
            "format": "int64",
            "example": 1003
          },
          "assetId": {
            "type": "integer",
            "description": "The ID of the associated asset (Cognite's Assets API).",
            "format": "int64",
            "example": 3001
          }
        }
      },
      "UpdateRevision3DThumbnail": {
        "type": "object",
        "required": [
          "fileId"
        ],
        "properties": {
          "fileId": {
            "type": "integer",
            "description": "File ID of thumbnail file in Files API. _Only JPEG and PNG files are supported_.",
            "format": "int64"
          }
        },
        "description": "Request body for the updateModelRevisionThumbnail endpoint."
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "required": [
              "code",
              "message"
            ],
            "description": "Cognite API error",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32",
                "example": 401
              },
              "message": {
                "type": "string",
                "description": "Error message",
                "example": "Could not authenticate."
              },
              "missing": {
                "type": "array",
                "description": "List of lookup objects that have not matched any results.",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              "duplicated": {
                "type": "array",
                "description": "List of objects that violate the uniqueness constraint.",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      },
      "TimeSeriesResponse": {
        "description": "List of responses. Order matches the requests order.",
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Generated id of the time series",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "Externally supplied id of the time series"
                },
                "name": {
                  "type": "string",
                  "description": "Name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "Asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "DatapointsInsertQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10000,
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "datapoints"
                      ],
                      "properties": {
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints. Total limit per request is 100000 datapoints.",
                          "items": {
                            "oneOf": [
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "type": "object",
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "value": {
                                    "type": "number",
                                    "description": "The numerical data value of a numerical metric"
                                  }
                                }
                              },
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "type": "object",
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The string data value of a string metric"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "datapoints"
                      ],
                      "properties": {
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints. Total limit per request is 100000 datapoints.",
                          "items": {
                            "oneOf": [
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "type": "object",
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "value": {
                                    "type": "number",
                                    "description": "The numerical data value of a numerical metric"
                                  }
                                }
                              },
                              {
                                "required": [
                                  "timestamp",
                                  "value"
                                ],
                                "type": "object",
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  },
                                  "value": {
                                    "type": "string",
                                    "description": "The string data value of a string metric"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "DatapointsPostDatapoint": {
        "type": "object",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "allOf": [
              {
                "required": [
                  "datapoints"
                ],
                "properties": {
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints. Total limit per request is 100000 datapoints.",
                    "items": {
                      "oneOf": [
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "value": {
                              "type": "number",
                              "description": "The numerical data value of a numerical metric"
                            }
                          }
                        },
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "value": {
                              "type": "string",
                              "description": "The string data value of a string metric"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "allOf": [
              {
                "required": [
                  "datapoints"
                ],
                "properties": {
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints. Total limit per request is 100000 datapoints.",
                    "items": {
                      "oneOf": [
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "value": {
                              "type": "number",
                              "description": "The numerical data value of a numerical metric"
                            }
                          }
                        },
                        {
                          "required": [
                            "timestamp",
                            "value"
                          ],
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            },
                            "value": {
                              "type": "string",
                              "description": "The string data value of a string metric"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "DatapointsInsertProperties": {
        "required": [
          "datapoints"
        ],
        "properties": {
          "datapoints": {
            "type": "array",
            "description": "The list of datapoints. Total limit per request is 100000 datapoints.",
            "items": {
              "oneOf": [
                {
                  "required": [
                    "timestamp",
                    "value"
                  ],
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "value": {
                      "type": "number",
                      "description": "The numerical data value of a numerical metric"
                    }
                  }
                },
                {
                  "required": [
                    "timestamp",
                    "value"
                  ],
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "value": {
                      "type": "string",
                      "description": "The string data value of a string metric"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DatapointsMultiQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Parameters describing a query for datapoints.",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "allOf": [
                    {
                      "properties": {
                        "start": {
                          "type": "string",
                          "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc."
                        },
                        "end": {
                          "type": "string",
                          "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Return up to this number of datapoints.",
                          "format": "int32"
                        },
                        "aggregates": {
                          "type": "array",
                          "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                          "minItems": 0,
                          "maxItems": 10,
                          "uniqueItems": true,
                          "items": {
                            "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                            "type": "string",
                            "enum": [
                              "average",
                              "max",
                              "min",
                              "count",
                              "sum",
                              "interpolation",
                              "stepInterpolation",
                              "totalVariation",
                              "continuousVariance",
                              "discreteVariance"
                            ]
                          }
                        },
                        "granularity": {
                          "type": "string",
                          "description": "The granularity size and granularity of the aggregates.",
                          "example": "1h"
                        },
                        "includeOutsidePoints": {
                          "type": "boolean",
                          "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                          "default": false
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "allOf": [
                    {
                      "properties": {
                        "start": {
                          "type": "string",
                          "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc."
                        },
                        "end": {
                          "type": "string",
                          "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Return up to this number of datapoints.",
                          "format": "int32"
                        },
                        "aggregates": {
                          "type": "array",
                          "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                          "minItems": 0,
                          "maxItems": 10,
                          "uniqueItems": true,
                          "items": {
                            "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                            "type": "string",
                            "enum": [
                              "average",
                              "max",
                              "min",
                              "count",
                              "sum",
                              "interpolation",
                              "stepInterpolation",
                              "totalVariation",
                              "continuousVariance",
                              "discreteVariance"
                            ]
                          }
                        },
                        "granularity": {
                          "type": "string",
                          "description": "The granularity size and granularity of the aggregates.",
                          "example": "1h"
                        },
                        "includeOutsidePoints": {
                          "type": "boolean",
                          "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                          "default": false
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "minItems": 1,
            "maxItems": 100
          },
          "start": {
            "type": "string",
            "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc.",
            "default": "0"
          },
          "end": {
            "type": "string",
            "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start.",
            "default": "now"
          },
          "limit": {
            "type": "integer",
            "description": "Return up to this number of datapoints.",
            "format": "int32",
            "default": 100
          },
          "aggregates": {
            "type": "array",
            "description": "The aggregates to be returned. This value overrides top-level default aggregates list when set. Specify all aggregates to be retrieved here. Specify empty array if this sub-query needs to return datapoints without aggregation.",
            "minItems": 0,
            "maxItems": 10,
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "average",
                "max",
                "min",
                "count",
                "sum",
                "interpolation",
                "stepInterpolation",
                "totalVariation",
                "continuousVariance",
                "discreteVariance"
              ]
            }
          },
          "granularity": {
            "type": "string",
            "description": "The time granularity size and unit to aggregate over.",
            "example": "1h"
          },
          "includeOutsidePoints": {
            "type": "boolean",
            "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
            "default": false
          }
        }
      },
      "DatapointsQuery": {
        "type": "object",
        "description": "Parameters describing a query for datapoints.",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "allOf": [
              {
                "properties": {
                  "start": {
                    "type": "string",
                    "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc."
                  },
                  "end": {
                    "type": "string",
                    "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Return up to this number of datapoints.",
                    "format": "int32"
                  },
                  "aggregates": {
                    "type": "array",
                    "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                    "minItems": 0,
                    "maxItems": 10,
                    "uniqueItems": true,
                    "items": {
                      "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                      "type": "string",
                      "enum": [
                        "average",
                        "max",
                        "min",
                        "count",
                        "sum",
                        "interpolation",
                        "stepInterpolation",
                        "totalVariation",
                        "continuousVariance",
                        "discreteVariance"
                      ]
                    }
                  },
                  "granularity": {
                    "type": "string",
                    "description": "The granularity size and granularity of the aggregates.",
                    "example": "1h"
                  },
                  "includeOutsidePoints": {
                    "type": "boolean",
                    "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                    "default": false
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "allOf": [
              {
                "properties": {
                  "start": {
                    "type": "string",
                    "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc."
                  },
                  "end": {
                    "type": "string",
                    "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Return up to this number of datapoints.",
                    "format": "int32"
                  },
                  "aggregates": {
                    "type": "array",
                    "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                    "minItems": 0,
                    "maxItems": 10,
                    "uniqueItems": true,
                    "items": {
                      "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
                      "type": "string",
                      "enum": [
                        "average",
                        "max",
                        "min",
                        "count",
                        "sum",
                        "interpolation",
                        "stepInterpolation",
                        "totalVariation",
                        "continuousVariance",
                        "discreteVariance"
                      ]
                    }
                  },
                  "granularity": {
                    "type": "string",
                    "description": "The granularity size and granularity of the aggregates.",
                    "example": "1h"
                  },
                  "includeOutsidePoints": {
                    "type": "boolean",
                    "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
                    "default": false
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "DatapointsQueryProperties": {
        "properties": {
          "start": {
            "type": "string",
            "description": "Get datapoints after this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch. Note that when using aggregates, the start time will be rounded down to a whole granularity unit (in UTC timezone). For granularity 2d it will be rounded to 0:00 AM on the same day, for 3h it will be rounded to the start of the hour, etc."
          },
          "end": {
            "type": "string",
            "description": "Get datapoints up to this time. Same format as for start. Note that when using aggregates, the end will be rounded up such that the last aggregate represents a full aggregation interval containing the original end, where the interval is the granularity unit times the granularity multiplier. For granularity 2d, the aggregation interval is 2 days, if end was originally 3 days after the start, it will be rounded to 4 days after the start."
          },
          "limit": {
            "type": "integer",
            "description": "Return up to this number of datapoints.",
            "format": "int32"
          },
          "aggregates": {
            "type": "array",
            "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
            "minItems": 0,
            "maxItems": 10,
            "uniqueItems": true,
            "items": {
              "description": "The aggregates to be returned.  Use default if null. An empty string must be sent to get raw data if the default is a set of aggregates.",
              "type": "string",
              "enum": [
                "average",
                "max",
                "min",
                "count",
                "sum",
                "interpolation",
                "stepInterpolation",
                "totalVariation",
                "continuousVariance",
                "discreteVariance"
              ]
            }
          },
          "granularity": {
            "type": "string",
            "description": "The granularity size and granularity of the aggregates.",
            "example": "1h"
          },
          "includeOutsidePoints": {
            "type": "boolean",
            "description": "Whether to include the last datapoint before the requested time period,and the first one after the requested period. This can be useful for interpolating data. Not available for aggregates.",
            "default": false
          }
        }
      },
      "DatapointsLatestQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of latest queries",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "object",
              "description": "Describes latest query",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "allOf": [
                    {
                      "properties": {
                        "before": {
                          "type": "string",
                          "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                          "default": "now"
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "allOf": [
                    {
                      "properties": {
                        "before": {
                          "type": "string",
                          "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                          "default": "now"
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "LatestDataBeforeRequest": {
        "type": "object",
        "description": "Describes latest query",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "allOf": [
              {
                "properties": {
                  "before": {
                    "type": "string",
                    "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                    "default": "now"
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "allOf": [
              {
                "properties": {
                  "before": {
                    "type": "string",
                    "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
                    "default": "now"
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "LatestDataPropertyFilter": {
        "properties": {
          "before": {
            "type": "string",
            "description": "Get first datapoint before this time. Format is N[timeunit]-ago where timeunit is w,d,h,m,s. Example: '2d-ago' will get everything that is up to 2 days old. Can also send time in ms since epoch.",
            "default": "now"
          }
        }
      },
      "DatapointsDeleteQuery": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of delete filters",
            "minItems": 1,
            "maxItems": 10000,
            "items": {
              "type": "object",
              "description": "Select timeseries and datapoints to delete.",
              "oneOf": [
                {
                  "required": [
                    "id"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "inclusiveBegin"
                      ],
                      "properties": {
                        "inclusiveBegin": {
                          "description": "The timestamp of first datapoint to delete",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "exclusiveEnd": {
                          "description": "If set, the timestamp of first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "required": [
                    "externalId"
                  ],
                  "allOf": [
                    {
                      "required": [
                        "inclusiveBegin"
                      ],
                      "properties": {
                        "inclusiveBegin": {
                          "description": "The timestamp of first datapoint to delete",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "exclusiveEnd": {
                          "description": "If set, the timestamp of first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "DatapointsDeleteRequest": {
        "type": "object",
        "description": "Select timeseries and datapoints to delete.",
        "oneOf": [
          {
            "required": [
              "id"
            ],
            "allOf": [
              {
                "required": [
                  "inclusiveBegin"
                ],
                "properties": {
                  "inclusiveBegin": {
                    "description": "The timestamp of first datapoint to delete",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "exclusiveEnd": {
                    "description": "If set, the timestamp of first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              {
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "required": [
              "externalId"
            ],
            "allOf": [
              {
                "required": [
                  "inclusiveBegin"
                ],
                "properties": {
                  "inclusiveBegin": {
                    "description": "The timestamp of first datapoint to delete",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "exclusiveEnd": {
                    "description": "If set, the timestamp of first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              {
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "DatapointsDeleteRange": {
        "required": [
          "inclusiveBegin"
        ],
        "properties": {
          "inclusiveBegin": {
            "description": "The timestamp of first datapoint to delete",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "exclusiveEnd": {
            "description": "If set, the timestamp of first datapoint after inclusiveBegin to not delete. If not set, only deletes the datapoint at inclusiveBegin.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "TimeSeriesLookupById": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of ID objects",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    }
                  }
                }
              ]
            },
            "maxItems": 1000,
            "minItems": 1
          }
        }
      },
      "TimeSeriesUpdateRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to timeseries.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "unit": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "assetId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to assetId."
                            },
                            "description": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "securityCategories": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to array object."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "object",
                      "description": "Changes will be applied to timeseries.",
                      "required": [
                        "update"
                      ],
                      "properties": {
                        "update": {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "name": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "metadata": {
                              "type": "object",
                              "description": "Object change",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "object",
                                      "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                      "additionalProperties": {
                                        "type": "string"
                                      },
                                      "example": {
                                        "key1": "value1",
                                        "key2": "value2"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "description": "Remove the key-value pairs with given keys.",
                                      "example": [
                                        "value1",
                                        "value2"
                                      ],
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "unit": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "assetId": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "integer",
                                      "format": "int64"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to assetId."
                            },
                            "description": {
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "required": [
                                    "setNull"
                                  ],
                                  "properties": {
                                    "setNull": {
                                      "type": "boolean",
                                      "enum": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to description."
                            },
                            "securityCategories": {
                              "type": "object",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "required": [
                                    "set"
                                  ],
                                  "properties": {
                                    "set": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "add": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    },
                                    "remove": {
                                      "uniqueItems": true,
                                      "type": "array",
                                      "items": {
                                        "type": "integer",
                                        "format": "int64"
                                      }
                                    }
                                  }
                                }
                              ],
                              "description": "Change that will be applied to array object."
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "externalId"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "TimeSeriesUpdate": {
        "oneOf": [
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to timeseries.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "name": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "unit": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "assetId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to assetId."
                      },
                      "description": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "securityCategories": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to array object."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Javascript friendly internal ID given to the object.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991,
                    "format": "int64"
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "type": "object",
                "description": "Changes will be applied to timeseries.",
                "required": [
                  "update"
                ],
                "properties": {
                  "update": {
                    "type": "object",
                    "properties": {
                      "externalId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "name": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Object change",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "object",
                                "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                                "additionalProperties": {
                                  "type": "string"
                                },
                                "example": {
                                  "key1": "value1",
                                  "key2": "value2"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "description": "Remove the key-value pairs with given keys.",
                                "example": [
                                  "value1",
                                  "value2"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "unit": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "assetId": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "integer",
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to assetId."
                      },
                      "description": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "required": [
                              "setNull"
                            ],
                            "properties": {
                              "setNull": {
                                "type": "boolean",
                                "enum": [
                                  true
                                ]
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to description."
                      },
                      "securityCategories": {
                        "type": "object",
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "set"
                            ],
                            "properties": {
                              "set": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "add": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              },
                              "remove": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                  "type": "integer",
                                  "format": "int64"
                                }
                              }
                            }
                          }
                        ],
                        "description": "Change that will be applied to array object."
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "externalId"
                ],
                "properties": {
                  "externalId": {
                    "description": "External Id provided by client. Should be unique within the project.",
                    "type": "string",
                    "maxLength": 255
                  }
                }
              }
            ]
          }
        ]
      },
      "TimeSeriesUpdateById": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to timeseries.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "name": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "unit": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "assetId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to assetId."
                  },
                  "description": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "securityCategories": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to array object."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Javascript friendly internal ID given to the object.",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991,
                "format": "int64"
              }
            }
          }
        ]
      },
      "TimeSeriesUpdateByExternalId": {
        "allOf": [
          {
            "type": "object",
            "description": "Changes will be applied to timeseries.",
            "required": [
              "update"
            ],
            "properties": {
              "update": {
                "type": "object",
                "properties": {
                  "externalId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "name": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Object change",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "object",
                            "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "example": {
                              "key1": "value1",
                              "key2": "value2"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "description": "Remove the key-value pairs with given keys.",
                            "example": [
                              "value1",
                              "value2"
                            ],
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "unit": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "assetId": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to assetId."
                  },
                  "description": {
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "setNull"
                        ],
                        "properties": {
                          "setNull": {
                            "type": "boolean",
                            "enum": [
                              true
                            ]
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to description."
                  },
                  "securityCategories": {
                    "type": "object",
                    "oneOf": [
                      {
                        "type": "object",
                        "required": [
                          "set"
                        ],
                        "properties": {
                          "set": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "add": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          },
                          "remove": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                              "type": "integer",
                              "format": "int64"
                            }
                          }
                        }
                      }
                    ],
                    "description": "Change that will be applied to array object."
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "description": "External Id provided by client. Should be unique within the project.",
                "type": "string",
                "maxLength": 255
              }
            }
          }
        ]
      },
      "TimeSeriesPatch": {
        "type": "object",
        "description": "Changes will be applied to timeseries.",
        "required": [
          "update"
        ],
        "properties": {
          "update": {
            "type": "object",
            "properties": {
              "externalId": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to description."
              },
              "name": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to description."
              },
              "metadata": {
                "type": "object",
                "description": "Object change",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Set the key-value pairs. All existing key-value pairs will be removed.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "object",
                        "description": "Add the key-value pairs. Values for existing keys will be overwritten.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "example": {
                          "key1": "value1",
                          "key2": "value2"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "description": "Remove the key-value pairs with given keys.",
                        "example": [
                          "value1",
                          "value2"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              },
              "unit": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to description."
              },
              "assetId": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to assetId."
              },
              "description": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "setNull"
                    ],
                    "properties": {
                      "setNull": {
                        "type": "boolean",
                        "enum": [
                          true
                        ]
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to description."
              },
              "securityCategories": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "set"
                    ],
                    "properties": {
                      "set": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "add": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      },
                      "remove": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                ],
                "description": "Change that will be applied to array object."
              }
            }
          }
        }
      },
      "Aggregate": {
        "type": "string",
        "enum": [
          "average",
          "max",
          "min",
          "count",
          "sum",
          "interpolation",
          "stepInterpolation",
          "totalVariation",
          "continuousVariance",
          "discreteVariance"
        ]
      },
      "TimeSeriesCursorResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 0,
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Generated id of the time series",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "Externally supplied id of the time series"
                },
                "name": {
                  "type": "string",
                  "description": "Name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "Asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of result"
      },
      "TimeSeriesCreateRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "Externally provided id for the time series (optional but recommended)"
                },
                "name": {
                  "type": "string",
                  "description": "Human readable name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "Asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "default": false,
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      },
      "MissingFieldError": {
        "type": "object",
        "required": [
          "code",
          "message",
          "missingFields"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "extra": {
            "type": "object",
            "description": "Additional data"
          },
          "missingFields": {
            "uniqueItems": true,
            "type": "array",
            "description": "Fields that are missing.",
            "items": {
              "type": "object",
              "description": "Fields that are missing"
            }
          }
        }
      },
      "DuplicatedResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "description": "Error details",
            "required": [
              "code",
              "message"
            ],
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "extra": {
                "type": "object",
                "description": "Additional data",
                "properties": {
                  "duplicated": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "Items which are duplicated",
                    "items": {
                      "description": "Ids and ExternalIds which are duplicated in request",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "object",
            "description": "Error details",
            "required": [
              "code",
              "message"
            ],
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code",
                "format": "int32"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              },
              "extra": {
                "type": "object",
                "description": "Additional data",
                "properties": {
                  "notFound": {
                    "uniqueItems": true,
                    "type": "array",
                    "description": "Items which are not found",
                    "items": {
                      "description": "Ids or ExternalIds which are not found",
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "externalId": {
                              "description": "External Id provided by client. Should be unique within the project.",
                              "type": "string",
                              "maxLength": 255
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DataGetTimeSeriesMetadataDTO": {
        "description": "List of responses. Order matches the requests order.",
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Generated id of the time series",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "Externally supplied id of the time series"
                },
                "name": {
                  "type": "string",
                  "description": "Name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "Asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "PostDatapoint": {
        "oneOf": [
          {
            "required": [
              "timestamp",
              "value"
            ],
            "type": "object",
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "value": {
                "type": "number",
                "description": "The numerical data value of a numerical metric"
              }
            }
          },
          {
            "required": [
              "timestamp",
              "value"
            ],
            "type": "object",
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "value": {
                "type": "string",
                "description": "The string data value of a string metric"
              }
            }
          }
        ]
      },
      "DataWithCursorGetTimeSeriesMetadataDTO": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minItems": 0,
            "items": {
              "required": [
                "id",
                "isString",
                "isStep",
                "createdTime",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "description": "Generated id of the time series",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "externalId": {
                  "type": "string",
                  "description": "Externally supplied id of the time series"
                },
                "name": {
                  "type": "string",
                  "description": "Name of time series"
                },
                "isString": {
                  "type": "boolean",
                  "description": "Whether the time series is string valued or not."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata. String key -> String value."
                },
                "unit": {
                  "type": "string",
                  "description": "The physical unit of the time series."
                },
                "assetId": {
                  "description": "Asset that this time series belongs to.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "isStep": {
                  "type": "boolean",
                  "description": "Whether the time series is a step series or not."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the time series."
                },
                "securityCategories": {
                  "type": "array",
                  "description": "Security categories required in order to access this time series.",
                  "items": {
                    "type": "integer",
                    "description": "Security categories required in order to access this time series.",
                    "format": "int64"
                  }
                },
                "createdTime": {
                  "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                },
                "lastUpdatedTime": {
                  "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of result"
      },
      "PostTimeSeriesMetadataDTO": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "Externally provided id for the time series (optional but recommended)"
          },
          "name": {
            "type": "string",
            "description": "Human readable name of time series"
          },
          "isString": {
            "type": "boolean",
            "default": false,
            "description": "Whether the time series is string valued or not."
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata. String key -> String value."
          },
          "unit": {
            "type": "string",
            "description": "The physical unit of the time series."
          },
          "assetId": {
            "description": "Asset that this time series belongs to.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "isStep": {
            "type": "boolean",
            "default": false,
            "description": "Whether the time series is a step series or not."
          },
          "description": {
            "type": "string",
            "description": "Description of the time series."
          },
          "securityCategories": {
            "type": "array",
            "description": "Security categories required in order to access this time series.",
            "items": {
              "type": "integer",
              "description": "Security categories required in order to access this time series.",
              "format": "int64"
            }
          }
        }
      },
      "StringOrNumber": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      },
      "GetDatapointMetadata": {
        "type": "object",
        "required": [
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "GetStringDatapoint": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "timestamp"
            ],
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "string",
                "description": "The data value."
              }
            }
          }
        ]
      },
      "GetDoubleDatapoint": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "timestamp"
            ],
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "type": "number",
                "description": "The data value."
              }
            }
          }
        ]
      },
      "GetAggregateDatapoint": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "timestamp"
            ],
            "properties": {
              "timestamp": {
                "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "average": {
                "type": "number",
                "description": "The integral average value in the aggregate period",
                "format": "double"
              },
              "max": {
                "type": "number",
                "description": "The maximum value in the aggregate period",
                "format": "double"
              },
              "min": {
                "type": "number",
                "description": "The minimum value in the aggregate period",
                "format": "double"
              },
              "count": {
                "type": "integer",
                "description": "The number of datapoints in the aggregate period",
                "format": "int32"
              },
              "sum": {
                "type": "number",
                "description": "The sum of the datapoints in the aggregate period",
                "format": "double"
              },
              "interpolation": {
                "type": "number",
                "description": "The interpolated value of the series in the beginning of the aggregate",
                "format": "double"
              },
              "stepInterpolation": {
                "type": "number",
                "description": "The last value before or at the beginning of the aggregate.",
                "format": "double"
              },
              "continuousVariance": {
                "type": "number",
                "description": "The variance of the interpolated underlying function.",
                "format": "double"
              },
              "discreteVariance": {
                "type": "number",
                "description": "The variance of the datapoint values.",
                "format": "double"
              },
              "totalVariation": {
                "type": "number",
                "description": "The total variation of the interpolated underlying function.",
                "format": "double"
              }
            }
          }
        ]
      },
      "GetTimeSeriesMetadataDTO": {
        "required": [
          "id",
          "isString",
          "isStep",
          "createdTime",
          "lastUpdatedTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Generated id of the time series",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "description": "Externally supplied id of the time series"
          },
          "name": {
            "type": "string",
            "description": "Name of time series"
          },
          "isString": {
            "type": "boolean",
            "description": "Whether the time series is string valued or not."
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata. String key -> String value."
          },
          "unit": {
            "type": "string",
            "description": "The physical unit of the time series."
          },
          "assetId": {
            "description": "Asset that this time series belongs to.",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991,
            "format": "int64"
          },
          "isStep": {
            "type": "boolean",
            "description": "Whether the time series is a step series or not."
          },
          "description": {
            "type": "string",
            "description": "Description of the time series."
          },
          "securityCategories": {
            "type": "array",
            "description": "Security categories required in order to access this time series.",
            "items": {
              "type": "integer",
              "description": "Security categories required in order to access this time series.",
              "format": "int64"
            }
          },
          "createdTime": {
            "description": "Time when this time-series is created in CDF in milliseconds since Jan 1, 1970.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          "lastUpdatedTime": {
            "description": "The latest time when this time-series is updated in CDF in milliseconds since Jan 1, 1970.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "DatapointsMetadata": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Id of the timeseries the datapoints belong to",
            "format": "int64",
            "type": "integer",
            "minimum": 1,
            "maximum": 9007199254740991
          },
          "externalId": {
            "type": "string",
            "description": "External id of the timeseries the datapoints belong to."
          }
        }
      },
      "DatapointsGetStringDatapoint": {
        "allOf": [
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Id of the timeseries the datapoints belong to",
                "format": "int64",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "externalId": {
                "type": "string",
                "description": "External id of the timeseries the datapoints belong to."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "datapoints",
              "isString"
            ],
            "properties": {
              "isString": {
                "description": "Whether the time series is string valued or not.",
                "type": "boolean"
              },
              "datapoints": {
                "type": "array",
                "description": "The list of datapoints",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "timestamp"
                      ],
                      "properties": {
                        "timestamp": {
                          "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The data value."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "DatapointsGetDoubleDatapoint": {
        "allOf": [
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Id of the timeseries the datapoints belong to",
                "format": "int64",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "externalId": {
                "type": "string",
                "description": "External id of the timeseries the datapoints belong to."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "datapoints",
              "isString"
            ],
            "properties": {
              "isString": {
                "description": "Whether the time series is string valued or not.",
                "type": "boolean"
              },
              "datapoints": {
                "type": "array",
                "description": "The list of datapoints",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "timestamp"
                      ],
                      "properties": {
                        "timestamp": {
                          "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "value"
                      ],
                      "properties": {
                        "value": {
                          "type": "number",
                          "description": "The data value."
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "DatapointsGetDatapoint": {
        "oneOf": [
          {
            "allOf": [
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Id of the timeseries the datapoints belong to",
                    "format": "int64",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991
                  },
                  "externalId": {
                    "type": "string",
                    "description": "External id of the timeseries the datapoints belong to."
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "datapoints",
                  "isString"
                ],
                "properties": {
                  "isString": {
                    "description": "Whether the time series is string valued or not.",
                    "type": "boolean"
                  },
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "timestamp"
                          ],
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "value"
                          ],
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "The data value."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "description": "Id of the timeseries the datapoints belong to",
                    "format": "int64",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 9007199254740991
                  },
                  "externalId": {
                    "type": "string",
                    "description": "External id of the timeseries the datapoints belong to."
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "datapoints",
                  "isString"
                ],
                "properties": {
                  "isString": {
                    "description": "Whether the time series is string valued or not.",
                    "type": "boolean"
                  },
                  "datapoints": {
                    "type": "array",
                    "description": "The list of datapoints",
                    "items": {
                      "allOf": [
                        {
                          "type": "object",
                          "required": [
                            "timestamp"
                          ],
                          "properties": {
                            "timestamp": {
                              "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                              "type": "integer",
                              "minimum": 0,
                              "format": "int64"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "value"
                          ],
                          "properties": {
                            "value": {
                              "type": "number",
                              "description": "The data value."
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        ],
        "discriminator": {
          "propertyName": "isString",
          "mapping": {
            "true": "#/components/schemas/DatapointsGetStringDatapoint",
            "false": "#/components/schemas/DatapointsGetDoubleDatapoint"
          }
        }
      },
      "DatapointsGetAggregateDatapoint": {
        "allOf": [
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "description": "Id of the timeseries the datapoints belong to",
                "format": "int64",
                "type": "integer",
                "minimum": 1,
                "maximum": 9007199254740991
              },
              "externalId": {
                "type": "string",
                "description": "External id of the timeseries the datapoints belong to."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "datapoints"
            ],
            "properties": {
              "datapoints": {
                "type": "array",
                "description": "The list of datapoints",
                "items": {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "timestamp"
                      ],
                      "properties": {
                        "timestamp": {
                          "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "average": {
                          "type": "number",
                          "description": "The integral average value in the aggregate period",
                          "format": "double"
                        },
                        "max": {
                          "type": "number",
                          "description": "The maximum value in the aggregate period",
                          "format": "double"
                        },
                        "min": {
                          "type": "number",
                          "description": "The minimum value in the aggregate period",
                          "format": "double"
                        },
                        "count": {
                          "type": "integer",
                          "description": "The number of datapoints in the aggregate period",
                          "format": "int32"
                        },
                        "sum": {
                          "type": "number",
                          "description": "The sum of the datapoints in the aggregate period",
                          "format": "double"
                        },
                        "interpolation": {
                          "type": "number",
                          "description": "The interpolated value of the series in the beginning of the aggregate",
                          "format": "double"
                        },
                        "stepInterpolation": {
                          "type": "number",
                          "description": "The last value before or at the beginning of the aggregate.",
                          "format": "double"
                        },
                        "continuousVariance": {
                          "type": "number",
                          "description": "The variance of the interpolated underlying function.",
                          "format": "double"
                        },
                        "discreteVariance": {
                          "type": "number",
                          "description": "The variance of the datapoint values.",
                          "format": "double"
                        },
                        "totalVariation": {
                          "type": "number",
                          "description": "The total variation of the interpolated underlying function.",
                          "format": "double"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "DatapointsOrAggregatesResponse": {
        "description": "List of responses. Order matches the requests order.",
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "Id of the timeseries the datapoints belong to",
                          "format": "int64",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "externalId": {
                          "type": "string",
                          "description": "External id of the timeseries the datapoints belong to."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "datapoints"
                      ],
                      "properties": {
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "timestamp"
                                ],
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "average": {
                                    "type": "number",
                                    "description": "The integral average value in the aggregate period",
                                    "format": "double"
                                  },
                                  "max": {
                                    "type": "number",
                                    "description": "The maximum value in the aggregate period",
                                    "format": "double"
                                  },
                                  "min": {
                                    "type": "number",
                                    "description": "The minimum value in the aggregate period",
                                    "format": "double"
                                  },
                                  "count": {
                                    "type": "integer",
                                    "description": "The number of datapoints in the aggregate period",
                                    "format": "int32"
                                  },
                                  "sum": {
                                    "type": "number",
                                    "description": "The sum of the datapoints in the aggregate period",
                                    "format": "double"
                                  },
                                  "interpolation": {
                                    "type": "number",
                                    "description": "The interpolated value of the series in the beginning of the aggregate",
                                    "format": "double"
                                  },
                                  "stepInterpolation": {
                                    "type": "number",
                                    "description": "The last value before or at the beginning of the aggregate.",
                                    "format": "double"
                                  },
                                  "continuousVariance": {
                                    "type": "number",
                                    "description": "The variance of the interpolated underlying function.",
                                    "format": "double"
                                  },
                                  "discreteVariance": {
                                    "type": "number",
                                    "description": "The variance of the datapoint values.",
                                    "format": "double"
                                  },
                                  "totalVariation": {
                                    "type": "number",
                                    "description": "The total variation of the interpolated underlying function.",
                                    "format": "double"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "Id of the timeseries the datapoints belong to",
                              "format": "int64",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991
                            },
                            "externalId": {
                              "type": "string",
                              "description": "External id of the timeseries the datapoints belong to."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "datapoints",
                            "isString"
                          ],
                          "properties": {
                            "isString": {
                              "description": "Whether the time series is string valued or not.",
                              "type": "boolean"
                            },
                            "datapoints": {
                              "type": "array",
                              "description": "The list of datapoints",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "timestamp"
                                    ],
                                    "properties": {
                                      "timestamp": {
                                        "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                        "type": "integer",
                                        "minimum": 0,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "value"
                                    ],
                                    "properties": {
                                      "value": {
                                        "type": "string",
                                        "description": "The data value."
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "required": [
                            "id"
                          ],
                          "properties": {
                            "id": {
                              "description": "Id of the timeseries the datapoints belong to",
                              "format": "int64",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991
                            },
                            "externalId": {
                              "type": "string",
                              "description": "External id of the timeseries the datapoints belong to."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "datapoints",
                            "isString"
                          ],
                          "properties": {
                            "isString": {
                              "description": "Whether the time series is string valued or not.",
                              "type": "boolean"
                            },
                            "datapoints": {
                              "type": "array",
                              "description": "The list of datapoints",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "required": [
                                      "timestamp"
                                    ],
                                    "properties": {
                                      "timestamp": {
                                        "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                        "type": "integer",
                                        "minimum": 0,
                                        "format": "int64"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "required": [
                                      "value"
                                    ],
                                    "properties": {
                                      "value": {
                                        "type": "number",
                                        "description": "The data value."
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "discriminator": {
                    "propertyName": "isString",
                    "mapping": {
                      "true": "#/components/schemas/DatapointsGetStringDatapoint",
                      "false": "#/components/schemas/DatapointsGetDoubleDatapoint"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "DatapointsResponse": {
        "type": "object",
        "description": "List of responses. Order matches the requests order.",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "allOf": [
                    {
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "Id of the timeseries the datapoints belong to",
                          "format": "int64",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "externalId": {
                          "type": "string",
                          "description": "External id of the timeseries the datapoints belong to."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "datapoints",
                        "isString"
                      ],
                      "properties": {
                        "isString": {
                          "description": "Whether the time series is string valued or not.",
                          "type": "boolean"
                        },
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "timestamp"
                                ],
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "value"
                                ],
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "description": "The data value."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "description": "Id of the timeseries the datapoints belong to",
                          "format": "int64",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "externalId": {
                          "type": "string",
                          "description": "External id of the timeseries the datapoints belong to."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "datapoints",
                        "isString"
                      ],
                      "properties": {
                        "isString": {
                          "description": "Whether the time series is string valued or not.",
                          "type": "boolean"
                        },
                        "datapoints": {
                          "type": "array",
                          "description": "The list of datapoints",
                          "items": {
                            "allOf": [
                              {
                                "type": "object",
                                "required": [
                                  "timestamp"
                                ],
                                "properties": {
                                  "timestamp": {
                                    "description": "The data timestamp in milliseconds since the epoch (Jan 1, 1970).",
                                    "type": "integer",
                                    "minimum": 0,
                                    "format": "int64"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "required": [
                                  "value"
                                ],
                                "properties": {
                                  "value": {
                                    "type": "number",
                                    "description": "The data value."
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              ],
              "discriminator": {
                "propertyName": "isString",
                "mapping": {
                  "true": "#/components/schemas/DatapointsGetStringDatapoint",
                  "false": "#/components/schemas/DatapointsGetDoubleDatapoint"
                }
              }
            }
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "unit": {
            "description": "Filter on unit (case-sensitive).",
            "type": "string"
          },
          "isString": {
            "description": "Filter on isString.",
            "type": "boolean"
          },
          "isStep": {
            "description": "Filter on isStep.",
            "type": "boolean"
          },
          "metadata": {
            "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
            "example": {
              "key1": "value1",
              "key2": "value2"
            },
            "type": "object"
          },
          "assetIds": {
            "type": "array",
            "description": "Filter out time series that are not linked to any of these assets.",
            "example": [
              363848954441724,
              793045462540095,
              1261042166839739
            ],
            "items": {
              "description": "Javascript friendly internal ID given to the object.",
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991,
              "format": "int64"
            },
            "minItems": 1,
            "maxItems": 100,
            "uniqueItems": true
          },
          "createdTime": {
            "description": "Filter out time series with createdTime outside this range.",
            "type": "object",
            "properties": {
              "max": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          },
          "lastUpdatedTime": {
            "description": "Filter out time series with lastUpdatedTime outside this range.",
            "type": "object",
            "properties": {
              "max": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              },
              "min": {
                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                "type": "integer",
                "minimum": 0,
                "format": "int64"
              }
            }
          }
        }
      },
      "Search": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Prefix and fuzzy search on name.",
            "type": "string"
          },
          "description": {
            "description": "Prefix and fuzzy search on description.",
            "type": "string"
          },
          "query": {
            "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
            "type": "string"
          }
        }
      },
      "TimeSeriesSearchDTO": {
        "type": "object",
        "properties": {
          "filter": {
            "description": "Filtering parameters",
            "type": "object",
            "properties": {
              "unit": {
                "description": "Filter on unit (case-sensitive).",
                "type": "string"
              },
              "isString": {
                "description": "Filter on isString.",
                "type": "boolean"
              },
              "isStep": {
                "description": "Filter on isStep.",
                "type": "boolean"
              },
              "metadata": {
                "description": "Filter out timeseries that do not match these metadata fields and values (case-sensitive). Format is {\"key1\":\"value1\",\"key2\":\"value2\"}.",
                "example": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "type": "object"
              },
              "assetIds": {
                "type": "array",
                "description": "Filter out time series that are not linked to any of these assets.",
                "example": [
                  363848954441724,
                  793045462540095,
                  1261042166839739
                ],
                "items": {
                  "description": "Javascript friendly internal ID given to the object.",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 9007199254740991,
                  "format": "int64"
                },
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true
              },
              "createdTime": {
                "description": "Filter out time series with createdTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              },
              "lastUpdatedTime": {
                "description": "Filter out time series with lastUpdatedTime outside this range.",
                "type": "object",
                "properties": {
                  "max": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  },
                  "min": {
                    "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int64"
                  }
                }
              }
            }
          },
          "search": {
            "description": "Search parameters",
            "type": "object",
            "properties": {
              "name": {
                "description": "Prefix and fuzzy search on name.",
                "type": "string"
              },
              "description": {
                "description": "Prefix and fuzzy search on description.",
                "type": "string"
              },
              "query": {
                "description": "Search on name and description using wildcard search on each of the words (separated by spaces). Retrieves results where at least one word must match. Example: '*some* *other*'",
                "type": "string"
              }
            }
          },
          "limit": {
            "description": "Return up to this many results.",
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 100
          }
        }
      },
      "NullableSinglePatchLong": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "setNull"
            ],
            "properties": {
              "setNull": {
                "type": "boolean",
                "enum": [
                  true
                ]
              }
            }
          }
        ],
        "description": "Change that will be applied to assetId."
      },
      "NullableSinglePatchString": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "setNull"
            ],
            "properties": {
              "setNull": {
                "type": "boolean",
                "enum": [
                  true
                ]
              }
            }
          }
        ],
        "description": "Change that will be applied to description."
      },
      "DataRawDB": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of a database."
                }
              },
              "description": "A NoSQL database to store customer data."
            }
          }
        }
      },
      "DataRawDBRow": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "columns",
                "key"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Unique row key"
                },
                "columns": {
                  "type": "object",
                  "description": "Row data stored as a JSON object."
                }
              }
            }
          }
        }
      },
      "DataRawDBRowKey": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "key"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Unique row key"
                }
              },
              "description": "A row key"
            }
          }
        }
      },
      "DataRawDBTable": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of the table"
                }
              },
              "description": "A NoSQL database table to store customer data"
            }
          }
        }
      },
      "DataWithCursorRawDBRow": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "columns",
                "key",
                "lastUpdatedTime"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Unique row key"
                },
                "columns": {
                  "type": "object",
                  "description": "Row data stored as a JSON object."
                },
                "lastUpdatedTime": {
                  "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                  "type": "integer",
                  "minimum": 0,
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "DataWithCursorRawDBTable": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of the table"
                }
              },
              "description": "A NoSQL database table to store customer data"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "RawDBTable": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the table"
          }
        },
        "description": "A NoSQL database table to store customer data"
      },
      "RawRowCSV": {
        "type": "object",
        "properties": {
          "columnHeaders": {
            "type": "array",
            "description": "Headers for the different columns in the response.",
            "items": {
              "type": "string",
              "description": "Headers for the different columns in the response."
            }
          },
          "rows": {
            "type": "array",
            "description": "Rows of column values, in same order as columnHeaders.",
            "items": {
              "type": "array",
              "description": "Rows of column values, in same order as columnHeaders.",
              "items": {
                "type": "object",
                "description": "Rows of column values, in same order as columnHeaders."
              }
            }
          }
        },
        "description": "Raw row result written in CSV format, with column columnHeaders."
      },
      "DataWithCursorRawDB": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Unique name of a database."
                }
              },
              "description": "A NoSQL database to store customer data."
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
      },
      "RawDB": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of a database."
          }
        },
        "description": "A NoSQL database to store customer data."
      },
      "RawDBRow": {
        "required": [
          "columns",
          "key",
          "lastUpdatedTime"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique row key"
          },
          "columns": {
            "type": "object",
            "description": "Row data stored as a JSON object."
          },
          "lastUpdatedTime": {
            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        }
      },
      "RawDBRowInsert": {
        "required": [
          "columns",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique row key"
          },
          "columns": {
            "type": "object",
            "description": "Row data stored as a JSON object."
          }
        }
      },
      "RawDBRowKey": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique row key"
          }
        },
        "description": "A row key"
      },
      "TokenStatusDTO": {
        "type": "object",
        "required": [
          "token",
          "valid",
          "expired"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The token that was sent for validation",
            "example": "ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhY2NvdW50X3R5cGUiOiAidXNlcl9hY2NvdW50IiwKICAicHJvamVjdF9pZCI6IDI5MzgyOTU3MjA2NzUzNTMsCiAgInVuaXF1ZV9uYW1lIjogIm1hcnRpbi5yb2VkQGNvZ25pdGUuY29tIiwKICAic2Vzc2lvblRpY2tldCI6ICJDQUlTSkdKa04yUmxZMkUyTFRkbFltSXROR1E1TlMxaU16QmtMVFF4T1dRMFlUSTVaRGRqTkJvRFFWQkpJa01hRjIxaGNuUnBiaTV5YjJWa1FHTnZaMjVwZEdVdVkyOXRJSm1RdE1YVWk1d0ZLaC9vbjQ3QzE5Uld0TXZQMkpYTGd3YTVrNm0wbHMvS0NMVHB5SWFDcEpBTEtnTkJVRWtxREVGVlZFZ3RVMFZTVmtsRFJUSU1DTnlkdCtVRkVNQ2c0ck1CT2d3STZMSzM1UVVRd0tEaXN3RkNEQWpjbmJmbEJSREFvT0t6QVVvTUlnb0lBUklDQUFFYUFnb0FTZzhxRFFnQkVnVUFBUUlEQkJvQ0dnQktDeW9KQ0FFU0FRQWFBaW9BU2d3eUNnZ0JFZ0lBQVJvQ0NnQktERG9LQ0FFU0FnQUJHZ0lLQUVvTVFnb0lBUklDQUFFYUFnb0FTZzlLRFFnQkVnVUFBUUlFQXhvQ0dnQktERklLQ0FFU0FnRURHZ0lhQUVvT1dnd0lBUklFQVFRQ0FCb0NDZ0JLRFdJTENBRVNBd0lCQUJvQ0NnQktER29LQ0FFU0FnQUJHZ0lLQUVvTGNna0lBUklCQUJvQ0tnQktEM0lOQ0FFU0JRQUJBZ01FR2dJYUFFb09lZ3dJQVJJRUFBRUNBeG9DR2dCS0RZSUJDZ2dCRWdJQUFSb0NDZ0JLRFlvQkNnZ0JFZ0lBQVJvQ0NnQktEcElCQ3dnQkVnTUFBZ0VhQWdvQVNncWFBUWNTQVFBYUFob0EiLAogICJzaWduaW5nX2tleSI6ICIyZTAyMGM3NS1kODcwLTQxNWItYTY2Ny02OGZiODk0MTgwZjEiLAogICJleHBpcmVfdGltZSI6IDE1NTQ4OTcyNTYKfQ==.WNTT7qvdj4KUbIwo8x4Upq3Ki/X9rd0lqMbcIlLCDwjqrH2OH4jc/CgE/Uk9z9HeCCSWDDwJYGXOiIc+bZGQdzuYDPd5LYN8SaT1bDfa5mkAaPpk7f0KSBqp5FceNWSqjh1/mevX0OhNMbB6z5KXU9t7EDgNFWgMT2zUpfll0nNYhAgJBU1MeGtxVZcRLIP2iAEmFR4XlLlxc+bi0SxGGUZHPn2AQq5jitbJAdjnwf5KCr+2HH1Dww75q7qiGZ7NsO7ipTGdO/KaaTvlLp90k5jT4a7fPqCuMWS25NgJK4dQIEqtCvHaqnMV1Q+G6WtdEy+Qcx581H8J3A2LV1pQYA=="
          },
          "valid": {
            "type": "boolean",
            "description": "Whether this token is valid"
          },
          "expired": {
            "type": "boolean",
            "description": "Whether this token has expired"
          }
        }
      },
      "SingleTokenStatusDTOResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "token",
              "valid",
              "expired"
            ],
            "properties": {
              "token": {
                "type": "string",
                "description": "The token that was sent for validation",
                "example": "ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhY2NvdW50X3R5cGUiOiAidXNlcl9hY2NvdW50IiwKICAicHJvamVjdF9pZCI6IDI5MzgyOTU3MjA2NzUzNTMsCiAgInVuaXF1ZV9uYW1lIjogIm1hcnRpbi5yb2VkQGNvZ25pdGUuY29tIiwKICAic2Vzc2lvblRpY2tldCI6ICJDQUlTSkdKa04yUmxZMkUyTFRkbFltSXROR1E1TlMxaU16QmtMVFF4T1dRMFlUSTVaRGRqTkJvRFFWQkpJa01hRjIxaGNuUnBiaTV5YjJWa1FHTnZaMjVwZEdVdVkyOXRJSm1RdE1YVWk1d0ZLaC9vbjQ3QzE5Uld0TXZQMkpYTGd3YTVrNm0wbHMvS0NMVHB5SWFDcEpBTEtnTkJVRWtxREVGVlZFZ3RVMFZTVmtsRFJUSU1DTnlkdCtVRkVNQ2c0ck1CT2d3STZMSzM1UVVRd0tEaXN3RkNEQWpjbmJmbEJSREFvT0t6QVVvTUlnb0lBUklDQUFFYUFnb0FTZzhxRFFnQkVnVUFBUUlEQkJvQ0dnQktDeW9KQ0FFU0FRQWFBaW9BU2d3eUNnZ0JFZ0lBQVJvQ0NnQktERG9LQ0FFU0FnQUJHZ0lLQUVvTVFnb0lBUklDQUFFYUFnb0FTZzlLRFFnQkVnVUFBUUlFQXhvQ0dnQktERklLQ0FFU0FnRURHZ0lhQUVvT1dnd0lBUklFQVFRQ0FCb0NDZ0JLRFdJTENBRVNBd0lCQUJvQ0NnQktER29LQ0FFU0FnQUJHZ0lLQUVvTGNna0lBUklCQUJvQ0tnQktEM0lOQ0FFU0JRQUJBZ01FR2dJYUFFb09lZ3dJQVJJRUFBRUNBeG9DR2dCS0RZSUJDZ2dCRWdJQUFSb0NDZ0JLRFlvQkNnZ0JFZ0lBQVJvQ0NnQktEcElCQ3dnQkVnTUFBZ0VhQWdvQVNncWFBUWNTQVFBYUFob0EiLAogICJzaWduaW5nX2tleSI6ICIyZTAyMGM3NS1kODcwLTQxNWItYTY2Ny02OGZiODk0MTgwZjEiLAogICJleHBpcmVfdGltZSI6IDE1NTQ4OTcyNTYKfQ==.WNTT7qvdj4KUbIwo8x4Upq3Ki/X9rd0lqMbcIlLCDwjqrH2OH4jc/CgE/Uk9z9HeCCSWDDwJYGXOiIc+bZGQdzuYDPd5LYN8SaT1bDfa5mkAaPpk7f0KSBqp5FceNWSqjh1/mevX0OhNMbB6z5KXU9t7EDgNFWgMT2zUpfll0nNYhAgJBU1MeGtxVZcRLIP2iAEmFR4XlLlxc+bi0SxGGUZHPn2AQq5jitbJAdjnwf5KCr+2HH1Dww75q7qiGZ7NsO7ipTGdO/KaaTvlLp90k5jT4a7fPqCuMWS25NgJK4dQIEqtCvHaqnMV1Q+G6WtdEy+Qcx581H8J3A2LV1pQYA=="
              },
              "valid": {
                "type": "boolean",
                "description": "Whether this token is valid"
              },
              "expired": {
                "type": "boolean",
                "description": "Whether this token has expired"
              }
            }
          }
        }
      },
      "IdToken": {
        "type": "object",
        "required": [
          "sub",
          "project_name",
          "groups",
          "signing_key",
          "exp"
        ],
        "properties": {
          "sub": {
            "type": "string",
            "description": "The subject of the token",
            "example": "tim@apple.com"
          },
          "project_name": {
            "type": "string",
            "description": "Which CDF project the subject is in",
            "example": "apple"
          },
          "groups": {
            "type": "array",
            "description": "Which groups (by id) the subject is in",
            "items": {
              "type": "integer",
              "description": "Which groups (by id) the subject is in",
              "format": "int64"
            },
            "example": [
              123982398,
              123981283723,
              7283273927
            ]
          },
          "signing_key": {
            "type": "string",
            "description": "The signing key id",
            "example": "a769f8ef-d5e3-4cf7-b914-2a6de189d942"
          },
          "exp": {
            "type": "integer",
            "description": "The expiration time of the token in seconds (unix)",
            "format": "int64",
            "example": 1554897484
          }
        },
        "description": "An ID JWT token"
      },
      "LoginUrlResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "The url where the user can be redirected to sign in."
              }
            },
            "description": "Represents an url where the user can be redirected to sign in."
          }
        }
      },
      "LoginUrlDTO": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The url where the user can be redirected to sign in."
          }
        },
        "description": "Represents an url where the user can be redirected to sign in."
      },
      "LoginStatusDTO": {
        "type": "object",
        "required": [
          "user",
          "loggedIn",
          "project",
          "projectId"
        ],
        "properties": {
          "user": {
            "type": "string",
            "description": "The user principal, e.g john.doe@corporation.com.",
            "example": "tim@apple.com"
          },
          "loggedIn": {
            "type": "boolean",
            "description": "Whether the user is logged in or not.",
            "example": true
          },
          "project": {
            "type": "string",
            "description": "Name of project user belongs to",
            "example": "tesla"
          },
          "projectId": {
            "type": "integer",
            "description": "Internal project id of the project",
            "format": "int64",
            "example": 137238723719
          },
          "apiKeyId": {
            "type": "integer",
            "format": "int64",
            "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
          }
        },
        "description": "Represents the current authentication status of the request"
      },
      "GroupName": {
        "type": "string",
        "description": "Name of the group",
        "example": "Production Engineers"
      },
      "GroupSourceId": {
        "type": "string",
        "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
        "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
      },
      "Group": {
        "type": "object",
        "required": [
          "name",
          "id",
          "isDeleted"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the group",
            "example": "Production Engineers"
          },
          "sourceId": {
            "type": "string",
            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "title": "groupsAcl",
                  "properties": {
                    "groupsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Group:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all groups",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "groups the current user is in",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "Group:Scope"
                        }
                      },
                      "title": "Acl:Group"
                    }
                  }
                },
                {
                  "title": "assetsAcl",
                  "properties": {
                    "assetsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Asset:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Asset:Scope"
                        }
                      },
                      "title": "Acl:Asset"
                    }
                  }
                },
                {
                  "title": "eventsAcl",
                  "properties": {
                    "eventsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Event:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Event:Scope"
                        }
                      },
                      "title": "Acl:Event"
                    }
                  }
                },
                {
                  "title": "filesAcl",
                  "properties": {
                    "filesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "File:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "File:Scope"
                        }
                      },
                      "title": "Acl:File"
                    }
                  }
                },
                {
                  "title": "usersAcl",
                  "properties": {
                    "usersAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "User:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all users",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "the current user making the request",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "User:Scope"
                        }
                      },
                      "title": "Acl:User"
                    }
                  }
                },
                {
                  "title": "projectsAcl",
                  "properties": {
                    "projectsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE"
                            ],
                            "default": "LIST",
                            "title": "Project:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Project:Scope"
                        }
                      },
                      "title": "Acl:Project"
                    }
                  }
                },
                {
                  "title": "securityCategoriesAcl",
                  "properties": {
                    "securityCategoriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "MEMBEROF",
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "MEMBEROF",
                            "title": "SecurityCategory:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "SecurityCategory:Scope"
                        }
                      },
                      "title": "Acl:SecurityCategory"
                    }
                  }
                },
                {
                  "title": "rawAcl",
                  "properties": {
                    "rawAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Raw:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Raw:Scope"
                        }
                      },
                      "title": "Acl:Raw"
                    }
                  }
                },
                {
                  "title": "timeSeriesAcl",
                  "properties": {
                    "timeSeriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Timeseries:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "assetIdScope": {
                                  "type": "object",
                                  "properties": {
                                    "subtreeIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "format": "uint64"
                                      },
                                      "title": "root asset id (subtrees)"
                                    }
                                  },
                                  "title": "Scope:AssetIdScope"
                                }
                              }
                            }
                          ],
                          "title": "Timeseries:Scope"
                        }
                      },
                      "title": "Acl:Timeseries"
                    }
                  }
                },
                {
                  "title": "apikeysAcl",
                  "properties": {
                    "apikeysAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Apikey:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "apikeys the user making the request has",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "Apikey:Scope"
                        }
                      },
                      "title": "Acl:Apikey"
                    }
                  }
                },
                {
                  "title": "threedAcl",
                  "properties": {
                    "threedAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "READ",
                            "title": "Threed:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Threed:Scope"
                        }
                      },
                      "title": "Acl:Threed"
                    }
                  }
                },
                {
                  "title": "sequencesAcl",
                  "properties": {
                    "sequencesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Sequences:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Sequences:Scope"
                        }
                      },
                      "title": "Acl:Sequences"
                    }
                  }
                },
                {
                  "title": "analyticsAcl",
                  "properties": {
                    "analyticsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "EXECUTE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Analytics:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Analytics:Scope"
                        }
                      },
                      "title": "Acl:Analytics"
                    }
                  }
                }
              ]
            },
            "title": "Capability"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "default": false
          },
          "deletedTime": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "GroupResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "id",
                "isDeleted"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the group",
                  "example": "Production Engineers"
                },
                "sourceId": {
                  "type": "string",
                  "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
                  "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "groupsAcl",
                        "properties": {
                          "groupsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Group:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all groups",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "groups the current user is in",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Group:Scope"
                              }
                            },
                            "title": "Acl:Group"
                          }
                        }
                      },
                      {
                        "title": "assetsAcl",
                        "properties": {
                          "assetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Asset:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Asset:Scope"
                              }
                            },
                            "title": "Acl:Asset"
                          }
                        }
                      },
                      {
                        "title": "eventsAcl",
                        "properties": {
                          "eventsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Event:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Event:Scope"
                              }
                            },
                            "title": "Acl:Event"
                          }
                        }
                      },
                      {
                        "title": "filesAcl",
                        "properties": {
                          "filesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "File:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "File:Scope"
                              }
                            },
                            "title": "Acl:File"
                          }
                        }
                      },
                      {
                        "title": "usersAcl",
                        "properties": {
                          "usersAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "User:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all users",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "the current user making the request",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "User:Scope"
                              }
                            },
                            "title": "Acl:User"
                          }
                        }
                      },
                      {
                        "title": "projectsAcl",
                        "properties": {
                          "projectsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE"
                                  ],
                                  "default": "LIST",
                                  "title": "Project:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Project:Scope"
                              }
                            },
                            "title": "Acl:Project"
                          }
                        }
                      },
                      {
                        "title": "securityCategoriesAcl",
                        "properties": {
                          "securityCategoriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "MEMBEROF",
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "MEMBEROF",
                                  "title": "SecurityCategory:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "SecurityCategory:Scope"
                              }
                            },
                            "title": "Acl:SecurityCategory"
                          }
                        }
                      },
                      {
                        "title": "rawAcl",
                        "properties": {
                          "rawAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Raw:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Raw:Scope"
                              }
                            },
                            "title": "Acl:Raw"
                          }
                        }
                      },
                      {
                        "title": "timeSeriesAcl",
                        "properties": {
                          "timeSeriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Timeseries:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "assetIdScope": {
                                        "type": "object",
                                        "properties": {
                                          "subtreeIds": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "root asset id (subtrees)"
                                          }
                                        },
                                        "title": "Scope:AssetIdScope"
                                      }
                                    }
                                  }
                                ],
                                "title": "Timeseries:Scope"
                              }
                            },
                            "title": "Acl:Timeseries"
                          }
                        }
                      },
                      {
                        "title": "apikeysAcl",
                        "properties": {
                          "apikeysAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Apikey:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "apikeys the user making the request has",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Apikey:Scope"
                              }
                            },
                            "title": "Acl:Apikey"
                          }
                        }
                      },
                      {
                        "title": "threedAcl",
                        "properties": {
                          "threedAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "READ",
                                  "title": "Threed:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Threed:Scope"
                              }
                            },
                            "title": "Acl:Threed"
                          }
                        }
                      },
                      {
                        "title": "sequencesAcl",
                        "properties": {
                          "sequencesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Sequences:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Sequences:Scope"
                              }
                            },
                            "title": "Acl:Sequences"
                          }
                        }
                      },
                      {
                        "title": "analyticsAcl",
                        "properties": {
                          "analyticsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "EXECUTE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Analytics:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Analytics:Scope"
                              }
                            },
                            "title": "Acl:Analytics"
                          }
                        }
                      }
                    ]
                  },
                  "title": "Capability"
                },
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "isDeleted": {
                  "type": "boolean",
                  "default": false
                },
                "deletedTime": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "GroupSpec": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the group",
            "example": "Production Engineers"
          },
          "sourceId": {
            "type": "string",
            "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
            "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "title": "groupsAcl",
                  "properties": {
                    "groupsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Group:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all groups",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "groups the current user is in",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "Group:Scope"
                        }
                      },
                      "title": "Acl:Group"
                    }
                  }
                },
                {
                  "title": "assetsAcl",
                  "properties": {
                    "assetsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Asset:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Asset:Scope"
                        }
                      },
                      "title": "Acl:Asset"
                    }
                  }
                },
                {
                  "title": "eventsAcl",
                  "properties": {
                    "eventsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Event:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Event:Scope"
                        }
                      },
                      "title": "Acl:Event"
                    }
                  }
                },
                {
                  "title": "filesAcl",
                  "properties": {
                    "filesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "File:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "File:Scope"
                        }
                      },
                      "title": "Acl:File"
                    }
                  }
                },
                {
                  "title": "usersAcl",
                  "properties": {
                    "usersAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "User:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "title": "all users",
                                  "type": "object"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "the current user making the request",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "User:Scope"
                        }
                      },
                      "title": "Acl:User"
                    }
                  }
                },
                {
                  "title": "projectsAcl",
                  "properties": {
                    "projectsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "READ",
                              "CREATE",
                              "UPDATE"
                            ],
                            "default": "LIST",
                            "title": "Project:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Project:Scope"
                        }
                      },
                      "title": "Acl:Project"
                    }
                  }
                },
                {
                  "title": "securityCategoriesAcl",
                  "properties": {
                    "securityCategoriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "MEMBEROF",
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "MEMBEROF",
                            "title": "SecurityCategory:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "SecurityCategory:Scope"
                        }
                      },
                      "title": "Acl:SecurityCategory"
                    }
                  }
                },
                {
                  "title": "rawAcl",
                  "properties": {
                    "rawAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Raw:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Raw:Scope"
                        }
                      },
                      "title": "Acl:Raw"
                    }
                  }
                },
                {
                  "title": "timeSeriesAcl",
                  "properties": {
                    "timeSeriesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Timeseries:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "assetIdScope": {
                                  "type": "object",
                                  "properties": {
                                    "subtreeIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "format": "uint64"
                                      },
                                      "title": "root asset id (subtrees)"
                                    }
                                  },
                                  "title": "Scope:AssetIdScope"
                                }
                              }
                            }
                          ],
                          "title": "Timeseries:Scope"
                        }
                      },
                      "title": "Acl:Timeseries"
                    }
                  }
                },
                {
                  "title": "apikeysAcl",
                  "properties": {
                    "apikeysAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "LIST",
                              "CREATE",
                              "DELETE"
                            ],
                            "default": "LIST",
                            "title": "Apikey:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "oneOf": [
                            {
                              "properties": {
                                "all": {
                                  "type": "object",
                                  "title": "Scope:All"
                                }
                              }
                            },
                            {
                              "properties": {
                                "currentuserscope": {
                                  "title": "apikeys the user making the request has",
                                  "type": "object"
                                }
                              }
                            }
                          ],
                          "title": "Apikey:Scope"
                        }
                      },
                      "title": "Acl:Apikey"
                    }
                  }
                },
                {
                  "title": "threedAcl",
                  "properties": {
                    "threedAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "CREATE",
                              "UPDATE",
                              "DELETE"
                            ],
                            "default": "READ",
                            "title": "Threed:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Threed:Scope"
                        }
                      },
                      "title": "Acl:Threed"
                    }
                  }
                },
                {
                  "title": "sequencesAcl",
                  "properties": {
                    "sequencesAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "WRITE"
                            ],
                            "default": "READ",
                            "title": "Sequences:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Sequences:Scope"
                        }
                      },
                      "title": "Acl:Sequences"
                    }
                  }
                },
                {
                  "title": "analyticsAcl",
                  "properties": {
                    "analyticsAcl": {
                      "type": "object",
                      "required": [
                        "actions",
                        "scope"
                      ],
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "READ",
                              "EXECUTE",
                              "LIST"
                            ],
                            "default": "READ",
                            "title": "Analytics:Action"
                          }
                        },
                        "scope": {
                          "type": "object",
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          },
                          "title": "Analytics:Scope"
                        }
                      },
                      "title": "Acl:Analytics"
                    }
                  }
                }
              ]
            },
            "title": "Capability"
          }
        },
        "description": "A specification for creating a new group"
      },
      "DataGroup": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "id",
                "isDeleted"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the group",
                  "example": "Production Engineers"
                },
                "sourceId": {
                  "type": "string",
                  "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
                  "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "groupsAcl",
                        "properties": {
                          "groupsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Group:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all groups",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "groups the current user is in",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Group:Scope"
                              }
                            },
                            "title": "Acl:Group"
                          }
                        }
                      },
                      {
                        "title": "assetsAcl",
                        "properties": {
                          "assetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Asset:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Asset:Scope"
                              }
                            },
                            "title": "Acl:Asset"
                          }
                        }
                      },
                      {
                        "title": "eventsAcl",
                        "properties": {
                          "eventsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Event:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Event:Scope"
                              }
                            },
                            "title": "Acl:Event"
                          }
                        }
                      },
                      {
                        "title": "filesAcl",
                        "properties": {
                          "filesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "File:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "File:Scope"
                              }
                            },
                            "title": "Acl:File"
                          }
                        }
                      },
                      {
                        "title": "usersAcl",
                        "properties": {
                          "usersAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "User:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all users",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "the current user making the request",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "User:Scope"
                              }
                            },
                            "title": "Acl:User"
                          }
                        }
                      },
                      {
                        "title": "projectsAcl",
                        "properties": {
                          "projectsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE"
                                  ],
                                  "default": "LIST",
                                  "title": "Project:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Project:Scope"
                              }
                            },
                            "title": "Acl:Project"
                          }
                        }
                      },
                      {
                        "title": "securityCategoriesAcl",
                        "properties": {
                          "securityCategoriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "MEMBEROF",
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "MEMBEROF",
                                  "title": "SecurityCategory:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "SecurityCategory:Scope"
                              }
                            },
                            "title": "Acl:SecurityCategory"
                          }
                        }
                      },
                      {
                        "title": "rawAcl",
                        "properties": {
                          "rawAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Raw:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Raw:Scope"
                              }
                            },
                            "title": "Acl:Raw"
                          }
                        }
                      },
                      {
                        "title": "timeSeriesAcl",
                        "properties": {
                          "timeSeriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Timeseries:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "assetIdScope": {
                                        "type": "object",
                                        "properties": {
                                          "subtreeIds": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "root asset id (subtrees)"
                                          }
                                        },
                                        "title": "Scope:AssetIdScope"
                                      }
                                    }
                                  }
                                ],
                                "title": "Timeseries:Scope"
                              }
                            },
                            "title": "Acl:Timeseries"
                          }
                        }
                      },
                      {
                        "title": "apikeysAcl",
                        "properties": {
                          "apikeysAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Apikey:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "apikeys the user making the request has",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Apikey:Scope"
                              }
                            },
                            "title": "Acl:Apikey"
                          }
                        }
                      },
                      {
                        "title": "threedAcl",
                        "properties": {
                          "threedAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "READ",
                                  "title": "Threed:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Threed:Scope"
                              }
                            },
                            "title": "Acl:Threed"
                          }
                        }
                      },
                      {
                        "title": "sequencesAcl",
                        "properties": {
                          "sequencesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Sequences:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Sequences:Scope"
                              }
                            },
                            "title": "Acl:Sequences"
                          }
                        }
                      },
                      {
                        "title": "analyticsAcl",
                        "properties": {
                          "analyticsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "EXECUTE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Analytics:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Analytics:Scope"
                              }
                            },
                            "title": "Acl:Analytics"
                          }
                        }
                      }
                    ]
                  },
                  "title": "Capability"
                },
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "isDeleted": {
                  "type": "boolean",
                  "default": false
                },
                "deletedTime": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "DataGroupSpec": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the group",
                  "example": "Production Engineers"
                },
                "sourceId": {
                  "type": "string",
                  "description": "ID of the group in the source. If this is the same ID as a group in the IDP, a user in that group will implicitly be a part of this group as well.",
                  "example": "b7c9a5a4-99c2-4785-bed3-5e6ad9a78603"
                },
                "capabilities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "groupsAcl",
                        "properties": {
                          "groupsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Group:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all groups",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "groups the current user is in",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Group:Scope"
                              }
                            },
                            "title": "Acl:Group"
                          }
                        }
                      },
                      {
                        "title": "assetsAcl",
                        "properties": {
                          "assetsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Asset:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Asset:Scope"
                              }
                            },
                            "title": "Acl:Asset"
                          }
                        }
                      },
                      {
                        "title": "eventsAcl",
                        "properties": {
                          "eventsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Event:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Event:Scope"
                              }
                            },
                            "title": "Acl:Event"
                          }
                        }
                      },
                      {
                        "title": "filesAcl",
                        "properties": {
                          "filesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "File:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "File:Scope"
                              }
                            },
                            "title": "Acl:File"
                          }
                        }
                      },
                      {
                        "title": "usersAcl",
                        "properties": {
                          "usersAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "User:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "title": "all users",
                                        "type": "object"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "the current user making the request",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "User:Scope"
                              }
                            },
                            "title": "Acl:User"
                          }
                        }
                      },
                      {
                        "title": "projectsAcl",
                        "properties": {
                          "projectsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "READ",
                                    "CREATE",
                                    "UPDATE"
                                  ],
                                  "default": "LIST",
                                  "title": "Project:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Project:Scope"
                              }
                            },
                            "title": "Acl:Project"
                          }
                        }
                      },
                      {
                        "title": "securityCategoriesAcl",
                        "properties": {
                          "securityCategoriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "MEMBEROF",
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "MEMBEROF",
                                  "title": "SecurityCategory:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "SecurityCategory:Scope"
                              }
                            },
                            "title": "Acl:SecurityCategory"
                          }
                        }
                      },
                      {
                        "title": "rawAcl",
                        "properties": {
                          "rawAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Raw:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Raw:Scope"
                              }
                            },
                            "title": "Acl:Raw"
                          }
                        }
                      },
                      {
                        "title": "timeSeriesAcl",
                        "properties": {
                          "timeSeriesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Timeseries:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "assetIdScope": {
                                        "type": "object",
                                        "properties": {
                                          "subtreeIds": {
                                            "type": "array",
                                            "items": {
                                              "type": "string",
                                              "format": "uint64"
                                            },
                                            "title": "root asset id (subtrees)"
                                          }
                                        },
                                        "title": "Scope:AssetIdScope"
                                      }
                                    }
                                  }
                                ],
                                "title": "Timeseries:Scope"
                              }
                            },
                            "title": "Acl:Timeseries"
                          }
                        }
                      },
                      {
                        "title": "apikeysAcl",
                        "properties": {
                          "apikeysAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "LIST",
                                    "CREATE",
                                    "DELETE"
                                  ],
                                  "default": "LIST",
                                  "title": "Apikey:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "oneOf": [
                                  {
                                    "properties": {
                                      "all": {
                                        "type": "object",
                                        "title": "Scope:All"
                                      }
                                    }
                                  },
                                  {
                                    "properties": {
                                      "currentuserscope": {
                                        "title": "apikeys the user making the request has",
                                        "type": "object"
                                      }
                                    }
                                  }
                                ],
                                "title": "Apikey:Scope"
                              }
                            },
                            "title": "Acl:Apikey"
                          }
                        }
                      },
                      {
                        "title": "threedAcl",
                        "properties": {
                          "threedAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "CREATE",
                                    "UPDATE",
                                    "DELETE"
                                  ],
                                  "default": "READ",
                                  "title": "Threed:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Threed:Scope"
                              }
                            },
                            "title": "Acl:Threed"
                          }
                        }
                      },
                      {
                        "title": "sequencesAcl",
                        "properties": {
                          "sequencesAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "WRITE"
                                  ],
                                  "default": "READ",
                                  "title": "Sequences:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Sequences:Scope"
                              }
                            },
                            "title": "Acl:Sequences"
                          }
                        }
                      },
                      {
                        "title": "analyticsAcl",
                        "properties": {
                          "analyticsAcl": {
                            "type": "object",
                            "required": [
                              "actions",
                              "scope"
                            ],
                            "properties": {
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "enum": [
                                    "READ",
                                    "EXECUTE",
                                    "LIST"
                                  ],
                                  "default": "READ",
                                  "title": "Analytics:Action"
                                }
                              },
                              "scope": {
                                "type": "object",
                                "properties": {
                                  "all": {
                                    "type": "object",
                                    "title": "Scope:All"
                                  }
                                },
                                "title": "Analytics:Scope"
                              }
                            },
                            "title": "Acl:Analytics"
                          }
                        }
                      }
                    ]
                  },
                  "title": "Capability"
                }
              },
              "description": "A specification for creating a new group"
            }
          }
        }
      },
      "cogniteCapability": {
        "type": "array",
        "items": {
          "type": "object",
          "oneOf": [
            {
              "title": "groupsAcl",
              "properties": {
                "groupsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "READ",
                          "CREATE",
                          "UPDATE",
                          "DELETE"
                        ],
                        "default": "LIST",
                        "title": "Group:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "title": "all groups",
                              "type": "object"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currentuserscope": {
                              "title": "groups the current user is in",
                              "type": "object"
                            }
                          }
                        }
                      ],
                      "title": "Group:Scope"
                    }
                  },
                  "title": "Acl:Group"
                }
              }
            },
            {
              "title": "assetsAcl",
              "properties": {
                "assetsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Asset:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Asset:Scope"
                    }
                  },
                  "title": "Acl:Asset"
                }
              }
            },
            {
              "title": "eventsAcl",
              "properties": {
                "eventsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Event:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Event:Scope"
                    }
                  },
                  "title": "Acl:Event"
                }
              }
            },
            {
              "title": "filesAcl",
              "properties": {
                "filesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "File:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "File:Scope"
                    }
                  },
                  "title": "Acl:File"
                }
              }
            },
            {
              "title": "usersAcl",
              "properties": {
                "usersAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "CREATE",
                          "DELETE"
                        ],
                        "default": "LIST",
                        "title": "User:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "title": "all users",
                              "type": "object"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currentuserscope": {
                              "title": "the current user making the request",
                              "type": "object"
                            }
                          }
                        }
                      ],
                      "title": "User:Scope"
                    }
                  },
                  "title": "Acl:User"
                }
              }
            },
            {
              "title": "projectsAcl",
              "properties": {
                "projectsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "READ",
                          "CREATE",
                          "UPDATE"
                        ],
                        "default": "LIST",
                        "title": "Project:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Project:Scope"
                    }
                  },
                  "title": "Acl:Project"
                }
              }
            },
            {
              "title": "securityCategoriesAcl",
              "properties": {
                "securityCategoriesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "MEMBEROF",
                          "LIST",
                          "CREATE",
                          "DELETE"
                        ],
                        "default": "MEMBEROF",
                        "title": "SecurityCategory:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "SecurityCategory:Scope"
                    }
                  },
                  "title": "Acl:SecurityCategory"
                }
              }
            },
            {
              "title": "rawAcl",
              "properties": {
                "rawAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE",
                          "LIST"
                        ],
                        "default": "READ",
                        "title": "Raw:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Raw:Scope"
                    }
                  },
                  "title": "Acl:Raw"
                }
              }
            },
            {
              "title": "timeSeriesAcl",
              "properties": {
                "timeSeriesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Timeseries:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          }
                        },
                        {
                          "properties": {
                            "assetIdScope": {
                              "type": "object",
                              "properties": {
                                "subtreeIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "format": "uint64"
                                  },
                                  "title": "root asset id (subtrees)"
                                }
                              },
                              "title": "Scope:AssetIdScope"
                            }
                          }
                        }
                      ],
                      "title": "Timeseries:Scope"
                    }
                  },
                  "title": "Acl:Timeseries"
                }
              }
            },
            {
              "title": "apikeysAcl",
              "properties": {
                "apikeysAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "LIST",
                          "CREATE",
                          "DELETE"
                        ],
                        "default": "LIST",
                        "title": "Apikey:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "oneOf": [
                        {
                          "properties": {
                            "all": {
                              "type": "object",
                              "title": "Scope:All"
                            }
                          }
                        },
                        {
                          "properties": {
                            "currentuserscope": {
                              "title": "apikeys the user making the request has",
                              "type": "object"
                            }
                          }
                        }
                      ],
                      "title": "Apikey:Scope"
                    }
                  },
                  "title": "Acl:Apikey"
                }
              }
            },
            {
              "title": "threedAcl",
              "properties": {
                "threedAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "CREATE",
                          "UPDATE",
                          "DELETE"
                        ],
                        "default": "READ",
                        "title": "Threed:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Threed:Scope"
                    }
                  },
                  "title": "Acl:Threed"
                }
              }
            },
            {
              "title": "sequencesAcl",
              "properties": {
                "sequencesAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "WRITE"
                        ],
                        "default": "READ",
                        "title": "Sequences:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Sequences:Scope"
                    }
                  },
                  "title": "Acl:Sequences"
                }
              }
            },
            {
              "title": "analyticsAcl",
              "properties": {
                "analyticsAcl": {
                  "type": "object",
                  "required": [
                    "actions",
                    "scope"
                  ],
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "READ",
                          "EXECUTE",
                          "LIST"
                        ],
                        "default": "READ",
                        "title": "Analytics:Action"
                      }
                    },
                    "scope": {
                      "type": "object",
                      "properties": {
                        "all": {
                          "type": "object",
                          "title": "Scope:All"
                        }
                      },
                      "title": "Analytics:Scope"
                    }
                  },
                  "title": "Acl:Analytics"
                }
              }
            }
          ]
        },
        "title": "Capability"
      },
      "cogniteanalytics_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "EXECUTE",
                "LIST"
              ],
              "default": "READ",
              "title": "Analytics:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Analytics:Scope"
          }
        },
        "title": "Acl:Analytics"
      },
      "cogniteanalytics_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "EXECUTE",
          "LIST"
        ],
        "default": "READ",
        "title": "Analytics:Action"
      },
      "cogniteanalytics_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Analytics:Scope"
      },
      "cogniteapikeys_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "CREATE",
                "DELETE"
              ],
              "default": "LIST",
              "title": "Apikey:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "type": "object",
                    "title": "Scope:All"
                  }
                }
              },
              {
                "properties": {
                  "currentuserscope": {
                    "title": "apikeys the user making the request has",
                    "type": "object"
                  }
                }
              }
            ],
            "title": "Apikey:Scope"
          }
        },
        "title": "Acl:Apikey"
      },
      "cogniteapikeys_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "CREATE",
          "DELETE"
        ],
        "default": "LIST",
        "title": "Apikey:Action"
      },
      "cogniteapikeys_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            }
          },
          {
            "properties": {
              "currentuserscope": {
                "title": "apikeys the user making the request has",
                "type": "object"
              }
            }
          }
        ],
        "title": "Apikey:Scope"
      },
      "cogniteassets_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Asset:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Asset:Scope"
          }
        },
        "title": "Acl:Asset"
      },
      "cogniteassets_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Asset:Action"
      },
      "cogniteassets_aclIdScope": {
        "type": "object",
        "properties": {
          "subtreeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uint64"
            },
            "title": "root asset id (subtrees)"
          }
        },
        "title": "Scope:AssetIdScope"
      },
      "cogniteassets_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Asset:Scope"
      },
      "cogniteevents_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Event:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Event:Scope"
          }
        },
        "title": "Acl:Event"
      },
      "cogniteevents_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Event:Action"
      },
      "cogniteevents_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Event:Scope"
      },
      "cognitefiles_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "File:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "File:Scope"
          }
        },
        "title": "Acl:File"
      },
      "cognitefiles_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "File:Action"
      },
      "cognitefiles_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "File:Scope"
      },
      "cognitegroups_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "READ",
                "CREATE",
                "UPDATE",
                "DELETE"
              ],
              "default": "LIST",
              "title": "Group:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "title": "all groups",
                    "type": "object"
                  }
                }
              },
              {
                "properties": {
                  "currentuserscope": {
                    "title": "groups the current user is in",
                    "type": "object"
                  }
                }
              }
            ],
            "title": "Group:Scope"
          }
        },
        "title": "Acl:Group"
      },
      "cognitegroups_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "READ",
          "CREATE",
          "UPDATE",
          "DELETE"
        ],
        "default": "LIST",
        "title": "Group:Action"
      },
      "cognitegroups_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "title": "all groups",
                "type": "object"
              }
            }
          },
          {
            "properties": {
              "currentuserscope": {
                "title": "groups the current user is in",
                "type": "object"
              }
            }
          }
        ],
        "title": "Group:Scope"
      },
      "cogniteprojects_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "READ",
                "CREATE",
                "UPDATE"
              ],
              "default": "LIST",
              "title": "Project:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Project:Scope"
          }
        },
        "title": "Acl:Project"
      },
      "cogniteprojects_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "READ",
          "CREATE",
          "UPDATE"
        ],
        "default": "LIST",
        "title": "Project:Action"
      },
      "cogniteprojects_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Project:Scope"
      },
      "cogniteraw_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE",
                "LIST"
              ],
              "default": "READ",
              "title": "Raw:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Raw:Scope"
          }
        },
        "title": "Acl:Raw"
      },
      "cogniteraw_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE",
          "LIST"
        ],
        "default": "READ",
        "title": "Raw:Action"
      },
      "cogniteraw_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Raw:Scope"
      },
      "cognitesecuritycategories_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "MEMBEROF",
                "LIST",
                "CREATE",
                "DELETE"
              ],
              "default": "MEMBEROF",
              "title": "SecurityCategory:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "SecurityCategory:Scope"
          }
        },
        "title": "Acl:SecurityCategory"
      },
      "cognitesecuritycategories_aclAction": {
        "type": "string",
        "enum": [
          "MEMBEROF",
          "LIST",
          "CREATE",
          "DELETE"
        ],
        "default": "MEMBEROF",
        "title": "SecurityCategory:Action"
      },
      "cognitesecuritycategories_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "SecurityCategory:Scope"
      },
      "cognitesequences_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Sequences:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Sequences:Scope"
          }
        },
        "title": "Acl:Sequences"
      },
      "cognitesequences_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Sequences:Action"
      },
      "cognitesequences_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Sequences:Scope"
      },
      "cognitethreed_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "CREATE",
                "UPDATE",
                "DELETE"
              ],
              "default": "READ",
              "title": "Threed:Action"
            }
          },
          "scope": {
            "type": "object",
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            },
            "title": "Threed:Scope"
          }
        },
        "title": "Acl:Threed"
      },
      "cognitethreed_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "CREATE",
          "UPDATE",
          "DELETE"
        ],
        "default": "READ",
        "title": "Threed:Action"
      },
      "cognitethreed_aclScope": {
        "type": "object",
        "properties": {
          "all": {
            "type": "object",
            "title": "Scope:All"
          }
        },
        "title": "Threed:Scope"
      },
      "cognitetimeseries_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ],
              "default": "READ",
              "title": "Timeseries:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "type": "object",
                    "title": "Scope:All"
                  }
                }
              },
              {
                "properties": {
                  "assetIdScope": {
                    "type": "object",
                    "properties": {
                      "subtreeIds": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "uint64"
                        },
                        "title": "root asset id (subtrees)"
                      }
                    },
                    "title": "Scope:AssetIdScope"
                  }
                }
              }
            ],
            "title": "Timeseries:Scope"
          }
        },
        "title": "Acl:Timeseries"
      },
      "cognitetimeseries_aclAction": {
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ],
        "default": "READ",
        "title": "Timeseries:Action"
      },
      "cognitetimeseries_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "type": "object",
                "title": "Scope:All"
              }
            }
          },
          {
            "properties": {
              "assetIdScope": {
                "type": "object",
                "properties": {
                  "subtreeIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uint64"
                    },
                    "title": "root asset id (subtrees)"
                  }
                },
                "title": "Scope:AssetIdScope"
              }
            }
          }
        ],
        "title": "Timeseries:Scope"
      },
      "cogniteusers_aclAcl": {
        "type": "object",
        "required": [
          "actions",
          "scope"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LIST",
                "CREATE",
                "DELETE"
              ],
              "default": "LIST",
              "title": "User:Action"
            }
          },
          "scope": {
            "type": "object",
            "oneOf": [
              {
                "properties": {
                  "all": {
                    "title": "all users",
                    "type": "object"
                  }
                }
              },
              {
                "properties": {
                  "currentuserscope": {
                    "title": "the current user making the request",
                    "type": "object"
                  }
                }
              }
            ],
            "title": "User:Scope"
          }
        },
        "title": "Acl:User"
      },
      "cogniteusers_aclAction": {
        "type": "string",
        "enum": [
          "LIST",
          "CREATE",
          "DELETE"
        ],
        "default": "LIST",
        "title": "User:Action"
      },
      "cogniteusers_aclScope": {
        "type": "object",
        "oneOf": [
          {
            "properties": {
              "all": {
                "title": "all users",
                "type": "object"
              }
            }
          },
          {
            "properties": {
              "currentuserscope": {
                "title": "the current user making the request",
                "type": "object"
              }
            }
          }
        ],
        "title": "User:Scope"
      },
      "generic_aclAllScope": {
        "type": "object",
        "title": "Scope:All"
      },
      "generic_aclCurrentUserScope": {
        "type": "object",
        "title": "Scope:CurrentUser"
      },
      "ProjectName": {
        "type": "string",
        "description": "The display name of the project.",
        "example": "Open Industrial Data"
      },
      "UrlName": {
        "type": "string",
        "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
        "example": "publicdata"
      },
      "DefaultGroupId": {
        "type": "integer",
        "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
        "format": "int64",
        "example": 123871937
      },
      "ValidDomains": {
        "type": "array",
        "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
        "example": [
          "apple.com",
          "google.com"
        ],
        "items": {
          "type": "string",
          "example": "apple.com",
          "description": "Domain name that can successfully log into your tenant"
        }
      },
      "OutputProjectAuthentication": {
        "type": "object",
        "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
        "properties": {
          "validDomains": {
            "type": "array",
            "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
            "example": [
              "apple.com",
              "google.com"
            ],
            "items": {
              "type": "string",
              "example": "apple.com",
              "description": "Domain name that can successfully log into your tenant"
            }
          }
        }
      },
      "InputProjectAuthentication": {
        "type": "object",
        "description": "Data about how to authenticate and authorize users",
        "properties": {
          "azureADConfiguration": {
            "type": "object",
            "properties": {
              "appId": {
                "type": "string",
                "description": "Azure application ID. You get this when creating the Azure app."
              },
              "appSecret": {
                "type": "string",
                "description": "Azure application secret. You get this when creating the Azure app."
              },
              "tenantId": {
                "type": "string",
                "description": "Azure tenant ID."
              },
              "appResourceId": {
                "type": "string",
                "description": "Resource to grant access to. This is usually (always?) 00000002-0000-0000-c000-000000000000"
              }
            },
            "description": "Data specific to Azure AD authentication"
          },
          "validDomains": {
            "type": "array",
            "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
            "example": [
              "apple.com",
              "google.com"
            ],
            "items": {
              "type": "string",
              "example": "apple.com",
              "description": "Domain name that can successfully log into your tenant"
            }
          },
          "oAuth2Configuration": {
            "type": "object",
            "properties": {
              "loginUrl": {
                "type": "string",
                "description": "Login URL of OAuth2 provider. E.g https://accounts.google.com/o/oauth2/v2/auth."
              },
              "logoutUrl": {
                "type": "string",
                "description": "Logout URL of OAuth2 provider. E.g https://accounts.google.com/Logout."
              },
              "tokenUrl": {
                "type": "string",
                "description": "URL to get access token from OAuth2 provider. E.g https://www.googleapis.com/oauth2/v4/token."
              },
              "clientId": {
                "type": "string",
                "description": "Client ID. You probably get this when registering your client with the OAuth2 provider."
              },
              "clientSecret": {
                "type": "string",
                "description": "Client secret. You probably get this when registering your client with the OAuth2 provider."
              }
            },
            "description": "Data related to generic OAuth2 authentication. Not used for Azure AD"
          }
        }
      },
      "AzureADConfigurationDTO": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": "Azure application ID. You get this when creating the Azure app."
          },
          "appSecret": {
            "type": "string",
            "description": "Azure application secret. You get this when creating the Azure app."
          },
          "tenantId": {
            "type": "string",
            "description": "Azure tenant ID."
          },
          "appResourceId": {
            "type": "string",
            "description": "Resource to grant access to. This is usually (always?) 00000002-0000-0000-c000-000000000000"
          }
        },
        "description": "Data specific to Azure AD authentication"
      },
      "OAuth2ConfigurationDTO": {
        "type": "object",
        "properties": {
          "loginUrl": {
            "type": "string",
            "description": "Login URL of OAuth2 provider. E.g https://accounts.google.com/o/oauth2/v2/auth."
          },
          "logoutUrl": {
            "type": "string",
            "description": "Logout URL of OAuth2 provider. E.g https://accounts.google.com/Logout."
          },
          "tokenUrl": {
            "type": "string",
            "description": "URL to get access token from OAuth2 provider. E.g https://www.googleapis.com/oauth2/v4/token."
          },
          "clientId": {
            "type": "string",
            "description": "Client ID. You probably get this when registering your client with the OAuth2 provider."
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret. You probably get this when registering your client with the OAuth2 provider."
          }
        },
        "description": "Data related to generic OAuth2 authentication. Not used for Azure AD"
      },
      "serviceAccountName": {
        "type": "string",
        "description": "Unique name of the service account",
        "example": "some-internal-service@apple.com",
        "title": "name"
      },
      "groups": {
        "type": "array",
        "description": "List of group ids",
        "items": {
          "type": "integer",
          "format": "int64"
        },
        "example": [
          238712387,
          1283712837,
          1238712387
        ]
      },
      "ServiceAccountInput": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the service account",
            "example": "some-internal-service@apple.com",
            "title": "name"
          },
          "groups": {
            "type": "array",
            "description": "List of group ids",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              238712387,
              1283712837,
              1238712387
            ]
          }
        }
      },
      "ServiceAccount": {
        "required": [
          "name",
          "id",
          "groups",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the service account",
            "example": "some-internal-service@apple.com",
            "title": "name"
          },
          "groups": {
            "type": "array",
            "description": "List of group ids",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              238712387,
              1283712837,
              1238712387
            ]
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "example": false,
            "description": "If this service account has been logically deleted"
          },
          "deletedTime": {
            "type": "integer",
            "format": "int64",
            "description": "Time of deletion"
          }
        }
      },
      "NewApiKeyResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "serviceAccountId",
                "createdTime",
                "status",
                "value"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Internal id for the api key"
                },
                "serviceAccountId": {
                  "type": "integer",
                  "format": "int64",
                  "description": "id of the service account"
                },
                "createdTime": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Time of creating in unix ms"
                },
                "status": {
                  "type": "string",
                  "description": "The status of the api key.",
                  "enum": [
                    "ACTIVE",
                    "DELETED"
                  ],
                  "default": "ACTIVE"
                },
                "value": {
                  "type": "string",
                  "description": "The api key to be used against the API",
                  "example": "MQ23y87QSDKIJSd87287sdJkjsd"
                }
              }
            }
          }
        }
      },
      "NewApiKeyResponseDTO": {
        "type": "object",
        "required": [
          "id",
          "serviceAccountId",
          "createdTime",
          "status",
          "value"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Internal id for the api key"
          },
          "serviceAccountId": {
            "type": "integer",
            "format": "int64",
            "description": "id of the service account"
          },
          "createdTime": {
            "type": "integer",
            "format": "int64",
            "description": "Time of creating in unix ms"
          },
          "status": {
            "type": "string",
            "description": "The status of the api key.",
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "default": "ACTIVE"
          },
          "value": {
            "type": "string",
            "description": "The api key to be used against the API",
            "example": "MQ23y87QSDKIJSd87287sdJkjsd"
          }
        }
      },
      "DataApiKeyRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "serviceAccountId"
              ],
              "type": "object",
              "properties": {
                "serviceAccountId": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "ApiKeyRequest": {
        "required": [
          "serviceAccountId"
        ],
        "type": "object",
        "properties": {
          "serviceAccountId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiKeyResponse": {
        "type": "object",
        "title": "ApiKeyResponse",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "ApiKeyObject",
              "required": [
                "id",
                "serviceAccountId",
                "createdTime",
                "status"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 91723917823,
                  "description": "id of the api key"
                },
                "serviceAccountId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1283712837,
                  "description": "id of the service account"
                },
                "createdTime": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Created time in unix milliseconds",
                  "example": 1554897980221
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "ACTIVE",
                    "DELETED"
                  ]
                }
              }
            }
          }
        }
      },
      "DataSecurityCategorySpecDTO": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "minLength": 1,
            "items": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the security category",
                  "example": "Guarded by vendor x"
                }
              }
            }
          }
        }
      },
      "SecurityCategoryResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name",
                "id"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the security category",
                  "example": "Guarded by vendor x"
                },
                "id": {
                  "type": "integer",
                  "description": "Id of the security category",
                  "format": "int64"
                }
              }
            }
          }
        }
      },
      "SecurityCategoryWithCursorResponse": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "required": [
                "name",
                "id"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the security category",
                  "example": "Guarded by vendor x"
                },
                "id": {
                  "type": "integer",
                  "description": "Id of the security category",
                  "format": "int64"
                }
              }
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor to get the next page of results (if available)."
          }
        },
        "description": "A list of objects along with possible cursors to get the next page of results"
      },
      "SecurityCategorySpecDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the security category",
            "example": "Guarded by vendor x"
          }
        }
      },
      "SecurityCategoryDTO": {
        "required": [
          "name",
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the security category",
            "example": "Guarded by vendor x"
          },
          "id": {
            "type": "integer",
            "description": "Id of the security category",
            "format": "int64"
          }
        }
      }
    },
    "parameters": {
      "project": {
        "in": "path",
        "name": "project",
        "required": true,
        "description": "Project name",
        "schema": {
          "type": "string",
          "example": "publicdata"
        }
      },
      "Offset": {
        "name": "offset",
        "description": "Offset from the first result. Sum of limit and offset must not exceed 1000.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "maximum": 1000
        }
      },
      "Cursor": {
        "name": "cursor",
        "description": "Cursor for paging through results",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "Limit": {
        "name": "limit",
        "description": "Limits the number of results to be returned. The maximum results returned by the server is 1000 even if the limit specified is larger.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 100,
          "minimum": 1,
          "maximum": 1000
        }
      },
      "CogniteInternalId": {
        "in": "path",
        "name": "id",
        "required": true,
        "description": "Cognite internal id",
        "schema": {
          "description": "Javascript friendly internal ID given to the object.",
          "type": "integer",
          "minimum": 1,
          "maximum": 9007199254740991,
          "format": "int64"
        }
      },
      "ProjectName": {
        "name": "project",
        "description": "Project name.",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "Name": {
        "name": "name",
        "in": "query",
        "schema": {
          "type": "string",
          "description": "Name of the file.",
          "maxLength": 50
        }
      },
      "ModelId": {
        "name": "modelId",
        "in": "path",
        "description": "Model ID.",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "RevisionId": {
        "name": "revisionId",
        "in": "path",
        "description": "Revision ID.",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "responses": {
      "MissingField": {
        "description": "Missing required fields.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Some required fields are missing",
              "required": [
                "code",
                "message",
                "missingFields"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "HTTP status code",
                  "format": "int32",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "description": "Error message"
                },
                "extra": {
                  "type": "object",
                  "description": "Additional data"
                },
                "missingFields": {
                  "uniqueItems": true,
                  "type": "array",
                  "description": "Fields that are missing.",
                  "items": {
                    "type": "object",
                    "description": "Fields that are missing."
                  }
                }
              }
            }
          }
        }
      },
      "EmptyResponse": {
        "description": "Empty response.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "The response for a failed request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "type": "object",
                  "required": [
                    "code",
                    "message"
                  ],
                  "description": "Cognite API error",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "format": "int32",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message",
                      "example": "Could not authenticate."
                    },
                    "missing": {
                      "type": "array",
                      "description": "List of lookup objects that have not matched any results.",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    },
                    "duplicated": {
                      "type": "array",
                      "description": "List of objects that violate the uniqueness constraint.",
                      "items": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AssetDataWithCursorResponse": {
        "description": "Paged response with list of assets",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag.",
                            "maxLength": 50
                          },
                          "parentId": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of asset.",
                            "maxLength": 500
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of this asset"
                          }
                        },
                        "description": "Representation of a physical asset, e.g plant or piece of equipment"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "createdTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "path": {
                            "type": "array",
                            "description": "IDs of assets on the path to the asset.",
                            "items": {
                              "type": "integer",
                              "description": "IDs of assets on the path to the asset.",
                              "format": "int64"
                            }
                          },
                          "depth": {
                            "type": "integer",
                            "description": "Asset path depth (number of levels below root node).",
                            "format": "int32",
                            "minimum": 0
                          }
                        }
                      }
                    ]
                  }
                },
                "nextCursor": {
                  "type": "string",
                  "description": "Cursor to get the next page of results (if available)."
                }
              },
              "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
            }
          }
        }
      },
      "AssetDataResponse": {
        "description": "Response with list of assets",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of asset. Often referred to as tag.",
                            "maxLength": 50
                          },
                          "parentId": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of asset.",
                            "maxLength": 500
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "source": {
                            "type": "string",
                            "description": "The source of this asset"
                          }
                        },
                        "description": "Representation of a physical asset, e.g plant or piece of equipment"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "createdTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "path": {
                            "type": "array",
                            "description": "IDs of assets on the path to the asset.",
                            "items": {
                              "type": "integer",
                              "description": "IDs of assets on the path to the asset.",
                              "format": "int64"
                            }
                          },
                          "depth": {
                            "type": "integer",
                            "description": "Asset path depth (number of levels below root node).",
                            "format": "int32",
                            "minimum": 0
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "AssetResponse": {
        "description": "Single asset response",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of asset. Often referred to as tag.",
                      "maxLength": 50
                    },
                    "parentId": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of asset.",
                      "maxLength": 500
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "The source of this asset"
                    }
                  },
                  "description": "Representation of a physical asset, e.g plant or piece of equipment"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "path": {
                      "type": "array",
                      "description": "IDs of assets on the path to the asset.",
                      "items": {
                        "type": "integer",
                        "description": "IDs of assets on the path to the asset.",
                        "format": "int64"
                      }
                    },
                    "depth": {
                      "type": "integer",
                      "description": "Asset path depth (number of levels below root node).",
                      "format": "int32",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "EventDataResponse": {
        "description": "Paged response with list of events",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project",
                                "type": "string",
                                "maxLength": 255
                              },
                              "startTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "endTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "type": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Type of the event, e.g 'failure'."
                              },
                              "subtype": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Subtype of the event, e.g 'electrical'."
                              },
                              "description": {
                                "maxLength": 500,
                                "type": "string",
                                "description": "Textual description of the event."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "minItems": 1,
                                "maxItems": 100,
                                "uniqueItems": true,
                                "description": "Asset IDs of related equipment that this event relates to.",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of this event."
                              }
                            },
                            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "EventResponse": {
        "description": "response with list of events",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project",
                      "type": "string",
                      "maxLength": 255
                    },
                    "startTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "endTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "type": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Type of the event, e.g 'failure'."
                    },
                    "subtype": {
                      "maxLength": 64,
                      "type": "string",
                      "description": "Subtype of the event, e.g 'electrical'."
                    },
                    "description": {
                      "maxLength": 500,
                      "type": "string",
                      "description": "Textual description of the event."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "minItems": 1,
                      "maxItems": 100,
                      "uniqueItems": true,
                      "description": "Asset IDs of related equipment that this event relates to.",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      }
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of this event."
                    }
                  },
                  "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "EventDataWithCursorResponse": {
        "description": "single event response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project",
                                "type": "string",
                                "maxLength": 255
                              },
                              "startTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "endTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "type": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Type of the event, e.g 'failure'."
                              },
                              "subtype": {
                                "maxLength": 64,
                                "type": "string",
                                "description": "Subtype of the event, e.g 'electrical'."
                              },
                              "description": {
                                "maxLength": 500,
                                "type": "string",
                                "description": "Textual description of the event."
                              },
                              "metadata": {
                                "type": "object",
                                "description": "Custom, application specific metadata. String key -> String value",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "assetIds": {
                                "type": "array",
                                "minItems": 1,
                                "maxItems": 100,
                                "uniqueItems": true,
                                "description": "Asset IDs of related equipment that this event relates to.",
                                "items": {
                                  "description": "Javascript friendly internal ID given to the object.",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 9007199254740991,
                                  "format": "int64"
                                }
                              },
                              "source": {
                                "maxLength": 128,
                                "type": "string",
                                "description": "The source of this event."
                              }
                            },
                            "description": "An event represents something that happened at a given interval in time, e.g a failure, a work order etc."
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "lastUpdatedTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              },
                              "createdTime": {
                                "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                                "type": "integer",
                                "minimum": 0,
                                "format": "int64"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "nextCursor": {
                      "type": "string",
                      "description": "Cursor to get the next page of results (if available)."
                    }
                  },
                  "description": "A list of objects along with possible cursors to get the next, or previous, page of results"
                }
              ]
            }
          }
        }
      },
      "FileMetadataResponse": {
        "description": "The response for a successful GET files/id operation",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "externalId": {
                      "description": "External Id provided by client. Should be unique within the project.",
                      "type": "string",
                      "maxLength": 255
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the file.",
                      "maxLength": 50
                    },
                    "source": {
                      "maxLength": 128,
                      "type": "string",
                      "description": "The source of the file."
                    },
                    "mimeType": {
                      "maxLength": 64,
                      "type": "string",
                      "example": "image/jpeg",
                      "description": "File type. E.g. text/plain, application/pdf, .."
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Custom, application specific metadata. String key -> String value",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "assetIds": {
                      "type": "array",
                      "items": {
                        "description": "Javascript friendly internal ID given to the object.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 9007199254740991,
                        "format": "int64"
                      },
                      "maxItems": 100,
                      "minItems": 1
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "id",
                    "uploaded",
                    "createdTime",
                    "lastUpdatedTime"
                  ],
                  "properties": {
                    "id": {
                      "description": "Javascript friendly internal ID given to the object.",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 9007199254740991,
                      "format": "int64"
                    },
                    "uploaded": {
                      "type": "boolean",
                      "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                      "example": true
                    },
                    "uploadedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "createdTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    },
                    "lastUpdatedTime": {
                      "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                      "type": "integer",
                      "minimum": 0,
                      "format": "int64"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "UploadFileMetadataResponse": {
        "description": "The response for a successful files/initupload operation",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "externalId": {
                          "description": "External Id provided by client. Should be unique within the project.",
                          "type": "string",
                          "maxLength": 255
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the file.",
                          "maxLength": 50
                        },
                        "source": {
                          "maxLength": 128,
                          "type": "string",
                          "description": "The source of the file."
                        },
                        "mimeType": {
                          "maxLength": 64,
                          "type": "string",
                          "example": "image/jpeg",
                          "description": "File type. E.g. text/plain, application/pdf, .."
                        },
                        "metadata": {
                          "type": "object",
                          "description": "Custom, application specific metadata. String key -> String value",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "assetIds": {
                          "type": "array",
                          "items": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "maxItems": 100,
                          "minItems": 1
                        }
                      }
                    },
                    {
                      "type": "object",
                      "required": [
                        "id",
                        "uploaded",
                        "createdTime",
                        "lastUpdatedTime"
                      ],
                      "properties": {
                        "id": {
                          "description": "Javascript friendly internal ID given to the object.",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991,
                          "format": "int64"
                        },
                        "uploaded": {
                          "type": "boolean",
                          "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                          "example": true
                        },
                        "uploadedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "createdTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        },
                        "lastUpdatedTime": {
                          "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                          "type": "integer",
                          "minimum": 0,
                          "format": "int64"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "object",
                  "required": [
                    "uploadUrl"
                  ],
                  "properties": {
                    "uploadUrl": {
                      "description": "The URL where the file contents should be uploaded.",
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "FileMetadataWithCursorResponse": {
        "description": "The response for a successful files/list operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 50
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of the file."
                          },
                          "mimeType": {
                            "maxLength": 64,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "maxItems": 100,
                            "minItems": 1
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "id",
                          "uploaded",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "properties": {
                          "id": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "uploaded": {
                            "type": "boolean",
                            "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                            "example": true
                          },
                          "uploadedTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "createdTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    ]
                  }
                },
                "nextCursor": {
                  "type": "string",
                  "description": "Cursor to get the next page of results (if available)."
                }
              },
              "description": "A list of objects along with possible cursors to get the next page of results"
            }
          }
        }
      },
      "FileResponse": {
        "description": "The response for a successful files/byids, files/search or files/update operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "externalId": {
                            "description": "External Id provided by client. Should be unique within the project.",
                            "type": "string",
                            "maxLength": 255
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the file.",
                            "maxLength": 50
                          },
                          "source": {
                            "maxLength": 128,
                            "type": "string",
                            "description": "The source of the file."
                          },
                          "mimeType": {
                            "maxLength": 64,
                            "type": "string",
                            "example": "image/jpeg",
                            "description": "File type. E.g. text/plain, application/pdf, .."
                          },
                          "metadata": {
                            "type": "object",
                            "description": "Custom, application specific metadata. String key -> String value",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "assetIds": {
                            "type": "array",
                            "items": {
                              "description": "Javascript friendly internal ID given to the object.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 9007199254740991,
                              "format": "int64"
                            },
                            "maxItems": 100,
                            "minItems": 1
                          }
                        }
                      },
                      {
                        "type": "object",
                        "required": [
                          "id",
                          "uploaded",
                          "createdTime",
                          "lastUpdatedTime"
                        ],
                        "properties": {
                          "id": {
                            "description": "Javascript friendly internal ID given to the object.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 9007199254740991,
                            "format": "int64"
                          },
                          "uploaded": {
                            "type": "boolean",
                            "description": "Whether or not the actual file is uploaded.  This field is returned only by the API, it has no effect in a post body.",
                            "example": true
                          },
                          "uploadedTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "createdTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          },
                          "lastUpdatedTime": {
                            "description": "It is the number of seconds that have elapsed since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.",
                            "type": "integer",
                            "minimum": 0,
                            "format": "int64"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "DataWithLinks": {
        "description": "The response for a successful files/downloadlink operation.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "downloadUrl": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "oneOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Javascript friendly internal ID given to the object.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 9007199254740991,
                                "format": "int64"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "externalId": {
                                "description": "External Id provided by client. Should be unique within the project.",
                                "type": "string",
                                "maxLength": 255
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "LoginStatusResponse": {
        "description": "Information about the current logged in entity",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "LoginStatusResponse",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "user",
                    "loggedIn",
                    "project",
                    "projectId"
                  ],
                  "properties": {
                    "user": {
                      "type": "string",
                      "description": "The user principal, e.g john.doe@corporation.com.",
                      "example": "tim@apple.com"
                    },
                    "loggedIn": {
                      "type": "boolean",
                      "description": "Whether the user is logged in or not.",
                      "example": true
                    },
                    "project": {
                      "type": "string",
                      "description": "Name of project user belongs to",
                      "example": "tesla"
                    },
                    "projectId": {
                      "type": "integer",
                      "description": "Internal project id of the project",
                      "format": "int64",
                      "example": 137238723719
                    },
                    "apiKeyId": {
                      "type": "integer",
                      "format": "int64",
                      "description": "ID of the api key making the request. This is optional and only present if an api key is used as authentication."
                    }
                  },
                  "description": "Represents the current authentication status of the request"
                }
              }
            }
          }
        }
      },
      "ProjectResponse": {
        "description": "Information about the project",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "name",
                "urlName"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The display name of the project.",
                  "example": "Open Industrial Data"
                },
                "urlName": {
                  "type": "string",
                  "description": "The url name of the project. This is used as part of API calls. It should only contain letters, digits and hyphens, as long as the hyphens are not at the start or end.",
                  "example": "publicdata"
                },
                "defaultGroupId": {
                  "type": "integer",
                  "description": "A default group for all project users. Can be used to establish default capabilities.WARNING: this group may be logically deleted",
                  "format": "int64",
                  "example": 123871937
                },
                "authentication": {
                  "type": "object",
                  "description": "Data about how to authenticate and authorize users. The authentication configuration is hidden.",
                  "properties": {
                    "validDomains": {
                      "type": "array",
                      "description": "List of valid domains. If left empty, any user registered with the OAuth2 provider will get access.",
                      "example": [
                        "apple.com",
                        "google.com"
                      ],
                      "items": {
                        "type": "string",
                        "example": "apple.com",
                        "description": "Domain name that can successfully log into your tenant"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ServiceAccountResponse": {
        "description": "List of service accounts",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "description": "List of service accounts",
                  "items": {
                    "required": [
                      "name",
                      "id",
                      "groups",
                      "isDeleted"
                    ],
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Unique name of the service account",
                        "example": "some-internal-service@apple.com",
                        "title": "name"
                      },
                      "groups": {
                        "type": "array",
                        "description": "List of group ids",
                        "items": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "example": [
                          238712387,
                          1283712837,
                          1238712387
                        ]
                      },
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "isDeleted": {
                        "type": "boolean",
                        "example": false,
                        "description": "If this service account has been logically deleted"
                      },
                      "deletedTime": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Time of deletion"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "api-key": []
    },
    {
      "token": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Core resources",
      "tags": [
        "Assets",
        "Time series",
        "Events",
        "Files",
        "Raw"
      ]
    },
    {
      "name": "3D",
      "tags": [
        "3D Models",
        "3D Model Revisions",
        "3D Files",
        "3D Asset Mapping",
        "3D Viewer"
      ]
    },
    {
      "name": "Identity and access management",
      "tags": [
        "Projects",
        "Service accounts",
        "API keys",
        "Groups",
        "Security categories"
      ]
    },
    {
      "name": "Authentication",
      "tags": [
        "Login",
        "Logout"
      ]
    }
  ],
  "tags": [
    {
      "name": "Assets",
      "description": "CDF organizes digital information about the physical world. Assets are digital representations of physical objects or groups of objects, and assets are organized into an asset hierarchy. For example, an asset can represent a water pump which is part of a subsystem on an oil platform.\n\nAssets are used to connect related data together, even if the data comes from different sources; Time series of data points, events and files are all connected to one or more assets. The pump asset can be connected to a time series measuring pressure within the pump, as well as events recording maintenance operations, and a file with a 3D diagram of the pump.\n\nAt the top of an asset hierarchy is a root asset (e.g., the oil platform). Each project can have multiple root assets. All assets have a name and a parent asset. No assets with the same parent can have the same name."
    },
    {
      "name": "Events",
      "description": "Event objects store complex information about multiple assets over a time period. For example, an event can describe two hours of maintenance on a water pump and some associated pipes, or a future time window where the pump is scheduled for inspection. This is in contrast with data points in time series that store single pieces of information about one asset at specific points in time (e.g., temperature measurements).\n\nAn event’s time period is defined by a start time and end time, both millisecond timestamps since the UNIX epoch. The timestamps can be in the future. In addition, events can have a text description as well as arbitrary metadata and properties.\n"
    },
    {
      "name": "Files",
      "description": "A file stores a sequence of bytes connected to one or more assets. For\nexample, a file can contain a piping and instrumentation diagram (P&IDs)\nshowing how multiple assets are connected.\n\nEach file is identified by the 'id' field, which is generated internally \nfor each new file. Each file's 'id' field is unique within a project.\n\nThe 'externalId' field is optional, but can also be used to identify a file. \nThe 'externalId' (if used) must be unique within a project.\n\nFiles are created in two steps; First the metadata is stored in a file\nobject, and then the file contents are uploaded. This means that files can\nexist in a non-uploaded state. The upload state is reflected in the 'uploaded' \nfield in responses."
    },
    {
      "name": "3D",
      "description": "We organize 3D data into models and revisions. A model is just a placeholder for a set of revisions. Revisions contains the actual 3D data. For example you can have a model named Compressor and you can upload a revision under that model. When you create a revision you need to attach a 3D file. For every new version of the 3D model you upload a new revision under the placeholder model. You can then easily track the history of a model by browsing the different revisions.\n\nWhen you upload a new revision Cognite need to process the 3D data to optimize it for rendering. This can take some time and we therefore give you a status string back in the revision object. You can then follow the process while you wait.\n\nA 3D model is typically built up by a hierarchical structure. This looks very similar to how we organize our internal asset hierarchy. We support endpoints to extract the 3D node hierarchy and endpoints to make mappings from the 3D nodes to nodes in Cognite's asset hierarchy. We assign a random ID, nodeId, to each node in the 3D hierarchy. This is the ID representing the object in the viewer. When a user click on a object in the viewer it returns the ID for the object that was clicked. You can then use that ID to look up which node in the hierarchy the user clicked on.\n\nWe also deliver a [web based 3D viewer](https://www.npmjs.com/package/@cognite/3d-viewer) to embed the 3D model in your own web page."
    },
    {
      "name": "Time series",
      "description": "A time series consists of a sequence of data points connected to a single asset. \n\nFor example: A water pump asset can have a temperature time series that records a data point in units of °C every second. \n\nA single asset can have several time series. The water pump could have additional time series measuring pressure within the pump, rpm, flow volume, power consumption, and more.\n\nTime series store data points as either number or strings. This is controlled by the is_string flag on the time series object. Numerical data points can be aggregated before they are returned from a query (e.g., to find the average temperature for a day). String data points, on the other hand, cannot be aggregated by CDF, but can store arbitrary information like states (e.g. “open”/”closed”) or more complex information (JSON).\n\nCognite stores discrete data points, but the underlying process measured by the data points can vary continuously. When interpolating between data points, we can either assume that each value stays the same until the next measurement, or that it linearly changes between the two measurements. This is controlled by the is_step flag on the time series object. For example, if we estimate the average over a time containing two data points, the average will either be close to the first (is step) or close to the mean of the two (not is step).\n\nA data point stores a single piece of information, a number or a string, associated with a specific time. Data points are identified by their timestamps, measured in milliseconds since the unix epoch -- 00:00, January 1st, 1970. Milliseconds is the finest time resolution supported by CDF i.e. fractional milliseconds are not supported. Leap seconds are not counted.\n\nNumerical data points can be aggregated before they are retrieved from CDF. This allows for faster queries by reducing the amount of data transferred. You can aggregate data points by specifying one or more aggregates (e.g. average, minimum, maximum) as well as the time granularity over which the aggregates should be applied (e.g. “1h” for one hour).\n\nAggregates are aligned to the start time modulo the granularity unit. For example, if you ask for daily average temperatures since Monday afternoon last week, the first aggregated data point will contain averages for Monday, the second for Tuesday, etc. Determining aggregate alignment without considering data point timestamps allows CDF to pre-calculate aggregates (e.g. to quickly return daily average temperatures for a year). As a consequence, aggregating over 60 minutes can return a different result that aggregating over 1 hour because the two queries will be aligned differently.Deprecation warning: In the future, CDF will phase out name as a unique identifier for time series, and instead use a primary key of externalId. Time series names must currently be unique across across all time series in the same project. In version 1 of CDF, time series names will no longer be unique. "
    },
    {
      "name": "Raw",
      "description": "Manage data in the raw NoSQL database. Each project will have a variable number of raw databases, each of which will have a variable number of tables, each of which will have a variable number of key-value objects. Only queries on key are supported through this API."
    },
    {
      "name": "Login",
      "description": "A user that is only manifested in an external IDP needs to authenticate towards that IDP and not Cognite directly. Our login endpoints gives some mechanism for both redirecting to the IDP for a given project as well as getting information about the currently authenticated user. For a service account manifested in CDF, there's no reason to logging in. To validate that the key is valid, you can ask for authentication information about the logged in entity.\n"
    },
    {
      "name": "Logout",
      "description": "Logging out a user means invalidating the token granted by CDF on the behalf of the external IDP. Optionally, you can also get a logout url to log out of the IDP itself (Azure AD, Google etc). Logging out is only effective for tokens (not api keys).\n"
    },
    {
      "name": "Groups",
      "description": "Cognite groups API"
    },
    {
      "name": "Projects",
      "description": "Projects are used to separate customers from one another, and all objects in CDF are linked to a project. A customer usually has only one project. The project object contains configuration for how to authenticate users. Automatically assigned object ids are unique only within each project.\n"
    },
    {
      "name": "Service accounts",
      "description": "Manage service accounts for a specific project."
    },
    {
      "name": "API keys",
      "description": "Manage api keys"
    },
    {
      "name": "Security categories",
      "description": "Manage security categories"
    }
  ]
}